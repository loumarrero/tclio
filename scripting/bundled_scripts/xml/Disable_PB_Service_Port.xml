<!-- This file is generated by system. Do not edit this file. -->
<script name="Disable_PB_Service_Port">
<comments>This script disables a Port based PB Service</comments>
<content>#@MetaDataStart
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Disables a Port based PB Service for Customer
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:  This script disables a Port based PB Service
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;scripting.Script to disable a Port based PB Service&quot;
# @SectionStart (description = &quot;Port based PB Service Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;VMAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServVManName &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = no)
set var ethServEapsDomainNameSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd
################################################################################
################################################################################
#                    CONFIGURATION DETAIL
################################################################################
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# Define TCL Procedures for Service Parameter Validation
############################################################################
proc validateVManServiceParams {inVManName} {

    global abort_on_error
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF

    IF (![expr [string length $inVManName] &gt; 0]) THEN
       error &quot;VMAN name can not be empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure to disable VMAN Service
############################################################################
proc disableVManServicePort {inVManName} {

    global abort_on_error

    if {[catch {
       disable vlan $inVManName
    } result]} {
       error &quot;FAILED: Cannot disable VMAN $inVManName, $result&quot;
    }
}

############################################################################
# TCL Procedure to remove EAPS Protection of the VMAN
############################################################################
proc remProtectVManFromOneDomain {inVManName inDomainName} {

    global abort_on_error

    if {[catch {
        config eaps $inDomainName delete protected $inVManName
		regexp {.*WARNING: Make sure EAPS ring-ports are deleted from the VLAN first.*} ${CLI.OUT} foundit
        if {[info exists foundit]} {
           CLI Yes
        }  
    } errMsgText]} {
        puts &quot;FAILED: Cannot delete protection of VMAN $inVManName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

proc remProtectVManFromAllDomain {inVManName inDomainNameList} {

    if {[llength $inDomainNameList] == 0} {
       return
    }

    foreach currDomainName $inDomainNameList {
       remProtectVManFromOneDomain $inVManName $currDomainName
    }
}

############################################################################
# TCL Procedure for PB Service Disabling
############################################################################
proc disablePBServicePort {inVManName inDomainNameSeq} {

    global abort_on_error
    global isExos

	if {[string match $isExos true]} {
    	create log entry &quot;Starting Port based PB Service Disabling on Switch&quot;
	}

    set tmpDomainNameList [split $inDomainNameSeq ,]

    validateVManServiceParams   $inVManName
    remProtectVManFromAllDomain $inVManName $tmpDomainNameList
    disableVManServicePort      $inVManName

    if {[string match $isExos true]} {
    	create log entry &quot;Finished Port based PB Service Disabling on Switch&quot;
	}
}

############################################################################
# CLI MODE
############################################################################
setCliErrorHandling $abortOnCliError

disablePBServicePort $ethServVManName $ethServEapsDomainNameSeq

PerformSync -device $deviceIP -scope VLAN -vlan $ethServVManName
PerformSync -device $deviceIP -scope EapsDomain -type protected -name $ethServEapsDomainNameSeq</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<menuScope>TOOLS</menuScope>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>
</script>
