<!-- This file is generated by system. Do not edit this file. -->
<script name="Rollback_MOD_UnProtected_BVLAN">
<comments>This scripts modifies a unprotected 802.1AH B-VLAN on NNI Ports</comments>
<content># @METADATASTART
#@DetailDescriptionStart
##################################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Unprotected 802.1AH B-VLAN modification on NNI Ports
##################################################################################
# Revision      : 1.0
# Last Updated  : 28-JAN-2010
##################################################################################
# Author Name   : NMS Team
##################################################################################
# Purpose:
##################################################################################
# 1. Modify a unprotected 802.1AH B-VLAN via creation on a new Switch
# 2. Modify a unprotected 802.1AH B-VLAN via deletion from a Switch
# 3. Modify a unprotected 802.1AH B-VLAN via insertion to more NNI Ports on a Switch
# 4. Modify a unprotected 802.1AH B-VLAN via removal from some NNI Ports on a Switch
##################################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;This script modifies 802.1AH B-VLANs on NNI Ports&quot;
# @SectionStart (description = &quot;802.1AH B-VLAN Modification Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;Choose Modification Action-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [Modify_Create,Modify_Delete,Modify_Insert,Modify_Remove,Modify_INSREM,Modify_RENAME])
set var unprotBVLanModifyActionType Modify_Create

################################################################################
# 802.1AH B-VLAN modification Parameters Definition
################################################################################
# @VariableFieldLabel (description = &quot;802.1AH-BVLAN Old Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotBVLanOldName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1AH-BVLAN New Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotBVLanNewName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1AH B-VLAN Tag, Create-only&quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var unprotBVLanBTag &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1AH B-VLAN QoS Profile, Create-only&quot;,
#   type        = String,
#   scope       = global,
#   required    = no,
#   validValues =[1,2,3,4,5,6,7,8])
set var unprotBVLanQPNum 8

# @VariableFieldLabel (description = &quot;Comma Listed NNI Ports-1 for B-VLAN&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotBVLanPortSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed NNI Ports-2 for B-VLAN&quot;
#   type        = String,
#   scope       = device,
#   required    = no)
set var unprotBVLanIRPortSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

#############################################################
# Validation of Unprotected B-VLAN Creation Parameters
#############################################################
proc validateBVLanCreateParams {inBVLanOldName
                                inBVLanBTag
                                inBVLanQPNum
                                inBVLanPortSeq} {

    IF (![expr [string length $inBVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanBTag] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Tag is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanQPNum] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN QoS-Profile Number is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanPortSeq] &gt; 0]) THEN
       error &quot;FAILED: NNI Port List is empty.&quot;
    ENDIF
}

#############################################################
# Validation of Unprotected B-VLAN Update(Insert/Remove/Delete)
#############################################################
proc validateBVLanUpdateParams {inBVLanOldName
                                inBVLanPortSeq} {

    IF (![expr [string length $inBVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanPortSeq] &gt; 0]) THEN
       error &quot;FAILED: NNI Port List is empty.&quot;
    ENDIF
}

############################################################################
# Validation of Unprotected B-VLAN Insert and Remove
############################################################################
proc validateBVLanInsRemParams {inBVLanOldName
                                inBVLanInsPortSeq
                                inBVLanRemPortSeq} {
    global abort_on_error

    IF (![expr [string length $inBVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanInsPortSeq] &gt; 0]) THEN
       error &quot;FAILED: Insert Port List is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanRemPortSeq] &gt; 0]) THEN
       error &quot;FAILED: Remove Port List is empty.&quot;
    ENDIF
}

############################################################################
# Validation of Unprotected B-VLAN renaming Parameters
############################################################################
proc validateBVLanRenameParams {inBVLanOldName
                                inBVLanNewName} {
    global abort_on_error

    IF (![expr [string length $inBVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Old Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanNewName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN New Name is empty.&quot;
    ENDIF
}

############################################################################
# Creation of a Unprotected B-VLAN and add Ports to it
############################################################################
proc createUnProtBVLan {inBVLanOldName
                        inBVLanBTag
                        inBVLanQPNum
                        inBVLanPortSeq} {
    global permitRingPortsAsUni

    if {[catch {
       create vlan $inBVLanOldName
    } result]} {
       error &quot;FAILED: Could not create BVLan $inBVLanOldName, $result&quot;
    }

    if {[catch {
       config vlan $inBVLanOldName tag $inBVLanBTag
    } result]} {
       delete vlan $inBVLanOldName
       error &quot;FAILED: Invalid Tag $inBVLanBTag for BVLan $inBVLanOldName, $result&quot;
    }

    ## if {[catch {
    ##  config vlan $inBVLanOldName qosprofile qp$inBVLanQPNum
    ## } result]} {
    ##    delete vlan $inBVLanOldName
    ##   error &quot;FAILED: Invalid QoS-Profile for BVLan $inBVLanOldName, $result&quot;
    ## }

    if {[catch {
       config vlan $inBVLanOldName add ports $inBVLanPortSeq tagged
       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI   $permitRingPortsAsUni
       ENDIF
    } result]} {
       delete vlan $inBVLanOldName
       error &quot;FAILED: Could not add Ports $inBVLanPortSeq to BVLan $inBVLanOldName, $result&quot;
    }
}

############################################################################
# Deletion of a Unprotected B-VLAN after removing Ports from it
############################################################################
proc deleteUnProtBVLan {inBVLanOldName
                        inBVLanPortSeq} {
    if {[catch {
       config vlan $inBVLanOldName delete ports $inBVLanPortSeq
    } result]} {
       error &quot;FAILED: Could not delete Ports $inBVLanPortSeq from BVLan $inBVLanOldName, $result&quot;
    }

    if {[catch {
       delete vlan $inBVLanOldName
    } result]} {
       error &quot;FAILED: Could not delete BVLan $inBVLanOldName, $result&quot;
    }
}

############################################################################
# Insertion of a List of Ports to a Unprotected B-VLAN
############################################################################
proc insertUnProtBVLan {inBVLanOldName
                        inBVLanPortSeq} {
    if {[catch {
       config vlan $inBVLanOldName add ports $inBVLanPortSeq tagged
    } result]} {
       error &quot;FAILED: Could not Insert Ports $inBVLanPortSeq to BVLan $inBVLanOldName, $result&quot;
    }
}

############################################################################
# Removal of a List of Ports from a Unprotected B-VLAN
############################################################################
proc removeUnProtBVLan {inBVLanOldName
                        inBVLanPortSeq} {
    if {[catch {
       config vlan $inBVLanOldName delete ports $inBVLanPortSeq
    } result]} {
       error &quot;FAILED: Could not Remove Ports $inBVLanPortSeq from BVLan $inBVLanOldName, $result&quot;
    }
}

############################################################################
# Renaming of a Unprotected B-VLAN
############################################################################
proc renameUnProtBVLan {inBVLanOldName
                        inBVLanNewName} {

    global abort_on_error

    if {[catch {
       config vlan $inBVLanNewName name $inBVLanOldName
    } result]} {
       error &quot;FAILED: Could not rename-back BVLan $inBVLanNewName, $result&quot;
    }
}

############################################################################
# Rollback of Modify Unprotected B-VLAN via Creation on a new Switch
############################################################################
proc rollbackModUnProtBVLanCreate {inBVLanOldName
                                   inBVLanBTag
                                   inBVLanQPNum
                                   inBVLanPortSeq} {

    validateBVLanUpdateParams $inBVLanOldName \
                              $inBVLanPortSeq

    deleteUnProtBVLan $inBVLanOldName \
                      $inBVLanPortSeq
}

############################################################################
# Rollback of Modify Unprotected B-VLAN via Deletion from a Switch
############################################################################
proc rollbackModUnProtBVLanDelete {inBVLanOldName
                                   inBVLanBTag
                                   inBVLanQPNum
                                   inBVLanPortSeq} {

    validateBVLanUpdateParams $inBVLanOldName \
                              $inBVLanPortSeq

    createUnProtBVLan $inBVLanOldName \
                      $inBVLanBTag \
                      $inBVLanQPNum \
                      $inBVLanPortSeq
}

############################################################################
# Rollback of Modify Unprotected B-VLAN via Insertion on a Switch
############################################################################
proc rollbackModUnProtBVLanInsert {inBVLanOldName
                                   inBVLanPortSeq} {

    validateBVLanUpdateParams $inBVLanOldName \
                              $inBVLanPortSeq

    removeUnProtBVLan $inBVLanOldName \
                      $inBVLanPortSeq
}

############################################################################
# Rollback of Modify Unprotected B-VLAN via Removal from a Switch
############################################################################
proc rollbackModUnProtBVLanRemove {inBVLanOldName
                                   inBVLanPortSeq} {

    validateBVLanUpdateParams $inBVLanOldName \
                              $inBVLanPortSeq

    insertUnProtBVLan $inBVLanOldName \
                      $inBVLanPortSeq
}

############################################################################
# Rollback of Modify Unprotected B-VLAN via Insert-Removal from a Switch
############################################################################
proc rollbackModUnProtBVLanInsRem {inBVLanOldName
                                   inBVLanInsPortSeq
                                   inBVLanRemPortSeq} {
    global abort_on_error

    validateBVLanInsRemParams $inBVLanOldName \
                              $inBVLanInsPortSeq \
                              $inBVLanRemPortSeq

    removeUnProtBVLan $inBVLanOldName \
                      $inBVLanInsPortSeq

    insertUnProtBVLan $inBVLanOldName \
                      $inBVLanRemPortSeq
}

############################################################################
# Rollback of Modify Unprotected B-VLAN by renaming the B-VLAN on the Switch
############################################################################
proc rollbackModUnProtBVLanRename {inBVLanOldName
                                   inBVLanNewName} {

    validateBVLanRenameParams $inBVLanOldName \
                              $inBVLanNewName

    renameUnProtBVLan $inBVLanOldName \
                      $inBVLanNewName
}

############################################################################
# TCL Procedure to modify a unprotected 802.1AH B-VLAN on NNI ports of a Switch
############################################################################
proc rollbackUnProtBVLanModify {inModifyActionType
                                inBVLanOldName
                                inBVLanNewName
                                inBVLanBTag
                                inBVLanQPNum
                                inBVLanPortSeq
                                inBVLanIRPortSeq} {

    global isExos

    if {[string match $isExos true]} {
        create log entry &quot;START-Modify-Rollback Protected/Unprotected B-VLAN&quot;
    }

    switch $inModifyActionType {
       Modify_Create {
       rollbackModUnProtBVLanCreate $inBVLanOldName \
                                    $inBVLanBTag \
                                    $inBVLanQPNum \
                                    $inBVLanPortSeq
       }
       Modify_Delete {
       rollbackModUnProtBVLanDelete $inBVLanOldName \
                                    $inBVLanBTag \
                                    $inBVLanQPNum \
                                    $inBVLanPortSeq
       }
       Modify_Insert {
       rollbackModUnProtBVLanInsert $inBVLanOldName \
                                    $inBVLanPortSeq
       }
       Modify_Remove {
       rollbackModUnProtBVLanRemove $inBVLanOldName \
                                    $inBVLanPortSeq
       }
       Modify_INSREM {
       rollbackModUnProtBVLanInsRem $inBVLanOldName \
                                    $inBVLanPortSeq \
                                    $inBVLanIRPortSeq
       }
       Modify_RENAME {
       rollbackModUnProtBVLanRename $inBVLanOldName \
                                    $inBVLanNewName
       }
       default {
        error &quot;FAILED: Invalid Modify-Rollback Action&quot;
       }
    }

    if {[string match $isExos true]} {
        create log entry &quot;FINISH-Modify-Rollback Protected/Unprotected B-VLAN&quot;
    }
}

################################################################################
# CLI MODE Settings
################################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

rollbackUnProtBVLanModify $unprotBVLanModifyActionType \
                          $unprotBVLanOldName \
                          $unprotBVLanNewName \
                          $unprotBVLanBTag \
                          $unprotBVLanQPNum \
                          $unprotBVLanPortSeq \
                          $unprotBVLanIRPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<scriptOwner>system</scriptOwner>

</script>
