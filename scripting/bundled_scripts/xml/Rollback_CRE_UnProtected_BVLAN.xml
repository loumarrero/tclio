<!-- This file is generated by system. Do not edit this file. -->
<script name="Rollback_CRE_UnProtected_BVLAN">
<comments>This script rollbacks a previously created unprotected B-VLAN</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Rollback of a B-VLAN creation from NNI Ports
#############################################################################
# Revision      : 1.0
# Last Updated  : 09-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create B-VLAN
# 2.  Assign the B-VLAN to a QoS Profile
# 3.  Add a List of Ports to the B-VLAN
#####################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;To Rollback a B-VLAN from List of NNI Ports&quot;
# @SectionStart (description = &quot;Unprotected B-VLAN Create Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

################################################################################
# B-VLAN Definition
################################################################################

# @VariableFieldLabel (description = &quot;802.1ah B-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotBVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ah B-VLAN Tag&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var unprotBVLanBTag &quot;&quot;

# @VariableFieldLabel (description = &quot;B-VLAN QoS Profile Number&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues =[1,2,3,4,5,6,7,8])
set var unprotBVLanQPNum 8

# @VariableFieldLabel (description = &quot;Comma Listed NNI Ports of B-VLAN&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotBVLanPortSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

proc validateVendorName {inVendorName} {

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

############################################################################
# TCL Procedure for B-VLAN Delete Parameters Validation
############################################################################
proc validateBVLanDeleteParams {inBVLanName
                                inBVLanPortList} {

    IF (![expr [string length $inBVLanName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name empty.&quot;
    ENDIF
    
    IF (![expr [string length $inBVLanPortList] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN NNI Port List empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure to delete the B-VLAN removing from NNI Ports
############################################################################
proc delete8021ahBVLan {inBVLanName
                        inBVLanPortList} {
    if {[catch {
       config bvlan $inBVLanName delete ports $inBVLanPortList
    } errMsgText]} {
       error &quot;FAILED: Could not remove Ports $inBVLanPortList from B-VLAN $inBVLanName, $errMsgText&quot;
    }

    if {[catch {
       delete bvlan $inBVLanName
    } errMsgText]} {
       error &quot;FAILED: Could not delete BVLAN $inBVLanName, $errMsgText&quot;
    }
}

############################################################################
# TCL Procedure to validate and Create the 802.1ah B-VLAN and add Ports to it
############################################################################
proc rollbackUnProtectedBVLanCreate {inBVLanName
                                     inBVLanBTag
                                     inBVLanQPNum
                                     inBVLanPortList} {
	
	global isExos
	
	if {[string match $isExos true]} {
    	create log entry &quot;START-Create-Rollback Unprotected B-VLAN&quot;
	}
	
    validateBVLanDeleteParams $inBVLanName \
                              $inBVLanPortList

    delete8021ahBVLan $inBVLanName \
                      $inBVLanPortList
	
	if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Create-Rollback Unprotected B-VLAN&quot;
	}
}

################################################################################
# CLI MODE Settings
################################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

rollbackUnProtectedBVLanCreate $unprotBVLanName \
                               $unprotBVLanBTag \
                               $unprotBVLanQPNum \
                               $unprotBVLanPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
