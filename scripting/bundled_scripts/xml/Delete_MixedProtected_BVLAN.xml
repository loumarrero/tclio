<!-- This file is generated by system. Do not edit this file. -->
<script name="Delete_MixedProtected_BVLAN">
<comments>This scripts deletes a List of partially protected B-VLANs</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : B-VLAN deletion from partial EAPS domain's protection
#############################################################################
# Revision      : 1.0
# Last Updated  : 20-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1. Delete the list of B-VLAN from protection of a list of EAPS domains.
# 1. Delete the list of Ring Ports from each B-VLAN in the List.
# 2. Delete the list of B-VLAN(s).
#####################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;scripting.Script to delete partially protected B-VLANs&quot;
# @SectionStart (description = &quot;B-VLAN Deletion Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

################################################################################
# B-VLAN Definition
################################################################################

# @VariableFieldLabel (description = &quot;Choose B-VLAN Delete Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [DELETE_PROTECTED,DELETE_UNPROTECTED])
set var mixedProtDeleteType DELETE_PROTECTED

# @VariableFieldLabel (description = &quot;Comma separated B-VLAN Names&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var mixedProtBVLanNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var mixedProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated B-VLAN Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var mixedProtBVLanPortSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# TCL Procedure for B-VLAN Parameter Validation
############################################################################
proc validateBVLanParams {inBVLanNameSeq} {
    global abort_on_error
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF

    IF (![expr [string length $inBVLanNameSeq] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name List is empty.&quot;
    ENDIF

}

############################################################################
# TCL Procedure for B-VLAN Protection Parameter Validation
############################################################################
proc validateProtectParams {inDomainNameSeq} {

    global abort_on_error

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
}

#################################################################################
# Define TCL procedures for B-VLAN removal from EAPS Domain Ring Ports
# and subsequent deletion of the B-VLAN
################################################################################
proc remProtectOneBVLanFromOneDomain {inBVLanName
                                      inDomainName} {
    global abort_on_error

    if {[catch {
        config eaps $inDomainName delete protect $inBVLanName
    } errMsgText]} {
        puts &quot;FAILED: Cannot delete protection of B-VLAN $inBVLanName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

proc remProtectOneBVLanFromAllDomain {inBVLanName
                                      inDomainNameList} {
    global abort_on_error

    foreach currDomainName $inDomainNameList {
       remProtectOneBVLanFromOneDomain $inBVLanName $currDomainName
    }
}

proc delPortsFromOneBVLan {inBVLanName
                           inBVLanPortSeq} {
    global abort_on_error

  IF ([expr [string length $inBVLanPortSeq] &gt; 0]) THEN
      if {[catch {
         config bvlan $inBVLanName delete ports $inBVLanPortSeq
      } errMsgText]} {
         puts &quot;FAILED: Could not delete Ports $inBVLanPortSeq from B-VLAN $inBVLanName, $errMsgText&quot;
      }
  ENDIF
}

proc delOneBVLan {inBVLanName} {

    global abort_on_error

    if {[catch {
       delete bvlan $inBVLanName
    } errMsgText]} {
       regexp {.*Invalid input detected at '^' marker.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
           puts &quot;FAILED: Could not delete B-VLAN $inBVLanName, $errMsgText&quot;
       ELSE
         error &quot;FAILED: Could not delete B-VLAN $inBVLanName, $errMsgText&quot;
       ENDIF
    }
}

proc remProtectAllBVLanFromAllDomain {inBVLanNameList
                                      inDomainNameList} {
    global abort_on_error

    foreach currBVLanName $inBVLanNameList {
       remProtectOneBVLanFromAllDomain $currBVLanName \
                                       $inDomainNameList
    }
}

proc delPortsFromAllBVLan {inBVLanNameList
                           inBVLanPortSeq} {
    global abort_on_error

    foreach currBVLanName $inBVLanNameList {
       delPortsFromOneBVLan $currBVLanName \
                            $inBVLanPortSeq
    }
}

proc delAllBVLan {inBVLanNameList} {

    global abort_on_error

    foreach currBVLanName $inBVLanNameList {
       delOneBVLan $currBVLanName
    }
}

######################################################################
# TCL Procedure for EAPS Protected B-VLAN deletion
######################################################################
proc deleteProtectedBVLan {inBVLanNameSeq
                           inDomainNameSeq
                           inBVLanPortSeq} {
    global abort_on_error

    validateBVLanParams $inBVLanNameSeq

    validateProtectParams $inDomainNameSeq

    set tmpBVLanNameList  [split $inBVLanNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]

  delPortsFromAllBVLan $tmpBVLanNameList \
                         $inBVLanPortSeq

    remProtectAllBVLanFromAllDomain $tmpBVLanNameList \
                                    $tmpDomainNameList

    delAllBVLan $tmpBVLanNameList
}

######################################################################
# TCL Procedure for Un-Protected B-VLAN deletion
######################################################################
proc deleteUnProtectedBVLan {inBVLanNameSeq
                             inBVLanPortSeq} {
    global abort_on_error

    validateBVLanParams $inBVLanNameSeq

    set tmpBVLanNameList [split $inBVLanNameSeq ,]

    delPortsFromAllBVLan $tmpBVLanNameList \
                         $inBVLanPortSeq

    delAllBVLan $tmpBVLanNameList
}

######################################################################
# TCL Procedure for B-VLAN deletion after protection removal from
# EAPS Domain after validating all parameters
######################################################################
proc handledMixProtectedBVLanDelete {inDeleteType
                                     inBVLanNameSeq
                                     inDomainNameSeq
                                     inBVLanPortSeq} {
    global abort_on_error
  global isExos

  if {[string match $isExos true]} {
      create log entry &quot;START-MIX-PROTECTED-BVLAN-DELETE on Switch&quot;
  }

    switch $inDeleteType {
       DELETE_PROTECTED {
       deleteProtectedBVLan $inBVLanNameSeq \
                            $inDomainNameSeq \
                            $inBVLanPortSeq
       }
       DELETE_UNPROTECTED {
       deleteUnProtectedBVLan $inBVLanNameSeq \
                              $inBVLanPortSeq
       }
       default {
        error &quot;FAILED: Invalid B-VLAN Deletion Type&quot;
       }
    }

    if {[string match $isExos true]} {
      create log entry &quot;FINISH-MIX-PROTECTED-BVLAN-DELETE on Switch&quot;
  }
}

##############################################################
# CLI Configuration Starting
##############################################################
setCliErrorHandling $abortOnCliError

handledMixProtectedBVLanDelete $mixedProtDeleteType \
                               $mixedProtBVLanNameSeq \
                               $mixedProtDomainNameSeq \
                               $mixedProtBVLanPortSeq

############################################################################
## Now Sync B-VLAN and Topology on this device
############################################################################
PerformSync -device $deviceIP -scope VLAN
PerformSync -device $deviceIP -scope PBB
IF (!$match($mixedProtDeleteType,DELETE_PROTECTED) ) THEN
 PerformSync -device $deviceIP -scope EapsDomain -type protected -name $mixedProtDomainNameSeq
ENDIF
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<menuScope>TOOLS</menuScope>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
