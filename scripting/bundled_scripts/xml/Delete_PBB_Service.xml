<!-- This file is generated by system. Do not edit this file. -->
<script name="Delete_PBB_Service">
  <comments>This script deletes a PBB Service at a List of UNI Port(s)</comments>
  <content>#@MetaDataStart
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Delete a PBB Service for Customer
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:  This script deletes a PBB Service at a List of
#           UNI Port(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;scripting.Script to delete a S/C-VLAN from UNI Port(s) and detach from B-VLAN&quot;
# @SectionStart (description = &quot;PBB Service Delete Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;PBB Service-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [PBB_STAG,PBB_CTAG,PBB_PORT])
set var ethServPbbType PBB_STAG

# @VariableFieldLabel (description = &quot;Switch-Platform&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes,
#   validValues = [MODEL_BD10K,MODEL_BD12K,MODEL_BD12804R,MODEL_BD20800])
set var ethServPlatformModel &quot;&quot;

# @VariableFieldLabel (description = &quot;B-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServBVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;S/C-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServSorCVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;I-SID Name on BD20K&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = no,
#   readonly    = no)
set var ethServISidName &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI-Ports&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var ethServUniPortSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+BWP_Name&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServUniPortBWPNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServOneRateBWParamsTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServTwoRateBWParamsTupleSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd
######################################################################

###########################################################################
# Procedure to Validate a single 2-Tuple of the form &apos;UNI_Port+BWP_Name&apos;
###########################################################################
proc validateUniPortBWPTuple {inUniPortBWPName
                              outUniPortNum
                              outBWPName} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outBWPName    tmpBWPName

     set tmpUniBWPList [split $inUniPortBWPName &apos;+&apos;]

     if {[llength $tmpUniBWPList] != 2} {
         error &quot;Invalid UNI-Port, BWP-Name Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniBWPList 0]
     set tmpBWPName    [lindex $tmpUniBWPList 1]
}

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple =&gt; &apos;BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum&apos;
###########################################################################
proc validateOneRateBWParamsTuple {inBWPNameParamsTuple
                                   outBWPName
                                   outCOSMode
                                   outMeterName
                                   outACLName
                                   outQPNum} {
     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple &apos;:&apos;]

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV &apos;+&apos;]

     if {[llength $tmpBWPAttrList] != 4} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpACLName    [lindex $tmpBWPAttrList 2]
     set tmpQPNum      [lindex $tmpBWPAttrList 3]
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple =&gt; &apos;BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum&apos;
###########################################################################
proc validateTwoRateBWParamsTuple {inBWPNameParamsTuple
                                   outBWPName
                                   outCOSMode
                                   outMeterName
                                   outACLName
                                   outQPNum} {
     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple &apos;:&apos;]

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV &apos;+&apos;]

     if {[llength $tmpBWPAttrList] != 4} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpACLName    [lindex $tmpBWPAttrList 2]
     set tmpQPNum      [lindex $tmpBWPAttrList 3]
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form &apos;UNI_Port+BWP_Name&apos;
#############################################################################
proc validateUniPortToBWPNameTupleSeq {inUniPortToBWPNameSeq
                                       outUniPortList
                                       outBWPNameList} {
     global abort_on_error

     if {![string length $inUniPortToBWPNameSeq]} {
        return
     }

     set tmpUniPortBWPNameList [split $inUniPortToBWPNameSeq ,]

     if {![llength $tmpUniPortBWPNameList]} {
        error &quot;UNI-Port, BWP-Name Tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outBWPNameList tmpBWPNameList

     foreach currTuple $tmpUniPortBWPNameList {

        set outUniPortNum &quot;&quot;
        set outBWPName    &quot;&quot;

        validateUniPortBWPTuple $currTuple \
                                outUniPortNum \
                                outBWPName

        lappend tmpUniPortList $outUniPortNum
        lappend tmpBWPNameList $outBWPName
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple =&gt; &apos;BWP_Name:CIR_V+CIR_U+CBS_V+CBS_U+SCH_T&apos;
###########################################################################
proc validateOneRateBWParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    &quot;&quot;
        set outCOSMode    &quot;&quot;
        set outMeterName  &quot;&quot;
        set outACLName    &quot;&quot;
        set outQPNum      &quot;&quot;

        validateOneRateBWParamsTuple $currTuple \
                                     outBWPName \
                                     outCOSMode \
                                     outMeterName \
                                     outACLName \
                                     outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple =&gt; &apos;BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum&apos;
###########################################################################
proc validateTwoRateBWParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    &quot;&quot;
        set outCOSMode    &quot;&quot;
        set outMeterName  &quot;&quot;
        set outACLName    &quot;&quot;
        set outQPNum      &quot;&quot;

        validateTwoRateBWParamsTuple $currTuple \
                                     outBWPName \
                                     outCOSMode \
                                     outMeterName \
                                     outACLName \
                                     outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Objects (Meter,ACL)
##########################################################################
proc deleteOneBWPObj {inMeterName
                      inACLName} {

    if {[catch {
      delete access-list $inACLName
    } errMsgText]} {
       puts &quot;FAILED: Could not delete access-list $inACLName, $errMsgText&quot;
    }
    if {[catch {
      delete meter $inMeterName
    } errMsgText]} {
       puts &quot;FAILED: Could not delete meter $inMeterName, $errMsgText&quot;
    }

}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from one UNI Port
##########################################################################
proc deleteOneUniBWPAttachment {inUniPortNum
                                inACLName} {
  global abort_on_error
    if {[catch {
      configure access-list delete $inACLName ports $inUniPortNum ingress
     } errMsgText]} {
       puts &quot;FAILED: Could not delete $inACLName from UNI port $inUniPortNum, $errMsgText&quot;
    }
}

############################################################################
# Cleanup QoS Objects (Meter, ACL etc.) for a List of BW-Profile(s)
############################################################################
proc deleteAllBWPObjs {inBWPNameList
                       inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currBWPName $inBWPNameList {

        set currMeterName $tmpBWPNameToParamsMap($currBWPName.MeterName)
        set currACLName   $tmpBWPNameToParamsMap($currBWPName.ACLName)

        deleteOneBWPObj $currMeterName $currACLName
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from all UNI Port(s)
##########################################################################
proc deleteAllUniBWPAttachment {inUniPortList
                                inBWPNameList
                                inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)

        deleteOneUniBWPAttachment $currUniPort $currACLName
     }
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD20800
############################################################################
proc unassignAllUniBWPOnBD20800 {inUniPortList
                                 inBWPNameList
                                 inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     deleteAllUniBWPAttachment $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

     deleteAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap
}

######################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
######################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus &quot;yes&quot;]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

############################################################################
# TCL Procedure To Validate PBB Service-Type and Platform Model combination
############################################################################
proc validatePbbServiceType {inPbbType} {

    global abort_on_error

    switch $inPbbType {
       PBB_CTAG {}
       PBB_STAG {}
       PBB_PORT {}
       default {
        error &quot;FAILED: Invalid PBB Service-Type =&gt; $inPbbType&quot;
       }
    }
}

proc validatePbbTypePlatformModel {inPbbType inPlatformModel} {

    global abort_on_error

    validatePbbServiceType $inPbbType

    switch $inPlatformModel {
       MODEL_BD10K {
         if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD10K.&quot;
         }
       }
       MODEL_BD12K {
         if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD10K.&quot;
         }
       }
       MODEL_BD12804R {
         if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD12K.&quot;
         }
       }
       MODEL_BD20800 {
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

############################################################################
# TCL Procedure To Validate B-VLAN based Service Deletion Parameters
############################################################################
proc validateServiceDeleteParams {inBVLanName
                                  inSorCVLanName
                                  inUniPortSeq} {
    global abort_on_error

    IF (![expr [string length $inBVLanName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inSorCVLanName] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inUniPortSeq] &gt; 0]) THEN
       error &quot;FAILED: UNI Port List is empty.&quot;
    ENDIF
}

#############################################################
# TCL Procedure To Validate I-SID Name
#############################################################
proc validateISidName {inISidName} {

    global abort_on_error

    IF (![expr [string length $inISidName] &gt; 0]) THEN
       error &quot;FAILED: I-SID Name is empty.&quot;
    ENDIF
}

##########################################################################
# Procedure to remove all UNI-Port(s) from S/C-VLAN on the switch
##########################################################################
proc remAllUnisFromSorCVLan {inPbbType
                             inSorCVLanName
                             inUniPortSeq} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          configure cvlan $inSorCVLanName delete port $inUniPortSeq
       } else {
          configure svlan $inSorCVLanName delete port $inUniPortSeq
       }
    } errMsgText]} {
       puts &quot;FAILED: Cannot delete Ports $inUniPortSeq from S/C-VLAN, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to Delete the S/C-VLAN on the switch
###########################################################################
proc deleteSorCVLan {inPbbType
                     inSorCVLanName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       puts &quot;FAILED: Could not delete S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

##############################################################################
# Procedure to remove S/C-VLAN from I-SID and delete I-SID on BD20K Platforms
##############################################################################
proc remSorCVLanDeleteISidOnBD2XK {inPbbType
                                   inSorCVLanName
                                   inISidName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config isid $inISidName delete cvlan $inSorCVLanName
       } else {
          config isid $inISidName delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       puts &quot;FAILED: Can&apos;t remove S/C-VLAN $inSorCVLanName from I-SID $inISidName, $errMsgText&quot;
    }

    if {[catch {
       delete isid $inISidName
    } errMsgText]} {
       puts &quot;FAILED: Can&apos;t delete I-SID $inISidName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to remove the S/C-VLAN from B-VLAN on BD10K/BD12K Platforms
###########################################################################
proc remSorCVLanFromBVLanOnBD1XK {inPbbType
                                  inBVLanName
                                  inSorCVLanName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config bvlan $inBVLanName delete cvlan $inSorCVLanName
       } else {
          config bvlan $inBVLanName delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       error &quot;FAILED: Can&apos;t remove S/C-VLAN $inSorCVLanName from B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to remove I-SID from B-VLAN on BD20K Platforms
###########################################################################
proc remISidFromBVLanOnBD2XK {inBVLanName
                              inISidName} {
    global abort_on_error

    if {[catch {
       config bvlan $inBVLanName delete isid $inISidName
    } errMsgText]} {
       puts &quot;FAILED: Can&apos;t remove I-SID $inISidName from B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

############################################################################
# S-TAGGED PBB Service Deletion on BD10K/BD12K Platforms
############################################################################
# 1) Remove S/C-VLAN from B-VLAN
# 2) Remove UNI Ports from S/C-VLAN
# 3) Delete S/C-VLAN
############################################################################
proc deletePBBServiceSorCTagOnBD1XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inUniPortSeq} {
    global abort_on_error

    remSorCVLanFromBVLanOnBD1XK $inPbbType \
                                $inBVLanName \
                                $inSorCVLanName

    remAllUnisFromSorCVLan $inPbbType \
                           $inSorCVLanName \
                           $inUniPortSeq

    deleteSorCVLan $inPbbType \
                   $inSorCVLanName
}

############################################################################
# S-TAGGED PBB Service Deletion on BD20K Platforms
############################################################################
# 1) Remove I-SID from B-VLAN
# 2) Remove S/C-VLAN from I-SID and then delete I-SID
# 3) Remove UNI Ports from S/C-VLAN
# 4) Delete S/C-VLAN
############################################################################
proc deletePBBServiceSorCTagOnBD2XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inISidName
                                     inUniPortSeq} {
    global abort_on_error

    remISidFromBVLanOnBD2XK $inBVLanName $inISidName

    remSorCVLanDeleteISidOnBD2XK $inPbbType \
                                 $inSorCVLanName \
                                 $inISidName

    remAllUnisFromSorCVLan $inPbbType \
                           $inSorCVLanName \
                           $inUniPortSeq

    deleteSorCVLan $inPbbType \
                   $inSorCVLanName
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Deletion on BD1XK Platforms
############################################################################
proc runPBBServiceSorCTagDeleteOnBD1XK {inPbbType
                                        inBVLanName
                                        inSorCVLanName
                                        inUniPortSeq} {
    global abort_on_error

    validateServiceDeleteParams $inBVLanName \
                                $inSorCVLanName \
                                $inUniPortSeq

    deletePBBServiceSorCTagOnBD1XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inUniPortSeq
}

############################################################################
# TCL Procedure for PBB Service Deletion on BD2XK Platforms
############################################################################
proc runPBBServiceSorCTagDeleteOnBD2XK {inPbbType
                                        inBVLanName
                                        inSorCVLanName
                                        inISidName
                                        inUniPortSeq
                                        inUniPortList
                                        inBWPNameList
                                        inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    validateServiceDeleteParams $inBVLanName \
                                $inSorCVLanName \
                                $inUniPortSeq

    validateISidName $inISidName

    unassignAllUniBWPOnBD20800 $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

    deletePBBServiceSorCTagOnBD2XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inISidName \
                                   $inUniPortSeq
}

############################################################################
# TCL Procedure for PBB Service Deletion on UNI Ports
############################################################################
proc handlePBBServiceSorCTagDelete {inPbbType
                                    inPlatformModel
                                    inBVLanName
                                    inSorCVLanName
                                    inISidName
                                    inUniPortSeq
                                    inUniPortToBWPNameSeq
                                    inOneRateBWParamsTupleSeq
                                    inTwoRateBWParamsTupleSeq} {
    global abort_on_error
    global isExos

    if {[string match $isExos true]} {
        create log entry &quot;START-Delete PBB S/C-Tag Service&quot;
    }

    validatePbbTypePlatformModel $inPbbType \
                                 $inPlatformModel

    set outUniPortList [list]
    set outBWPNameList [list]
    set outBWPNameToParamsMap(BVLanName) $inBVLanName

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outUniPortList \
                                     outBWPNameList
    switch $inPlatformModel {
       MODEL_BD10K {
       runPBBServiceSorCTagDeleteOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inUniPortSeq
       }
       MODEL_BD12K {
       runPBBServiceSorCTagDeleteOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inUniPortSeq
       }
       MODEL_BD12804R {
       runPBBServiceSorCTagDeleteOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inUniPortSeq
       }
       MODEL_BD20800 {

       if (![expr [string length $inOneRateBWParamsTupleSeq] &gt; 0]) {
               validateTwoRateBWParamsTupleSeq $inTwoRateBWParamsTupleSeq \
                                       outBWPNameToParamsMap
       } else {
               validateOneRateBWParamsTupleSeq $inOneRateBWParamsTupleSeq \
                                       outBWPNameToParamsMap
       }

       runPBBServiceSorCTagDeleteOnBD2XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inISidName \
                                         $inUniPortSeq \
                                         $outUniPortList \
                                         $outBWPNameList \
                                         outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }

    if {[string match $isExos true]} {
        create log entry &quot;FINISH-Delete PBB S/C-Tag Service&quot;
    }
}

################################################################################
# CLI Configuration Scripts Execution STARTING
################################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

handlePBBServiceSorCTagDelete $ethServPbbType \
                              $ethServPlatformModel \
                              $ethServBVLanName \
                              $ethServSorCVLanName \
                              $ethServISidName \
                              $ethServUniPortSeq \
                              $ethServUniPortBWPNameSeq \
                              $ethServOneRateBWParamsTupleSeq \
                              $ethServTwoRateBWParamsTupleSeq

PerformSync -device $deviceIP -scope PBB</content>
  <creator>system</creator>
  <scriptOwner>system</scriptOwner>
  <contexts></contexts>
  <supprotedGroups></supprotedGroups>
  <roles>,Administrator,</roles>
  <auditLogEnabled>false</auditLogEnabled>
  <saveConfigOnExit>true</saveConfigOnExit>
  <menuScope>TOOLS</menuScope>
  <scriptTimeout>120</scriptTimeout>
</script>
