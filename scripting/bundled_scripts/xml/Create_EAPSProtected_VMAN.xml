<!-- This file is generated by system. Do not edit this file. -->
<script name="Create_EAPSProtected_VMAN">
<comments>This scripts creates VMANs and adds to EAPS domains as protected</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : VMAN creation and protection via EAPS domain
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create VMAN
# 2.  Assign the VMAN to a QoS Profile
# 3.  Add the VMAN to a EAPS domain
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Creates VMANs and adds to EAPS domains as protected&quot;
# @SectionStart (description = &quot;Protected VMAN Create Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

#############################################################################
# VMAN Protection Parameters definitions
#############################################################################

# @VariableFieldLabel (description = &quot;Comma Listed VMAN_Name+VMAN_Tag+VMAN_QP&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtVManNameTagQPSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ad VMAN EtherType&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtVManEtherType &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed Protecting Ring Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtRingPortSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd

################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# TCL Procedure for VMAN Protection Parameter Validation
############################################################################
proc validateVManProtectParams {inVManNameTagQPSeq
                                inDomainNameSeq
                                inProtectPortSeq} {
    global abort_on_error
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF

    IF (![expr [string length $inVManNameTagQPSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name Tag QP List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inProtectPortSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Protect Port List is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 3-Tuple of the form 'VMAN-Name+Tag+QP-Num'
################################################################################
proc validateVManNameTagQPTuple {inNameTagQP
                                 outVManName
                                 outVManTag
                                 outVManQP} {
     global abort_on_error

     upvar $outVManName tmpVManName
     upvar $outVManTag  tmpVManTag
     upvar $outVManQP   tmpVManQP

     set tmpNameTagQPList [split $inNameTagQP '+']

     if {[llength $tmpNameTagQPList] != 3} {
         error &quot;Invalid VMAN-Name,Tag,QP-Num Tuple=>$inNameTagQP&quot;
     }
     set tmpVManName [lindex $tmpNameTagQPList 0]
     set tmpVManTag  [lindex $tmpNameTagQPList 1]
     set tmpVManQP   [lindex $tmpNameTagQPList 2]
}

################################################################################
# Procedure to Validate List of 3-Tuples of the form 'VMAN-Name+Tag+QP-Num'
################################################################################
proc validateVManNameTagQPTupleSeq {inNameTagQPSeq
                                    outVManNameList
                                    outVManTagList
                                    outVManQPList} {
     global abort_on_error

     set tmpNameTagQPList [split $inNameTagQPSeq ,]

     if {[llength $tmpNameTagQPList] == 0} {
        error &quot;FAILED: VMAN-Name, Tag, QP Tuple List is empty.&quot;
     }

     upvar $outVManNameList tmpVManNameList
     upvar $outVManTagList  tmpVManTagList
     upvar $outVManQPList   tmpVManQPList

     foreach currTuple $tmpNameTagQPList {

        set outVManName ""
        set outVManTag  ""
        set outVManQP   ""

        validateVManNameTagQPTuple $currTuple \
                                   outVManName \
                                   outVManTag \
                                   outVManQP

        lappend tmpVManNameList $outVManName
        lappend tmpVManTagList  $outVManTag
        lappend tmpVManQPList   $outVManQP
     }
}

###########################################################################
# Procedure to Clean-up a List of VMANs on the switch
###########################################################################
proc cleanUpVManList {inVManNameList} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       delete vman $currVManName
    }
}

##########################################################################
# Procedure to Create one 802.1ad VMAN and add to Protect-Port List
##########################################################################
proc createOneVManAddPorts {inVManName
                            inVManTag
                            inVManQPNum
                            inProtectPortList
                            inVManEtherType} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       create vman $inVManName
    } errMsgText]} {
       error &quot;FAILED: Could not create VMAN $inVManName, $errMsgText&quot;
    }

    if {[catch {
       config vman $inVManName tag $inVManTag
    } errMsgText]} {
       delete vman $inVManName
       error &quot;FAILED: Invalid Tag $inVManTag for VMAN $inVManName, $errMsgText&quot;
    }

    ## if {[catch {
    ##   config vman $inVManName qosprofile qp$inVManQPNum
    ## } errMsgText]} {
    ##   delete vman $inVManName
    ##   error &quot;FAILED: Invalid QoS-Profile for VMAN $inVManName, $errMsgText&quot;
    ## }

    if {[catch {
       config vman ethertype $inVManEtherType
    } errMsgText]} {
       delete vman $inVManName
       error &quot;FAILED: Invalid Ether-Type for VMAN $inVManName, $errMsgText&quot;
    }

    if {[catch {
       config vman $inVManName add ports $inProtectPortList tagged
       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI $permitRingPortsAsUni
       ENDIF

    } errMsgText]} {
       delete vman $inVManName
       error &quot;FAILED: Could not add Ports $inProtectPortList to VMAN $inVManName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Create all 802.1ad VMANs and add to Protect-Port List
##########################################################################
proc createAllVMansAddPorts {inVManNameList
                             inVManTagList
                             inVManQPList
                             inProtectPortList
                             inVManEtherType} {
    global abort_on_error

    set finishedVManNameList [list]

    foreach currVManName  $inVManNameList \
            currVManTag   $inVManTagList \
            currVManQPNum $inVManQPList {

        if {[catch {
           createOneVManAddPorts $currVManName \
                                 $currVManTag \
                                 $currVManQPNum \
                                 $inProtectPortList \
                                 $inVManEtherType
                                 
        } errMsgText]} {
           cleanUpVManList $finishedVManNameList
           error &quot;FAILED: Could not add Ports $inProtectPortList to VMAN $currVManName, $errMsgText&quot;
        }

        lappend finishedVManNameList $currVManName
    }
}

####################################################################
# Procedure to protect one 802.1ad VMAN by one EAPS Domain
####################################################################
proc protectOneVManByOneDomain {inVManName
                                inDomainName} {
   global abort_on_error

   if {[catch {
      config eaps $inDomainName add protect $inVManName
   } errMsgText]} {
      error &quot;FAILED: EAPS-Domain $inDomainName cannot protect VMAN $inVManName, $errMsgText&quot;
   }
}

####################################################################
# Procedure to Protect one 802.1ad VMAN by all EAPS Domain(s)
####################################################################
proc protectOneVManByAllDomains {inVManName
                                 inDomainNameSeq} {

   global abort_on_error

   set tmpDomainNameList [split $inDomainNameSeq ,]

   foreach currDomainName $tmpDomainNameList {

       protectOneVManByOneDomain $inVManName \
                                 $currDomainName
   }
}

####################################################################
# Procedure to Protect all 802.1ad VMANs by all EAPS Domain(s)
####################################################################
proc protectAllVMansByAllDomains {inVManNameList
                                  inDomainNameSeq} {

    global abort_on_error

    foreach currVManName $inVManNameList {

        if {[catch {
           protectOneVManByAllDomains $currVManName \
                                      $inDomainNameSeq
        } errMsgText]} {
           cleanUpVManList $inVManNameList
           error &quot;FAILED: VMAN Protection, $errMsgText&quot;
        }
    }
}

##################################################################
# TCL Procedure for VMAN creation and protection by EAPS Domain
# after validating all parameters
##################################################################
proc handleProtectedVManCreate {inVManNameTagQPSeq
                                inDomainNameSeq
                                inProtectPortSeq
                                inVManEtherType} {
    global abort_on_error
	global isExos

	if {[string match $isExos true]} {
    	create log entry &quot;Starting VMAN protection via EAPS on Switch&quot;
   	}

    validateVManProtectParams $inVManNameTagQPSeq \
                              $inDomainNameSeq \
                              $inProtectPortSeq

    set outVManNameList [list]
    set outVManTagList  [list]
    set outVManQPList   [list]

    validateVManNameTagQPTupleSeq $inVManNameTagQPSeq \
                                  outVManNameList \
                                  outVManTagList \
                                  outVManQPList

    createAllVMansAddPorts $outVManNameList \
                           $outVManTagList \
                           $outVManQPList \
                           $inProtectPortSeq \
                           $inVManEtherType

    protectAllVMansByAllDomains $outVManNameList \
                                $inDomainNameSeq

	if {[string match $isExos true]} {
    	create log entry &quot;Finished VMAN protection via EAPS on Switch&quot;
   	}
}

############################################################################
# CLI Configuration Starting
############################################################################
setCliErrorHandling $abortOnCliError

handleProtectedVManCreate $eapsProtVManNameTagQPSeq \
                          $eapsProtDomainNameSeq \
                          $eapsProtRingPortSeq \
                          $eapsProtVManEtherType
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_CRE_EAPSProtected_VMAN</rollbackScript>
<postprocessScript>Sync_CRE_EAPSProtected_VMAN</postprocessScript>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
