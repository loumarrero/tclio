<!-- This file is generated by system. Do not edit this file. -->
<script name="Create_PB_BW_Profile">
<comments>This script Creates Bandwidth Profile for PB Service</comments>
<content>#@METADATASTART
#@DetailDescriptionStart

#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Create a PB Service specific Bandwidth Profile
#############################################################################
# Revision      : 1.0
# Last Updated  : 01-FEB-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:  This script creates a Bandwidth Profile
#############################################################################
#@DetailDescriptionEnd
#############################################################################
# @ScriptDescription &quot;Creates Bandwidth Profile for a PB Service&quot;
# @MetaDataEnd
#############################################################################

############################################################################
# TCL Procedure To Validate Bandwidth-Profile One-Rate Create Parameters
############################################################################
proc validateBWProfOneRateCreateParams {inMeterName
                                        inCIRValue
                                        inCIRUnit
                                        inCBSValue
                                        inCBSUnit} {
    global abort_on_error

    IF (![expr [string length $inMeterName] &gt; 0]) THEN
       error &quot;FAILED: Meter Name is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inCIRValue] &gt; 0]) THEN
       error &quot;FAILED: CIR value is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inCIRUnit] &gt; 0]) THEN
       error &quot;FAILED: CIR unit is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inCBSValue] &gt; 0]) THEN
       error &quot;FAILED: CBS value is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inCBSUnit] &gt; 0]) THEN
       error &quot;FAILED: CBS unit is empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure To Validate Bandwidth-Profile Two-Rate Create Parameters
############################################################################
proc validateBWProfTwoRateCreateParams {inEIRValue
                                        inEIRUnit
                                        inEBSValue
                                        inEBSUnit} {
    global abort_on_error

    IF (![expr [string length $inEIRValue] &gt; 0]) THEN
       error &quot;FAILED: EIR value is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inEIRUnit] &gt; 0]) THEN
       error &quot;FAILED: EIR unit is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inEBSValue] &gt; 0]) THEN
       error &quot;FAILED: EBS value is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inEBSUnit] &gt; 0]) THEN
       error &quot;FAILED: EBS unit is empty.&quot;
    ENDIF
}

###########################################################################
# Procedure to validate Bandwidth Lower-Limit Units
###########################################################################
proc validateBWLowerLimitUnits {inCIRUnit
                                inCBSUnit
                                outSwCIRUnit
                                outSwCBSUnit} {
    global abort_on_error
    upvar  $outSwCIRUnit tmpSwCIRUnit
    upvar  $outSwCBSUnit tmpSwCBSUnit

    switch $inCIRUnit {
       CIRU_KBPS {set tmpSwCIRUnit "Kbps"}
       CIRU_MBPS {set tmpSwCIRUnit "Mbps"}
       CIRU_GBPS {set tmpSwCIRUnit "Gbps"}
       default {
        error &quot;FAILED: CIR Unit-Type => $inCIRUnit&quot;
       }
    }
    switch $inCBSUnit {
       CBSU_KBPS {set tmpSwCBSUnit "Kb"}
       CBSU_MBPS {set tmpSwCBSUnit "Mb"}
       CBSU_GBPS {set tmpSwCBSUnit "Gb"}
       default {
        error &quot;FAILED: CBS Unit-Type => $inCBSUnit&quot;
       }
    }
}

###########################################################################
# Procedure to validate Bandwidth Upper-Limit Units
###########################################################################
proc validateBWUpperLimitUnits {inEIRUnit
                                inEBSUnit
                                outSwEIRUnit
                                outSwEBSUnit} {
    global abort_on_error
    upvar  $outSwEIRUnit tmpSwEIRUnit
    upvar  $outSwEBSUnit tmpSwEBSUnit

    switch $inEIRUnit {
       EIRU_KBPS {set tmpSwEIRUnit "Kbps"}
       EIRU_MBPS {set tmpSwEIRUnit "Mbps"}
       EIRU_GBPS {set tmpSwEIRUnit "Gbps"}
       default {
        error &quot;FAILED: EIR Unit-Type => $inEIRUnit&quot;
       }
    }
    switch $inEBSUnit {
       EBSU_KBPS {set tmpSwEBSUnit "Kb"}
       EBSU_MBPS {set tmpSwEBSUnit "Mb"}
       EBSU_GBPS {set tmpSwEBSUnit "Gb"}
       default {
        error &quot;FAILED: EBS Unit-Type => $inEBSUnit&quot;
       }
    }
}

######################################################################
# Procedure to Validate Out-Of-Profile Action types for Platforms
# BD8800, SummitStack and Summit-Family
######################################################################
proc validateOOPActionOnBD88KSSSF {inOOPAction
                                   outSwOOPAction} {
    global abort_on_error
    upvar  $outSwOOPAction tmpSwOOPAction

    switch $inOOPAction {
       OOPACT_DROP          {set tmpSwOOPAction "drop"}
       OOPACT_SET_DROP_PRCD {set tmpSwOOPAction "set-drop-precedence"}
       default {
        error &quot;FAILED: Invalid Out-Of-Profile Action => $inOOPAction&quot;
       }
    }
}

###########################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI_Port+BWP_Name'
###########################################################################
proc validateUniPortBWPTuple {inUniPortBWPName
                              outUniPortNum
                              outBWPName} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outBWPName    tmpBWPName

     set tmpUniBWPList [split $inUniPortBWPName '+']

     if {[llength $tmpUniBWPList] != 2} {
         error &quot;Invalid UNI-Port, BWP-Name Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniBWPList 0]
     set tmpBWPName    [lindex $tmpUniBWPList 1]
}

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple => 'BWP_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T'
###########################################################################
proc validateBWPNameParamsTuple {inBWPNameParamsTuple
                                 outBWPName
                                 outMeterName
                                 outCIRValue
                                 outCIRUnit
                                 outCBSValue
                                 outCBSUnit
                                 outEIRValue
                                 outEIRUnit
                                 outEBSValue
                                 outEBSUnit
                                 outSchedType
                                 outLowPriACLName
                                 outMedPriACLName
                                 outHigPriACLName
                                 outLowPriCCoSNum
                                 outMedPriCCoSNum
                                 outHigPriCCoSNum
                                 outTrafficQueueName
                                 outLowPriQPNum
                                 outMedPriQPNum
                                 outHigPriQPNum} {
     global abort_on_error

     upvar $outBWPName          tmpBWPName
     upvar $outMeterName        tmpMeterName
     upvar $outCIRValue         tmpCIRValue
     upvar $outCIRUnit          tmpCIRUnit
     upvar $outCBSValue         tmpCBSValue
     upvar $outCBSUnit          tmpCBSUnit
     upvar $outEIRValue         tmpEIRValue
     upvar $outEIRUnit          tmpEIRUnit
     upvar $outEBSValue         tmpEBSValue
     upvar $outEBSUnit          tmpEBSUnit
     upvar $outSchedType        tmpSchedType
     upvar $outLowPriACLName    tmpLowPriACLName
     upvar $outMedPriACLName    tmpMedPriACLName
     upvar $outHigPriACLName    tmpHigPriACLName
     upvar $outLowPriCCoSNum    tmpLowPriCCoSNum
     upvar $outMedPriCCoSNum    tmpMedPriCCoSNum
     upvar $outHigPriCCoSNum    tmpHigPriCCoSNum
     upvar $outTrafficQueueName tmpTrafficQueueName
     upvar $outLowPriQPNum      tmpLowPriQPNum
     upvar $outMedPriQPNum      tmpMedPriQPNum
     upvar $outHigPriQPNum      tmpHigPriQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $inBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 20} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpMeterName        [lindex $tmpBWPAttrList 0]
     set tmpCIRValue         [lindex $tmpBWPAttrList 1]
     set tmpCIRUnit          [lindex $tmpBWPAttrList 2]
     set tmpCBSValue         [lindex $tmpBWPAttrList 3]
     set tmpCBSUnit          [lindex $tmpBWPAttrList 4]
     set tmpEIRValue         [lindex $tmpBWPAttrList 5]
     set tmpEIRUnit          [lindex $tmpBWPAttrList 6]
     set tmpEBSValue         [lindex $tmpBWPAttrList 7]
     set tmpEBSUnit          [lindex $tmpBWPAttrList 8]
     set tmpSchedType        [lindex $tmpBWPAttrList 9]
     set tmpLowPriACLName    [lindex $tmpBWPAttrList 10]
     set tmpMedPriACLName    [lindex $tmpBWPAttrList 11]
     set tmpHigPriACLName    [lindex $tmpBWPAttrList 12]
     set tmpLowPriCCoSNum    [lindex $tmpBWPAttrList 13]
     set tmpMedPriCCoSNum    [lindex $tmpBWPAttrList 14]
     set tmpHigPriCCoSNum    [lindex $tmpBWPAttrList 15]
     set tmpTrafficQueueName [lindex $tmpBWPAttrList 16]
     set tmpLowPriQPNum      [lindex $tmpBWPAttrList 17]
     set tmpMedPriQPNum      [lindex $tmpBWPAttrList 18]
     set tmpHigPriQPNum      [lindex $tmpBWPAttrList 19]

     set cnvSwCIRUnit   ""
     set cnvSwCBSUnit   ""
     set cnvSwEIRUnit   ""
     set cnvSwEBSUnit   ""
     set cnvSwOOPAction ""
 
     validateBWProfOneRateCreateParams $tmpMeterName \
                                       $tmpCIRValue \
                                       $tmpCIRUnit \
                                       $tmpCBSValue \
                                       $tmpCBSUnit
 
     validateBWLowerLimitUnits $tmpCIRUnit \
                               $tmpCBSUnit \
                               cnvSwCIRUnit \
                               cnvSwCBSUnit
 
     validateOOPActionOnBD88KSSSF $tmpOOPAction \
                                  cnvSwOOPAction

     validateBWProfTwoRateCreateParams $tmpEIRValue \
                                       $tmpEIRUnit \
                                       $tmpEBSValue \
                                       $tmpEBSUnit

     validateBWUpperLimitUnits $tmpEIRUnit \
                               $tmpEBSUnit \
                               cnvSwEIRUnit \
                               cnvSwEBSUnit

     set tmpCIRUnit   $cnvSwCIRUnit
     set tmpCBSUnit   $cnvSwCBSUnit
     set tmpEIRUnit   $cnvSwEIRUnit
     set tmpEBSUnit   $cnvSwEBSUnit
     set tmpSchedType $cnvSwOOPAction
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form 'UNI_Port+BWP_Name'
#############################################################################
proc validateUniPortToBWPNameTupleSeq {inUniPortToBWPNameSeq
                                       outUniPortList
                                       outBWPNameList} {
     global abort_on_error

     if {![expr [string length $inUniPortToBWPNameSeq] &gt; 0]} {
        return
     }

     set tmpUniPortBWPNameList [split $inUniPortToBWPNameSeq ,]

     if {![expr [llength $tmpUniPortBWPNameList] &gt; 0]} {
        error &quot;UNI-Port, BWP-Name Tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outBWPNameList tmpBWPNameList

     foreach currTuple $tmpUniPortBWPNameList {

        set outUniPortNum ""
        set outBWPName    ""

        validateUniPortBWPTuple $currTuple \
                                outUniPortNum \
                                outBWPName

        lappend tmpUniPortList $outUniPortNum
        lappend tmpBWPNameList $outBWPName
     }
}

###########################################################################
# Procedure to Validate Comma Listed 10-Tuple(s) of the form
# Tuple => 'BWP_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T'
###########################################################################
proc validateBWPNameToParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![expr [string length $inBWPNameToParamsSeq] &gt; 0]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![expr [llength $tmpBWPNameParamsList] &gt; 0]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName          ""
        set outMeterName        ""
        set outCIRValue         ""
        set outCIRUnit          ""
        set outCBSValue         ""
        set outCBSUnit          ""
        set outEIRValue         ""
        set outEIRUnit          ""
        set outEBSValue         ""
        set outEBSUnit          ""
        set outSchedType        ""
        set outLowPriACLName    ""
        set outMedPriACLName    ""
        set outHigPriACLName    ""
        set outLowPriCCoSNum    ""
        set outMedPriCCoSNum    ""
        set outHigPriCCoSNum    ""
        set outTrafficQueueName ""
        set outLowPriQPNum      ""
        set outMedPriQPNum      ""
        set outHigPriQPNum      ""

        validateBWPNameParamsTuple $currTuple \
                                   outBWPName \
                                   outMeterName \
                                   outCIRValue \
                                   outCIRUnit \
                                   outCBSValue \
                                   outCBSUnit \
                                   outEIRValue \
                                   outEIRUnit \
                                   outEBSValue \
                                   outEBSUnit \
                                   outSchedType \
                                   outLowPriACLName \
                                   outMedPriACLName \
                                   outHigPriACLName \
                                   outLowPriCCoSNum \
                                   outMedPriCCoSNum \
                                   outHigPriCCoSNum \
                                   outTrafficQueueName \
                                   outLowPriQPNum \
                                   outMedPriQPNum \
                                   outHigPriQPNum

        set tmpBWPNameParamsMap($outBWPName.MeterName)        $outMeterName
        set tmpBWPNameParamsMap($outBWPName.CIRValue)         $outCIRValue
        set tmpBWPNameParamsMap($outBWPName.CIRUnit)          $outCIRUnit
        set tmpBWPNameParamsMap($outBWPName.CBSValue)         $outCBSValue
        set tmpBWPNameParamsMap($outBWPName.CBSUnit)          $outCBSUnit
        set tmpBWPNameParamsMap($outBWPName.EIRValue)         $outEIRValue
        set tmpBWPNameParamsMap($outBWPName.EIRUnit)          $outEIRUnit
        set tmpBWPNameParamsMap($outBWPName.EBSValue)         $outEBSValue
        set tmpBWPNameParamsMap($outBWPName.EBSUnit)          $outEBSUnit
        set tmpBWPNameParamsMap($outBWPName.SchedType)        $outSchedType
        set tmpBWPNameParamsMap($outBWPName.LowPriACLName)    $outLowPriACLName
        set tmpBWPNameParamsMap($outBWPName.MedPriACLName)    $outMedPriACLName
        set tmpBWPNameParamsMap($outBWPName.HigPriACLName)    $outHigPriACLName
        set tmpBWPNameParamsMap($outBWPName.LowPriCCoSNum)    $outLowPriCCoSNum
        set tmpBWPNameParamsMap($outBWPName.MedPriCCoSNum)    $outMedPriCCoSNum
        set tmpBWPNameParamsMap($outBWPName.HigPriCCoSNum)    $outHigPriCCoSNum
        set tmpBWPNameParamsMap($outBWPName.TrafficQueueName) $outTrafficQueueName
        set tmpBWPNameParamsMap($outBWPName.LowPriQPNum)      $outLowPriQPNum
        set tmpBWPNameParamsMap($outBWPName.MedPriQPNum)      $outMedPriQPNum
        set tmpBWPNameParamsMap($outBWPName.HigPriQPNum)      $outHigPriQPNum
     }
}

######################################################################
# Procedure to Create the Meter on the Switch
######################################################################
proc createMeter {inMeterName} {

    global abort_on_error

    if {[catch {
       create meter $inMeterName
    } errMsgText]} {
       error &quot;FAILED: Could not create Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD8800/SummitStack/SummitFamily
###########################################################################
proc setMeterParamsOnBD88KSSSF {inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inOOPAction} {
    global abort_on_error

    if {[catch {
       config meter $inMeterName max-burst-size $inCBSValue $inCBSUnit committed-rate $inCIRValue $inCIRUnit out-actions $inOOPAction
    } errMsgText]} {
      delete meter $inMeterName
      error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD12804R
###########################################################################
proc setMeterParamsOnBD12804R {inMeterName
                               inCIRValue
                               inCIRUnit
                               inCBSValue
                               inCBSUnit} {
    global abort_on_error

    if {[catch {
       config meter $inMeterName max-burst-size $inCBSValue $inCBSUnit committed-rate $inCIRValue $inCIRUnit
    } errMsgText]} {
      delete meter $inMeterName
      error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD20K
###########################################################################
proc setMeterParamsOnBD20800 {inMeterName
                            inCIRValue
                            inCIRUnit
                            inCBSValue
                            inCBSUnit
                            inEIRValue
                            inEIRUnit
                            inEBSValue
                            inEBSUnit} {
    global abort_on_error

    if {[catch {
       set tmpCIRArg "committed-rate $inCIRValue $inCIRUnit"
       set tmpCBSArg "committed-burst-size $inCBSValue $inCBSUnit"
       set tmpEIRArg "peak-rate $inEIRValue $inEIRUnit"
       set tmpEBSArg "peak-burst-size $inEBSValue $inEBSUnit"
       config meter $inMeterName $tmpCIRArg $tmpCBSArg $tmpEIRArg $tmpEBSArg
    } errMsgText]} {
      delete meter $inMeterName
      error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

######################################################################
# Procedure to Create the Traffic Queue on BD12804R Platform
######################################################################
proc createSPMTrafficQueueOnBD12804R {inTrafficQueueName} {

    global abort_on_error

    if {[catch {
       create traffic queue $inTrafficQueueName ingress-only strict-priority
    } errMsgText]} {
       error &quot;FAILED: Could not create Traffic-Queue $inTrafficQueueName, $errMsgText&quot;
    }
}

######################################################################
# Procedure to Create the Traffic Queue on BD20800 Platform
######################################################################
proc createSPMTrafficQueueOnBD20800 {inTrafficQueueName} {

    global abort_on_error

    if {[catch {
       create traffic queue $inTrafficQueueName strict-priority
    } errMsgText]} {
       error &quot;FAILED: Could not create Traffic-Queue $inTrafficQueueName, $errMsgText&quot;
    }
}

######################################################################
# Procedure to attach Traffic Queue Params on BD12804R
######################################################################
proc setSPMTrafficQueueParamsOnBD12804R {inTrafficQueueName
                                         inMeterName} {
    global abort_on_error

    if {[catch {
       config traffic queue $inTrafficQueueName aggregate-meter $inMeterName
    } errMsgText]} {
      delete traffic queue $inTrafficQueueName
      error &quot;FAILED: Can't set Meter to Traffic-Queue $inTrafficQueueName, $errMsgText&quot;
    }
}

######################################################################
# Procedure to attach Traffic Queue Params on BD20800
######################################################################
proc setSPMTrafficQueueParamsOnBD20800 {inTrafficQueueName
                                        inMeterName} {
    global abort_on_error

    if {[catch {
       config traffic queue $inTrafficQueueName aggregate-meter $inMeterName
    } errMsgText]} {
      delete traffic queue $inTrafficQueueName
      error &quot;FAILED: Can't set Meter to Traffic-Queue $inTrafficQueueName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Create ACL Policy to Classify one Priority ingress Traffic
##########################################################################
proc createSPMOnePriTraffClsfrACL {inVManId
                                   inACLName
                                   inCCoSNum
                                   inTrafficQueueName
                                   inQPNum} {
    global abort_on_error

    set aclMatchCond  "svid $inVManId;ccos $inCCoSNum"
    set aclRuleAction "permit;traffic-queue $inTrafficQueueName;qosprofile qp$inQPNum"

    if {[catch {
       create access-list $inACLName $aclMatchCond $aclRuleAction
    } errMsgText]} {
       error &quot;FAILED: Could not create ACL $inACLName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Create ACL Policy to Classify all Priority ingress Traffic
##########################################################################
proc createSPMAllPriTraffClsfrACL {inVManId
                                   inLowPriACLName
                                   inMedPriACLName
                                   inHigPriACLName
                                   inLowPriCCoSNum
                                   inMedPriCCoSNum
                                   inHigPriCCoSNum
                                   inTrafficQueueName
                                   inLowPriQPNum
                                   inMedPriQPNum
                                   inHigPriQPNum} {

    createSPMOnePriTraffClsfrACL $inVManId \
                                 $inLowPriACLName \
                                 $inLowPriCCoSNum \
                                 $inTrafficQueueName \
                                 $inLowPriQPNum

    createSPMOnePriTraffClsfrACL $inVManId \
                                 $inMedPriACLName \
                                 $inMedPriCCoSNum \
                                 $inTrafficQueueName \
                                 $inMedPriQPNum

    createSPMOnePriTraffClsfrACL $inVManId \
                                 $inHigPriACLName \
                                 $inHigPriCCoSNum \
                                 $inTrafficQueueName \
                                 $inHigPriQPNum
}

############################################################################
# Bandwidth Profile Creation on BD8800, SummitStack and Summit-Familiy
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
proc createOneBWPObjsOnBD88KSSSF {inMeterName
                                  inCIRValue
                                  inCIRUnit
                                  inCBSValue
                                  inCBSUnit
                                  inOOPAction} {
    global abort_on_error

    createMeter $inMeterName

    setMeterParamsOnBD88KSSSF $inMeterName \
                              $inCIRValue \
                              $inCIRUnit \
                              $inCBSValue \
                              $inCBSUnit \
                              $inOOPAction
}

############################################################################
# Bandwidth Profile Creation on BD12804R
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
# 3) Create Traffic Queue
# 4) Configure Traffic Queue with Meter
############################################################################
############################################################################
proc createOneBWPObjsOnBD12804R {inVManId
                                 inMeterName
                                 inCIRValue
                                 inCIRUnit
                                 inCBSValue
                                 inCBSUnit
                                 inLowPriACLName
                                 inMedPriACLName
                                 inHigPriACLName
                                 inLowPriCCoSNum
                                 inMedPriCCoSNum
                                 inHigPriCCoSNum
                                 inTrafficQueueName
                                 inLowPriQPNum
                                 inMedPriQPNum
                                 inHigPriQPNum} {
    global abort_on_error

    createMeter $inMeterName

    setMeterParamsOnBD12804R $inMeterName \
                             $inCIRValue \
                             $inCIRUnit \
                             $inCBSValue \
                             $inCBSUnit

    createSPMTrafficQueueOnBD12804 $inTrafficQueueName

    setSPMTrafficQueueParamsOnBD12804R $inTrafficQueueName \
                                       $inMeterName

    createSPMAllPriTraffClsfrACL $inVManId \
                                 $inLowPriACLName \
                                 $inMedPriACLName \
                                 $inHigPriACLName \
                                 $inLowPriCCoSNum \
                                 $inMedPriCCoSNum \
                                 $inHigPriCCoSNum \
                                 $inTrafficQueueName \
                                 $inLowPriQPNum \
                                 $inMedPriQPNum \
                                 $inHigPriQPNum
}

############################################################################
# Bandwidth Profile Creation on BD20K
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR/CBS, EIR/EBS etc.)
############################################################################
proc createOneBWPObjsOnBD20800 {inMeterName
                              inCIRValue
                              inCIRUnit
                              inCBSValue
                              inCBSUnit
                              inEIRValue
                              inEIRUnit
                              inEBSValue
                              inEBSUnit} {
    global abort_on_error

    createMeter $inMeterName

    setMeterParamsOnBD20800 $inMeterName \
                          $inCIRValue \
                          $inCIRUnit \
                          $inCBSValue \
                          $inCBSUnit \
                          $inEIRValue \
                          $inEIRUnit \
                          $inEBSValue \
                          $inEBSUnit
}

############################################################################
# Bandwidth Profile Creation on BD20800
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
# 3) Create Traffic Queue
# 4) Configure Traffic Queue with Meter
############################################################################
############################################################################
proc createOneBWPObjsOnBD20800 {inVManId
                                inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inLowPriACLName
                                inMedPriACLName
                                inHigPriACLName
                                inLowPriCCoSNum
                                inMedPriCCoSNum
                                inHigPriCCoSNum
                                inTrafficQueueName
                                inLowPriQPNum
                                inMedPriQPNum
                                inHigPriQPNum} {
    global abort_on_error

    createMeter $inMeterName

    setMeterParamsOnBD20800 $inMeterName \
                            $inCIRValue \
                            $inCIRUnit \
                            $inCBSValue \
                            $inCBSUnit \
                            $inEIRValue \
                            $inEIRUnit \
                            $inEBSValue \
                            $inEBSUnit

    createSPMTrafficQueueOnBD20800 $inTrafficQueueName

    setSPMTrafficQueueParamsOnBD20800 $inTrafficQueueName \
                                      $inMeterName

    createSPMAllPriTraffClsfrACL $inVManId \
                                 $inLowPriACLName \
                                 $inMedPriACLName \
                                 $inHigPriACLName \
                                 $inLowPriCCoSNum \
                                 $inMedPriCCoSNum \
                                 $inHigPriCCoSNum \
                                 $inTrafficQueueName \
                                 $inLowPriQPNum \
                                 $inMedPriQPNum \
                                 $inHigPriQPNum
}

############################################################################
# Bandwidth Profile attachment on BD8800, SummitStack and Summit-Familiy
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
proc attachOneUniBWPOnBD88KSSSF {inUniPortNum
                                 inMeterName
                                 inCIRValue
                                 inCIRUnit
                                 inCBSValue
                                 inCBSUnit
                                 inOOPAction} {
    global abort_on_error

    createMeter $inMeterName

    setMeterParamsOnBD88KSSSF $inMeterName \
                              $inCIRValue \
                              $inCIRUnit \
                              $inCBSValue \
                              $inCBSUnit \
                              $inOOPAction
}

############################################################################
# Bandwidth Profile attachment on BD12804R
############################################################################
# 1) Configure all priority ACLs on a UNI-Port
############################################################################
proc attachOneUniBWPOnBD12804R {inUniPortNum
                                inLowPriACLName
                                inMedPriACLName
                                inHigPriACLName} {
    global abort_on_error

    if {[catch {
       configure access-list add $inHigPriACLName first ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not attach HIG-ACL $inHigPriACLName, $errMsgText&quot;
    }

    if {[catch {
       configure access-list add $inMedPriACLName after $inHigPriACLName ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not attach MED-ACL $inMedPriACLName, $errMsgText&quot;
    }

    if {[catch {
       configure access-list add $inLowPriACLName after $inMedPriACLName ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not attach LOW-ACL $inLowPriACLName, $errMsgText&quot;
    }
}

############################################################################
# Bandwidth Profile attachment on BD20800
############################################################################
# 1) Configure all priority ACLs on a UNI-Port
############################################################################
proc attachOneUniBWPOnBD20800 {inUniPortNum
                               inLowPriACLName
                               inMedPriACLName
                               inHigPriACLName} {
    global abort_on_error

    if {[catch {
       configure access-list add $inHigPriACLName first ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not attach HIG-ACL $inHigPriACLName, $errMsgText&quot;
    }

    if {[catch {
       configure access-list add $inMedPriACLName after $inHigPriACLName ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not attach MED-ACL $inMedPriACLName, $errMsgText&quot;
    }

    if {[catch {
       configure access-list add $inLowPriACLName after $inMedPriACLName ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not attach LOW-ACL $inLowPriACLName, $errMsgText&quot;
    }
}

############################################################################
# All Bandwidth Profile Creation on BD8800, SummitStack and Summit-Familiy
############################################################################
proc createAllBWPObjsOnBD88KSSSF {inBWPNameList
                                  inBWPNameParamsMap} {

     foreach currBWPName $inBWPNameList {

        createOneBWPObjsOnBD88KSSSF \
              $inBWPNameParamsMap($currBWPName.MeterName) \
              $inBWPNameParamsMap($currBWPName.CIRValue) \
              $inBWPNameParamsMap($currBWPName.CIRUnit) \
              $inBWPNameParamsMap($currBWPName.CBSValue) \
              $inBWPNameParamsMap($currBWPName.CBSUnit) \
              $inBWPNameParamsMap($currBWPName.OOPAction)
     }
}

############################################################################
# All Bandwidth Profile Creation on BD12804R
############################################################################
proc createAllBWPObjsOnBD12804R {inVManId
                                 inBWPNameList
                                 inBWPNameParamsMap} {

     foreach currBWPName $inBWPNameList {

        createOneBWPObjsOnBD12804R \
              inVManId \
              $inBWPNameParamsMap($currBWPName.MeterName) \
              $inBWPNameParamsMap($currBWPName.CIRValue) \
              $inBWPNameParamsMap($currBWPName.CIRUnit) \
              $inBWPNameParamsMap($currBWPName.CBSValue) \
              $inBWPNameParamsMap($currBWPName.CBSUnit) \
              $inBWPNameParamsMap($currBWPName.LowPriACLName) \
              $inBWPNameParamsMap($currBWPName.MedPriACLName) \
              $inBWPNameParamsMap($currBWPName.HigPriACLName) \
              $inBWPNameParamsMap($currBWPName.LowPriCCoSNum) \
              $inBWPNameParamsMap($currBWPName.MedPriCCoSNum) \
              $inBWPNameParamsMap($currBWPName.HigPriCCoSNum) \
              $inBWPNameParamsMap($currBWPName.TrafficQueueName) \
              $inBWPNameParamsMap($currBWPName.LowPriQPNum) \
              $inBWPNameParamsMap($currBWPName.MedPriQPNum) \
              $inBWPNameParamsMap($currBWPName.HigPriQPNum)
     }
}

############################################################################
# All Bandwidth Profile Creation on BD20800
############################################################################
proc createAllBWPObjsOnBD20800 {inVManId
                                inBWPNameList
                                inBWPNameParamsMap} {

     foreach currBWPName $inBWPNameList {

        createOneBWPObjsOnBD20800 \
              inVManId \
              $inBWPNameParamsMap($currBWPName.MeterName) \
              $inBWPNameParamsMap($currBWPName.CIRValue) \
              $inBWPNameParamsMap($currBWPName.CIRUnit) \
              $inBWPNameParamsMap($currBWPName.CBSValue) \
              $inBWPNameParamsMap($currBWPName.CBSUnit) \
              $inBWPNameParamsMap($currBWPName.LowPriACLName) \
              $inBWPNameParamsMap($currBWPName.MedPriACLName) \
              $inBWPNameParamsMap($currBWPName.HigPriACLName) \
              $inBWPNameParamsMap($currBWPName.LowPriCCoSNum) \
              $inBWPNameParamsMap($currBWPName.MedPriCCoSNum) \
              $inBWPNameParamsMap($currBWPName.HigPriCCoSNum) \
              $inBWPNameParamsMap($currBWPName.TrafficQueueName) \
              $inBWPNameParamsMap($currBWPName.LowPriQPNum) \
              $inBWPNameParamsMap($currBWPName.MedPriQPNum) \
              $inBWPNameParamsMap($currBWPName.HigPriQPNum)
     }
}

############################################################################
# All Bandwidth Profile attachment on BD8800, SummitStack and Summit-Familiy
############################################################################
proc attachAllUniBWPOnBD88KSSSF {inUniPortList
                                 inBWPNameList
                                 inBWPNameParamsMap} {

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        attachOneUniBWPOnBD88KSSSF \
              $currUniPort \
              $inBWPNameParamsMap($currBWPName.MeterName) \
              $inBWPNameParamsMap($currBWPName.CIRValue) \
              $inBWPNameParamsMap($currBWPName.CIRUnit) \
              $inBWPNameParamsMap($currBWPName.CBSValue) \
              $inBWPNameParamsMap($currBWPName.CBSUnit) \
              $inBWPNameParamsMap($currBWPName.OOPAction)
     }
}

############################################################################
# All Bandwidth Profile attachment on BD12804R
############################################################################
proc attachAllUniBWPOnBD12804R {inUniPortList
                                inBWPNameList
                                inBWPNameParamsMap} {

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        attachOneUniBWPOnBD12804R \
              $currUniPort \
              $inBWPNameParamsMap($currBWPName.LowPriACLName) \
              $inBWPNameParamsMap($currBWPName.MedPriACLName) \
              $inBWPNameParamsMap($currBWPName.HigPriACLName)
     }
}

############################################################################
# All Bandwidth Profile attachment on BD20800
############################################################################
proc attachAllUniBWPOnBD20800 {inUniPortList
                               inBWPNameList
                               inBWPNameParamsMap} {

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        attachOneUniBWPOnBD20800 \
              $currUniPort \
              $inBWPNameParamsMap($currBWPName.LowPriACLName) \
              $inBWPNameParamsMap($currBWPName.MedPriACLName) \
              $inBWPNameParamsMap($currBWPName.HigPriACLName)
     }
}

############################################################################
# Bandwidth Profile association to Service End-Points on BD20800
############################################################################
proc assignAllUniBWPOnBD20800 {inVManId
                               inUniPortList
                               inBWPNameList
                               inBWPNameParamsMap} {

     createAllBWPObjsOnBD20800 $inVManId \
                               $inBWPNameList \
                               $inBWPNameParamsMap

     attachAllUniBWPOnBD20800 $inUniPortList \
                              $inBWPNameList \
                              $inBWPNameParamsMap
}
</content>
<contexts></contexts>
<supprotedGroups>,ALL,</supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
