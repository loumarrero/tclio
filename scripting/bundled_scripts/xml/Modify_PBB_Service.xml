<!-- This file is generated by system. Do not edit this file. -->
<script name="Modify_PBB_Service">
  <comments>This script modifies a PBB Service at a List of UNI Port(s)</comments>
  <content>#@MetaDataStart
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Modify a PBB Service for Customer
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose: To modify a PBB S/C-TAG Service at a List of UNI Port(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;scripting.Script to modify a S/C-VLAN and add a List of UNI Port(s) and to a B-VLAN&quot;
# @SectionStart (description = &quot;PBB S/C-TAG Service Modify Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;PBB Service-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [PBB_STAG,PBB_CTAG,PBB_PORT])
set var ethServPbbType PBB_STAG

# @VariableFieldLabel (description = &quot;Modification Action&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [Modify_Create,Modify_Delete,Modify_Insert,Modify_Remove,Modify_BW_Insert,Modify_BW_Remove])
set var ethServModifyAction Modify_Create

# @VariableFieldLabel (description = &quot;Switch Platform&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes,
#   validValues = [MODEL_BD10K,MODEL_BD12K,MODEL_BD20800])
set var ethServPlatformModel &quot;&quot;

# @VariableFieldLabel (description = &quot;B-VLAN Name UNI-CRE/DEL&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = no,
#   readonly    = no)
set var ethServBVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;S/C-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServSorCVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;S/C-VLAN Tag UNI-Create&quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var ethServSorCVLanTag &quot;&quot;

# @VariableFieldLabel (description = &quot;I-SID Name UNI-CRE/DEL BD20K&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = no,
#   readonly    = no)
set var ethServISidName &quot;&quot;

# @VariableFieldLabel (description = &quot;I-SID Value UNI-CRE&quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var ethServISidValue &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI+Tagging CRE/INS&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServUniPortTagStsSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Ports DEL/REM&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServUniPortSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+BWP_Name&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServUniPortBWPNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServInsORBWPTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServInsTRBWPTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServRemORBWPTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServRemTRBWPTupleSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus &quot;yes&quot;]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple =&gt; &apos;BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&apos;
###########################################################################
proc valRemTRBWPTupleSeq {inBWPNameToParamsSeq
                          outBWPNameToParamsMap} {

     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    &quot;&quot;
        set outCOSMode    &quot;&quot;
        set outMeterName  &quot;&quot;
        set outACLName    &quot;&quot;
        set outQPNum      &quot;&quot;

        valRemTRBWPTuple $currTuple \
                         outBWPName \
                         outCOSMode \
                         outMeterName \
                         outACLName \
                         outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple =&gt; &apos;BWP_Nam:COS_Mode+Meter_Name+ACLName+QPNum&apos;
###########################################################################
proc valRemTRBWPTuple {inBWPNameParamsTuple
                       outBWPName
                       outCOSMode
                       outMeterName
                       outACLName
                       outQPNum} {

     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple &apos;:&apos;]

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV &apos;+&apos;]

     if {[llength $tmpBWPAttrList] != 4} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpACLName    [lindex $tmpBWPAttrList 2]
     set tmpQPNum      [lindex $tmpBWPAttrList 3]
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple =&gt; &apos;BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&apos;
###########################################################################
proc valRemORBWPTupleSeq {inBWPNameToParamsSeq
                          outBWPNameToParamsMap} {

     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    &quot;&quot;
        set outCOSMode    &quot;&quot;
        set outMeterName  &quot;&quot;
        set outACLName    &quot;&quot;
        set outQPNum      &quot;&quot;

        valRemORBWPTuple $currTuple \
                         outBWPName \
                         outCOSMode \
                         outMeterName \
                         outACLName \
                         outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple =&gt; &apos;BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&apos;
###########################################################################
proc valRemORBWPTuple {inBWPNameParamsTuple
                       outBWPName
                       outCOSMode
                       outMeterName
                       outACLName
                       outQPNum} {

     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple &apos;:&apos;]

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV &apos;+&apos;]

     if {[llength $tmpBWPAttrList] != 4} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpACLName    [lindex $tmpBWPAttrList 2]
     set tmpQPNum      [lindex $tmpBWPAttrList 3]
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple =&gt; &apos;BWP_Name:CIR_V+CIR_U+CBS_V+CBS_U+SCH_T&apos;
###########################################################################
proc valInsORBWPTupleSeq {inBWPNameToParamsSeq
                          outBWPNameToParamsMap} {

     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    &quot;&quot;
        set outCOSMode    &quot;&quot;
        set outMeterName  &quot;&quot;
        set outCIRValue   &quot;&quot;
        set outCIRUnit    &quot;&quot;
        set outCBSValue   &quot;&quot;
        set outCBSUnit    &quot;&quot;
        set outOOPAction  &quot;&quot;
        set outSchedType  &quot;&quot;
        set outACLName    &quot;&quot;
        set outQPNum      &quot;&quot;

        valInsORBWPTuple $currTuple \
                         outBWPName \
                         outCOSMode \
                         outMeterName \
                         outCIRValue \
                         outCIRUnit \
                         outCBSValue \
                         outCBSUnit \
                         outOOPAction \
                         outSchedType \
                         outACLName \
                         outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.CIRValue)   $outCIRValue
        set tmpBWPNameToParamsMap($outBWPName.CIRUnit)    $outCIRUnit
        set tmpBWPNameToParamsMap($outBWPName.CBSValue)   $outCBSValue
        set tmpBWPNameToParamsMap($outBWPName.CBSUnit)    $outCBSUnit
        set tmpBWPNameToParamsMap($outBWPName.OOPAction)  $outOOPAction
        set tmpBWPNameToParamsMap($outBWPName.SchedType)  $outSchedType
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple =&gt; &apos;BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum&apos;
###########################################################################
proc valInsORBWPTuple {inBWPNameParamsTuple
                       outBWPName
                       outCOSMode
                       outMeterName
                       outCIRValue
                       outCIRUnit
                       outCBSValue
                       outCBSUnit
                       outOOPAction
                       outSchedType
                       outACLName
                       outQPNum} {

     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outCIRValue   tmpCIRValue
     upvar $outCIRUnit    tmpCIRUnit
     upvar $outCBSValue   tmpCBSValue
     upvar $outCBSUnit    tmpCBSUnit
     upvar $outOOPAction  tmpOOPAction
     upvar $outSchedType  tmpSchedType
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple &apos;:&apos;]

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV &apos;+&apos;]

     if {[llength $tmpBWPAttrList] != 10} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpCIRValue   [lindex $tmpBWPAttrList 2]
     set tmpCIRUnit    [lindex $tmpBWPAttrList 3]
     set tmpCBSValue   [lindex $tmpBWPAttrList 4]
     set tmpCBSUnit    [lindex $tmpBWPAttrList 5]
     set tmpOOPAction  [lindex $tmpBWPAttrList 6]
     set tmpSchedType  [lindex $tmpBWPAttrList 7]
     set tmpACLName    [lindex $tmpBWPAttrList 8]
     set tmpQPNum      [lindex $tmpBWPAttrList 9]

     set cnvSwCIRUnit   &quot;&quot;
     set cnvSwCBSUnit   &quot;&quot;
     set cnvSwOOPAction &quot;&quot;

     valInsBWPORCreParams $tmpMeterName \
                          $tmpCIRValue \
                          $tmpCIRUnit \
                          $tmpCBSValue \
                          $tmpCBSUnit

     valInsBWLowerLimitUnits $tmpCIRUnit $tmpCBSUnit cnvSwCIRUnit cnvSwCBSUnit

     validateOneRateOOPAction $tmpOOPAction cnvSwOOPAction

     validateLQoSSchedType $tmpSchedType cnvSwSchedType

     set tmpCIRUnit   $cnvSwCIRUnit
     set tmpCBSUnit   $cnvSwCBSUnit
     set tmpOOPAction $cnvSwOOPAction
     set tmpSchedType $cnvSwSchedType
}


############################################################################
# TCL Procedure To Validate PBB Service-Type and Platform Model combination
############################################################################
proc validatePbbServiceType {inPbbType} {

    global abort_on_error

    switch $inPbbType {
       PBB_CTAG {}
       PBB_STAG {}
       PBB_PORT {}
       default {
        error &quot;FAILED: Invalid PBB Service-Type =&gt; $inPbbType&quot;
       }
    }
}

proc validatePbbTypePlatformModel {inPbbType inPlatformModel} {

    global abort_on_error

    validatePbbServiceType $inPbbType

    switch $inPlatformModel {
       MODEL_BD10K {
         if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD10K.&quot;
         }
       }
       MODEL_BD12K {
         if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD10K.&quot;
         }
       }
       MODEL_BD20800 {
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

#############################################################
# TCL Procedure To Validate I-SID Name
#############################################################
proc validateISidName {inISidName} {

    global abort_on_error

    IF (![expr [string length $inISidName] &gt; 0]) THEN
       error &quot;FAILED: I-SID Name is empty.&quot;
    ENDIF
}

#############################################################
# TCL Procedure To Validate I-SID Value
#############################################################
proc validateISidValue {inISidValue} {

    global abort_on_error

    IF (![expr [string length $inISidValue] &gt; 0]) THEN
       error &quot;FAILED: I-SID Value is empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure To Validate B-VLAN based Service Creation Parameters
############################################################################
proc validateServiceCreateParams {inBVLanName
                                  inSorCVLanName
                                  inSorCTag} {
    global abort_on_error

    IF (![expr [string length $inBVLanName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inSorCVLanName] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inSorCTag] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Tag is empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure To Validate B-VLAN based Service Deletion Parameters
############################################################################
proc validateServiceDeleteParams {inBVLanName
                                  inSorCVLanName
                                  inUniPortSeq} {
    global abort_on_error

    IF (![expr [string length $inBVLanName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inSorCVLanName] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inUniPortSeq] &gt; 0]) THEN
       error &quot;FAILED: UNI Port List is empty.&quot;
    ENDIF
}

############################################################################
# Service Params Validation for some UNI insert on Switches
############################################################################
proc validateServiceInsertParams {inSorCVLanName} {

    global abort_on_error

    IF (![expr [string length $inSorCVLanName] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Name is empty.&quot;
    ENDIF
}

############################################################################
# Service Params Validation for some UNI removal on Switches
############################################################################
proc validateServiceRemoveParams {inSorCVLanName inUniPortSeq} {

    IF (![expr [string length $inSorCVLanName] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inUniPortSeq] &gt; 0]) THEN
       error &quot;FAILED: UNI Port List is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 2-Tuple of the form &apos;UNI-Port+Tag-Status&apos;
################################################################################
proc validateUniPortTagStsTuple {inUniPortTagSts
                                 outUniPortNum
                                 outTagSts} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagSts     tmpTagSts

     set tmpUniTagList [split $inUniPortTagSts &apos;+&apos;]

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI_Port, Tag_Status, Tuple=&gt;$inUniPortTagSts&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagSts     [lindex $tmpUniTagList 1]
}

################################################################################
# Procedure to Validate a List of 2-Tuples of the form &apos;UNI-Port+Tag-Status&apos;
################################################################################
proc validateUniPortTagStsTupleSeq {inUniPortTagStsSeq
                                    outUniPortList
                                    outTagStsList} {
     global abort_on_error

     IF (![expr [string length $inUniPortTagStsSeq] &gt; 0]) THEN
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     ENDIF

     set tmpUniPortTagStsList [split $inUniPortTagStsSeq ,]

     if {![expr [llength $tmpUniPortTagStsList] &gt; 0]} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outTagStsList  tmpTagStsList

     foreach currTuple $tmpUniPortTagStsList {

        set outUniPortNum &quot;&quot;
        set outTagSts     &quot;&quot;

        validateUniPortTagStsTuple $currTuple \
                                   outUniPortNum \
                                   outTagSts

        lappend tmpUniPortList $outUniPortNum
        lappend tmpTagStsList  $outTagSts
     }
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form &apos;UNI_Port+BWP_Name&apos;
#############################################################################
proc validateUniPortToBWPNameTupleSeq {inUniPortToBWPNameSeq
                                       outUniPortList
                                       outBWPNameList} {
     global abort_on_error

     if {![string length $inUniPortToBWPNameSeq]} {
        return
     }

     set tmpUniPortBWPNameList [split $inUniPortToBWPNameSeq ,]

     if {![llength $tmpUniPortBWPNameList]} {
        error &quot;UNI-Port, BWP-Name Tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outBWPNameList tmpBWPNameList

     foreach currTuple $tmpUniPortBWPNameList {

        set outUniPortNum &quot;&quot;
        set outBWPName    &quot;&quot;

        validateUniPortBWPTuple $currTuple \
                                outUniPortNum \
                                outBWPName

        lappend tmpUniPortList $outUniPortNum
        lappend tmpBWPNameList $outBWPName
     }
}

###########################################################################
# Procedure to Validate a single 2-Tuple of the form &apos;UNI_Port+BWP_Name&apos;
###########################################################################
proc validateUniPortBWPTuple {inUniPortBWPName
                              outUniPortNum
                              outBWPName} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outBWPName    tmpBWPName

     set tmpUniBWPList [split $inUniPortBWPName &apos;+&apos;]

     if {[llength $tmpUniBWPList] != 2} {
         error &quot;Invalid UNI-Port, BWP-Name Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniBWPList 0]
     set tmpBWPName    [lindex $tmpUniBWPList 1]
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple =&gt; &apos;BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum&apos;
###########################################################################
proc valInsTRBWPTupleSeq {inBWPNameToParamsSeq
                          outBWPNameToParamsMap} {

     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    &quot;&quot;
        set outCOSMode    &quot;&quot;
        set outMeterName  &quot;&quot;
        set outCIRValue   &quot;&quot;
        set outCIRUnit    &quot;&quot;
        set outCBSValue   &quot;&quot;
        set outCBSUnit    &quot;&quot;
        set outEIRValue   &quot;&quot;
        set outEIRUnit    &quot;&quot;
        set outEBSValue   &quot;&quot;
        set outEBSUnit    &quot;&quot;
        set outSchedType  &quot;&quot;
        set outACLName    &quot;&quot;
        set outQPNum      &quot;&quot;

        valInsTRBWPTuple $currTuple \
                         outBWPName \
                         outCOSMode \
                         outMeterName \
                         outCIRValue \
                         outCIRUnit \
                         outCBSValue \
                         outCBSUnit \
                         outEIRValue \
                         outEIRUnit \
                         outEBSValue \
                         outEBSUnit \
                         outSchedType \
                         outACLName \
                         outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.CIRValue)   $outCIRValue
        set tmpBWPNameToParamsMap($outBWPName.CIRUnit)    $outCIRUnit
        set tmpBWPNameToParamsMap($outBWPName.CBSValue)   $outCBSValue
        set tmpBWPNameToParamsMap($outBWPName.CBSUnit)    $outCBSUnit
        set tmpBWPNameToParamsMap($outBWPName.EIRValue)   $outEIRValue
        set tmpBWPNameToParamsMap($outBWPName.EIRUnit)    $outEIRUnit
        set tmpBWPNameToParamsMap($outBWPName.EBSValue)   $outEBSValue
        set tmpBWPNameToParamsMap($outBWPName.EBSUnit)    $outEBSUnit
        set tmpBWPNameToParamsMap($outBWPName.SchedType)  $outSchedType
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple =&gt; &apos;BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum&apos;
###########################################################################
proc valInsTRBWPTuple {inBWPNameParamsTuple
                       outBWPName
                       outCOSMode
                       outMeterName
                       outCIRValue
                       outCIRUnit
                       outCBSValue
                       outCBSUnit
                       outEIRValue
                       outEIRUnit
                       outEBSValue
                       outEBSUnit
                       outSchedType
                       outACLName
                       outQPNum} {

     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outCIRValue   tmpCIRValue
     upvar $outCIRUnit    tmpCIRUnit
     upvar $outCBSValue   tmpCBSValue
     upvar $outCBSUnit    tmpCBSUnit
     upvar $outEIRValue   tmpEIRValue
     upvar $outEIRUnit    tmpEIRUnit
     upvar $outEBSValue   tmpEBSValue
     upvar $outEBSUnit    tmpEBSUnit
     upvar $outSchedType  tmpSchedType
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple &apos;:&apos;]

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV &apos;+&apos;]

     if {[llength $tmpBWPAttrList] != 13} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpCIRValue   [lindex $tmpBWPAttrList 2]
     set tmpCIRUnit    [lindex $tmpBWPAttrList 3]
     set tmpCBSValue   [lindex $tmpBWPAttrList 4]
     set tmpCBSUnit    [lindex $tmpBWPAttrList 5]
     set tmpEIRValue   [lindex $tmpBWPAttrList 6]
     set tmpEIRUnit    [lindex $tmpBWPAttrList 7]
     set tmpEBSValue   [lindex $tmpBWPAttrList 8]
     set tmpEBSUnit    [lindex $tmpBWPAttrList 9]
     set tmpSchedType  [lindex $tmpBWPAttrList 10]
     set tmpACLName    [lindex $tmpBWPAttrList 11]
     set tmpQPNum      [lindex $tmpBWPAttrList 12]

     set cnvSwCIRUnit   &quot;&quot;
     set cnvSwCBSUnit   &quot;&quot;
     set cnvSwEIRUnit   &quot;&quot;
     set cnvSwEBSUnit   &quot;&quot;
     set cnvSwSchedType &quot;&quot;

     valInsBWPTRCreParams $tmpMeterName \
                          $tmpCIRValue \
                          $tmpCIRUnit \
                          $tmpCBSValue \
                          $tmpCBSUnit \
                          $tmpEIRValue \
                          $tmpEIRUnit \
                          $tmpEBSValue \
                          $tmpEBSUnit

     valInsBWLowerLimitUnits $tmpCIRUnit $tmpCBSUnit cnvSwCIRUnit cnvSwCBSUnit

     valInsBWUpperLimitUnits $tmpEIRUnit $tmpEBSUnit cnvSwEIRUnit cnvSwEBSUnit

     validateLQoSSchedType $tmpSchedType cnvSwSchedType

     set tmpCIRUnit   $cnvSwCIRUnit
     set tmpCBSUnit   $cnvSwCBSUnit
     set tmpEIRUnit   $cnvSwEIRUnit
     set tmpEBSUnit   $cnvSwEBSUnit
     set tmpSchedType $cnvSwSchedType
}

######################################################################
# Procedure to Validate Out-Of-Profile Action types for Platforms
# BD8800, SummitStack and Summit-Family
######################################################################
proc validateOneRateOOPAction {inOOPAction
                               outSwOOPAction} {
    global abort_on_error
    upvar  $outSwOOPAction tmpSwOOPAction

    switch $inOOPAction {
       &quot;OOPACT_DROP&quot;    {set tmpSwOOPAction &quot;drop&quot;}
       &quot;OOPACT_SETPRCD&quot; {set tmpSwOOPAction &quot;set-drop-precedence&quot;}
       default {
        error &quot;FAILED: Invalid Out-Of-Profile Action=&gt;$inOOPAction&quot;
       }
    }
}

######################################################################
# Procedure to Validate Scheduling types
######################################################################
proc validateLQoSSchedType {inSchedType
                            outSwSchedType} {
    global abort_on_error
    upvar  $outSwSchedType tmpSwSchedType

    switch $inSchedType {
       &quot;SCHEDT_SPR&quot; {set tmpSwSchedType &quot;strict-priority&quot;}
       &quot;SCHEDT_WRR&quot; {set tmpSwSchedType &quot;wrr&quot;}
       default {
        error &quot;FAILED: Invalid Scheduling_Type=&gt;$inSchedType&quot;
       }
    }
}

###########################################################################
# Procedure to validate Bandwidth Lower-Limit Units
###########################################################################
proc valInsBWLowerLimitUnits {inCIRUnit
                              inCBSUnit
                              outSwCIRUnit
                              outSwCBSUnit} {
    global abort_on_error
    upvar  $outSwCIRUnit tmpSwCIRUnit
    upvar  $outSwCBSUnit tmpSwCBSUnit

    switch $inCIRUnit {
       &quot;CIRU_KBPS&quot; {set tmpSwCIRUnit &quot;Kbps&quot;}
       &quot;CIRU_MBPS&quot; {set tmpSwCIRUnit &quot;Mbps&quot;}
       &quot;CIRU_GBPS&quot; {set tmpSwCIRUnit &quot;Gbps&quot;}
       default {
        error &quot;FAILED: Invalid CIR Unit_Type=&gt;$inCIRUnit&quot;
       }
    }
    switch $inCBSUnit {
       &quot;CBSU_KB&quot; {set tmpSwCBSUnit &quot;Kb&quot;}
       &quot;CBSU_MB&quot; {set tmpSwCBSUnit &quot;Mb&quot;}
       &quot;CBSU_GB&quot; {set tmpSwCBSUnit &quot;Gb&quot;}
       default {
        error &quot;FAILED: Invalid CBS Unit_Type=&gt;$inCBSUnit&quot;
       }
    }
}

###########################################################################
# Procedure to validate Bandwidth Upper-Limit Units
###########################################################################
proc valInsBWUpperLimitUnits {inEIRUnit
                              inEBSUnit
                              outSwEIRUnit
                              outSwEBSUnit} {
    global abort_on_error
    upvar  $outSwEIRUnit tmpSwEIRUnit
    upvar  $outSwEBSUnit tmpSwEBSUnit

    switch $inEIRUnit {
       &quot;EIRU_KBPS&quot; {set tmpSwEIRUnit &quot;Kbps&quot;}
       &quot;EIRU_MBPS&quot; {set tmpSwEIRUnit &quot;Mbps&quot;}
       &quot;EIRU_GBPS&quot; {set tmpSwEIRUnit &quot;Gbps&quot;}
       default {
        error &quot;FAILED: Invalid EIR Unit_Type=&gt;$inEIRUnit&quot;
       }
    }
    switch $inEBSUnit {
       &quot;EBSU_KB&quot; {set tmpSwEBSUnit &quot;Kb&quot;}
       &quot;EBSU_MB&quot; {set tmpSwEBSUnit &quot;Mb&quot;}
       &quot;EBSU_GB&quot; {set tmpSwEBSUnit &quot;Gb&quot;}
       default {
        error &quot;FAILED: Invalid EBS Unit_Type=&gt;$inEBSUnit&quot;
       }
    }
}

############################################################################
# TCL Procedure To Validate Bandwidth-Profile Two-Rate Create Parameters
############################################################################
proc valInsBWPTRCreParams {inMeterName
                           inCIRValue
                           inCIRUnit
                           inCBSValue
                           inCBSUnit
                           inEIRValue
                           inEIRUnit
                           inEBSValue
                           inEBSUnit} {
    global abort_on_error

    valInsBWPORCreParams $inMeterName \
                                   $inCIRValue \
                                   $inCIRUnit \
                                   $inCBSValue \
                                   $inCBSUnit

    IF (![expr [string length $inEIRValue] &gt; 0]) THEN
       error &quot;FAILED: EIR value is empty.&quot;
    ENDIF

    IF (![expr [string length $inEIRUnit] &gt; 0]) THEN
       error &quot;FAILED: EIR unit is empty.&quot;
    ENDIF

    IF (![expr [string length $inEBSValue] &gt; 0]) THEN
       error &quot;FAILED: EBS value is empty.&quot;
    ENDIF

    IF (![expr [string length $inEBSUnit] &gt; 0]) THEN
       error &quot;FAILED: EBS unit is empty.&quot;
    ENDIF
}

proc valInsBWPORCreParams {inMeterName
                           inCIRValue
                           inCIRUnit
                           inCBSValue
                           inCBSUnit} {
    global abort_on_error

    IF (![expr [string length $inMeterName] &gt; 0]) THEN
       error &quot;FAILED: Meter Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inCIRValue] &gt; 0]) THEN
       error &quot;FAILED: CIR value is empty.&quot;
    ENDIF

    IF (![expr [string length $inCIRUnit] &gt; 0]) THEN
       error &quot;FAILED: CIR unit is empty.&quot;
    ENDIF

    IF (![expr [string length $inCBSValue] &gt; 0]) THEN
       error &quot;FAILED: CBS value is empty.&quot;
    ENDIF

    IF (![expr [string length $inCBSUnit] &gt; 0]) THEN
       error &quot;FAILED: CBS unit is empty.&quot;
    ENDIF
}


##########################################################################
# Procedure to add one UNI-Port to the S/C-VLAN on the switch
##########################################################################
proc addOneUniToSorCVLan {inPbbType
                          inSorCVLanName
                          inUniPortNum
                          inTagSts} {
    global abort_on_error
    global permitRingPortsAsUni

  if {[string equal $inTagSts "untagged"]} {
    if {[catch {
         configure vlan Default del port $inUniPortNum
      } errMsgText]} {
         error &quot;FAILED: Cannot delete Port $inUniPortNum from default VLAN, $errMsgText&quot;
      }
  }

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config cvlan $inSorCVLanName add ports $inUniPortNum $inTagSts
       } else {
          config svlan $inSorCVLanName add ports $inUniPortNum $inTagSts
       }

       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI    $permitRingPortsAsUni
       ENDIF
    } errMsgText]} {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Cannot add UNI-Port $inUniPortNum to S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Insert one UNI-Port to the S/C-VLAN on the switch
##########################################################################
proc insOneUniToSorCVLan {inPbbType
                          inSorCVLanName
                          inUniPortNum
                          inTagSts} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[string equal $inTagSts "untagged"]} {
      if {[catch {
         configure vlan Default del port $inUniPortNum
      } errMsgText]} {
         error &quot;FAILED: Cannot delete Port $inUniPortNum from default VLAN, $errMsgText&quot;
      }
    }

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config cvlan $inSorCVLanName add ports $inUniPortNum $inTagSts
       } else {
          config svlan $inSorCVLanName add ports $inUniPortNum $inTagSts
       }

       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI    $permitRingPortsAsUni
       ENDIF
    } errMsgText]} {
       error &quot;FAILED: Cannot add UNI-Port $inUniPortNum to S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to add all UNI-Port(s) to the S/C-VLAN on the switch
##########################################################################
proc addAllUnisToSorCVLan {inPbbType
                           inSorCVLanName
                           inUniPortList
                           inTagStsList} {
    global abort_on_error

    foreach currUniPort $inUniPortList currTagSts $inTagStsList {

       addOneUniToSorCVLan $inPbbType \
                           $inSorCVLanName \
                           $currUniPort \
                           $currTagSts
    }
}

##########################################################################
# Procedure to Insert all UNI-Port(s) to S/C-VLAN on the switch
##########################################################################
proc insAllUnisToSorCVLan {inPbbType
                           inSorCVLanName
                           inUniPortList
                           inTagStsList} {
    global abort_on_error

  if {[catch {
      foreach currUniPort $inUniPortList currTagSts $inTagStsList {

         insOneUniToSorCVLan $inPbbType \
                             $inSorCVLanName \
                             $currUniPort \
                             $currTagSts
      }
  } result]} {
    cleanAllUnisFromSorCVLan  $inPbbType \
                $inSorCVLanName \
                                $inUniPortList \
                                $inTagStsList
    error "FAILED: Could not add port to svlan/cvlan $inSorCVLanName, $result"
  }
}

###########################################################################
# Procedure to Remove the SVLAN or CVLAN from all the UNI Ports on the switch
###########################################################################
proc cleanAllUnisFromSorCVLan { inPbbType
                inSorCVLanName
                              inUniPortList
                              inTagStatusList} {
    foreach currUniPort   $inUniPortList \
            currTagStatus $inTagStatusList {

       cleanOneUniFromSorCVLan $inPbbType \
                              $inSorCVLanName \
                              $currUniPort \
                              $currTagStatus
    }

}

##########################################################################
# Procedure to remove the SVLAN or CVLAN from one UNI Port on the switch
##########################################################################
proc cleanOneUniFromSorCVLan {inPbbType
               inSorCVLanName
                             inUniPortNum
                             inTagStatus} {

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config cvlan $inSorCVLanName delete ports $inUniPortNum
       } else {
          config svlan $inSorCVLanName delete ports $inUniPortNum
       }
    } result]} {
       error &quot;FAILED: Cannot delete Port $inUniPortNum from svlan/cvlan, $result&quot;
    }
}

##########################################################################
# Procedure to remove all UNI-Port(s) from S/C-VLAN on the switch
##########################################################################
proc remAllUnisFromSorCVLan {inPbbType
                             inSorCVLanName
                             inUniPortSeq} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
           configure cvlan $inSorCVLanName delete port $inUniPortSeq
       } else {
           configure svlan $inSorCVLanName delete port $inUniPortSeq
       }
    } errMsgText]} {
       puts &quot;FAILED: Cannot delete Ports $inUniPortSeq from S/C-VLAN, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to Create the S/C-VLAN on the switch
###########################################################################
proc createSorCVLan {inPbbType
                     inSorCVLanName
                     inSorCTag} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          create cvlan $inSorCVLanName
       } else {
          create svlan $inSorCVLanName
       }
    } errMsgText]} {
       error &quot;FAILED: Could not create S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config cvlan $inSorCVLanName tag $inSorCTag
       } else {
          config svlan $inSorCVLanName tag $inSorCTag
       }
    } errMsgText]} {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can&apos;t set Tag $inSorCTag on S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to Delete the S/C-VLAN on the switch
###########################################################################
proc deleteSorCVLan {inPbbType
                     inSorCVLanName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       puts &quot;FAILED: Could not delete S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to assign I-SID value to the S/C-VLAN on BD10K/BD12K Platforms
###########################################################################
proc addISidToSorCVLanOnBD1XK {inPbbType
                               inSorCVLanName
                               inISidValue} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config cvlan $inSorCVLanName isid $inISidValue
       } else {
          config svlan $inSorCVLanName isid $inISidValue
       }
    } errMsgText]} {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Invalid I-SID for S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to create I-SID and add S/C-VLAN on BD20K Platforms
###########################################################################
proc createISidAddSorCVLanOnBD2XK {inPbbType
                                   inSorCVLanName
                                   inISidName
                                   inISidValue} {
    global abort_on_error

    if {[catch {
       create isid $inISidName $inISidValue
    } errMsgText]} {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can&apos;t create I-SID $inISidName:$inISidValue $errMsgText&quot;
    }

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config isid $inISidName add cvlan $inSorCVLanName
       } else {
          config isid $inISidName add svlan $inSorCVLanName
       }
    } errMsgText]} {
       delete isid  $inISidName

       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can&apos;t add S/C-VLAN $inSorCVLanName to I-SID $inISidName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to remove S/C-VLAN from I-SID and delete I-SID on BD20K Platforms
###########################################################################
proc remSorCVLanDeleteISidOnBD2XK {inPbbType
                                   inSorCVLanName
                                   inISidName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config isid $inISidName delete cvlan $inSorCVLanName
       } else {
          config isid $inISidName delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       puts &quot;FAILED: Can&apos;t remove S/C-VLAN $inSorCVLanName from I-SID $inISidName, $errMsgText&quot;
    }

    if {[catch {
       delete isid $inISidName
    } errMsgText]} {
       puts &quot;FAILED: Can&apos;t delete I-SID $inISidName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to add the S/C-VLAN to the B-VLAN on BD10K/BD12K Platforms
###########################################################################
proc addSorCVLanToBVLanOnBD1XK {inPbbType
                                inBVLanName
                                inSorCVLanName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config bvlan $inBVLanName add cvlan $inSorCVLanName
       } else {
          config bvlan $inBVLanName add svlan $inSorCVLanName
       }
    } errMsgText]} {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can&apos;t add S/C-VLAN $inSorCVLanName to B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to remove the S/C-VLAN from B-VLAN on BD10K/BD12K Platforms
###########################################################################
proc remSorCVLanFromBVLanOnBD1XK {inPbbType
                                  inBVLanName
                                  inSorCVLanName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config bvlan $inBVLanName delete cvlan $inSorCVLanName
       } else {
          config bvlan $inBVLanName delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       error &quot;FAILED: Can&apos;t remove S/C-VLAN $inSorCVLanName from B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to add I-SID to the B-VLAN on BD20K Platforms
###########################################################################
proc addISidToBVLanOnBD2XK {inPbbType
                            inBVLanName
                            inSorCVLanName
                            inISidName} {
    global abort_on_error

    if {[catch {
       config bvlan $inBVLanName add isid $inISidName
    } errMsgText]} {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config isid $inISidName delete cvlan $inSorCVLanName
       } else {
          config isid $inISidName delete svlan $inSorCVLanName
       }

       delete isid $inISidName

       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can&apos;t add I-SID $inISidName to B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to remove I-SID from B-VLAN on BD20K Platforms
###########################################################################
proc remISidFromBVLanOnBD2XK {inBVLanName inISidName} {

    global abort_on_error

    if {[catch {
       config bvlan $inBVLanName delete isid $inISidName
    } errMsgText]} {
       puts &quot;FAILED: Can&apos;t remove I-SID $inISidName from B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

############################################################################
# S-Tagged PBB Service Creation on BD10K/BD12K Platforms
############################################################################
# 1) Create S/C-VLAN
# 2) Add UNI Ports to S/C-VLAN
# 3) Assign I-SID  to S/C-VLAN
# 4) Add    S/C-VLAN to B-VLAN
############################################################################
proc createPBBServiceSorCTagOnBD1XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inSorCTag
                                     inISidValue
                                     inUniPortList
                                     inTagStsList} {
    global abort_on_error

    createSorCVLan $inPbbType \
                   $inSorCVLanName \
                   $inSorCTag

    addAllUnisToSorCVLan $inPbbType \
                         $inSorCVLanName \
                         $inUniPortList \
                         $inTagStsList

    addISidToSorCVLanOnBD1XK $inPbbType \
                             $inSorCVLanName \
                             $inISidValue

    addSorCVLanToBVLanOnBD1XK $inPbbType \
                              $inBVLanName \
                              $inSorCVLanName
}

############################################################################
# S-Tagged PBB Service Deletion on BD10K/BD12K Platforms
############################################################################
# 1) Remove S/C-VLAN from B-VLAN
# 2) Remove UNI Ports from S/C-VLAN
# 3) Delete S/C-VLAN
############################################################################
proc deletePBBServiceSorCTagOnBD1XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inUniPortSeq} {
    global abort_on_error

    remSorCVLanFromBVLanOnBD1XK $inPbbType \
                                $inBVLanName \
                                $inSorCVLanName

    remAllUnisFromSorCVLan $inPbbType \
                           $inSorCVLanName \
                           $inUniPortSeq

    deleteSorCVLan $inPbbType \
                   $inSorCVLanName
}

############################################################################
# S-Tagged PBB Service Creation on BD20K Platforms
############################################################################
# 1) Create S/C-VLAN
# 2) Add UNI Ports to S/C-VLAN
# 3) Create I-SID and S/C-VLAN to I-SID
# 4) Add I-SID to B-VLAN
############################################################################
proc createPBBServiceSorCTagOnBD2XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inSorCTag
                                     inISidName
                                     inISidValue
                                     inUniPortList
                                     inTagStsList} {
    global abort_on_error

    createSorCVLan $inPbbType \
                   $inSorCVLanName \
                   $inSorCTag

    addAllUnisToSorCVLan $inPbbType \
                         $inSorCVLanName \
                         $inUniPortList \
                         $inTagStsList

    createISidAddSorCVLanOnBD2XK $inPbbType \
                                 $inSorCVLanName \
                                 $inISidName \
                                 $inISidValue

    addISidToBVLanOnBD2XK $inPbbType \
                          $inBVLanName \
                          $inSorCVLanName \
                          $inISidName
}

############################################################################
# S-Tagged PBB Service Deletion on BD20K Platforms
############################################################################
# 1) Remove I-SID from B-VLAN
# 2) Remove S/C-VLAN from I-SID and then delete I-SID
# 3) Remove UNI Ports from S/C-VLAN
# 4) Delete S/C-VLAN
############################################################################
proc deletePBBServiceSorCTagOnBD2XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inISidName
                                     inUniPortSeq} {
    global abort_on_error

    remISidFromBVLanOnBD2XK $inBVLanName $inISidName

    remSorCVLanDeleteISidOnBD2XK $inPbbType \
                                 $inSorCVLanName \
                                 $inISidName

    remAllUnisFromSorCVLan $inPbbType \
                           $inSorCVLanName \
                           $inUniPortSeq

    deleteSorCVLan $inPbbType \
                   $inSorCVLanName
}

############################################################################
# S-TAGGED PBB Service Deletion on BD20K Platforms
############################################################################
# 1) Remove I-SID from B-VLAN
# 2) Remove S/C-VLAN from I-SID and then delete I-SID
# 3) Remove UNI Ports from S/C-VLAN
# 4) Delete S/C-VLAN
############################################################################
proc cleanPBBServiceSorCTagOnBD2XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inISidName
                                     inUniPortList
                                  inTagStatusList} {
    global abort_on_error

    remISidFromBVLanOnBD2XK $inBVLanName $inISidName

    remSorCVLanDeleteISidOnBD2XK $inPbbType \
                                 $inSorCVLanName \
                                 $inISidName

    cleanSorCVLanFromAllUnis $inPbbType \
                           $inSorCVLanName \
                           $inUniPortList \
                           $inTagStatusList

    deleteSorCVLan $inPbbType \
                   $inSorCVLanName
}

##########################################################################
# Procedure to remove UNI-Port(s) from S/C-VLAN on the switch
##########################################################################
proc cleanSorCVLanFromOneUni {inPbbType
                             inSorCVLanName
                             inUniPortNum
                             inTagStatus} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          configure cvlan $inSorCVLanName delete port $inUniPortNum
       } else {
          configure svlan $inSorCVLanName delete port $inUniPortNum
       }
    } errMsgText]} {
       error &quot;FAILED: Cannot delete Port $inUniPortNum from S/C-VLAN, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to Remove the CVLAN/SVLAN from all the UNI Ports on the switch
###########################################################################
proc cleanSorCVLanFromAllUnis {inPbbType
                             inSorCVLanName
                             inUniPortList
                             inTagStatusList} {
    foreach currUniPort   $inUniPortList \
            currTagStatus $inTagStatusList {

       cleanSorCVLanFromOneUni $inPbbType \
                             $inSorCVLanName \
                             $currUniPort \
                             $currTagStatus
    }

}


############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on BD1XK Platforms
############################################################################
proc runPBBServiceSorCTagCreateOnBD1XK {inPbbType
                                        inBVLanName
                                        inSorCVLanName
                                        inSorCTag
                                        inISidValue
                                        inUniPortTagStsSeq} {
    global abort_on_error

    validateServiceCreateParams $inBVLanName \
                                $inSorCVLanName \
                                $inSorCTag

    validateISidValue $inISidValue

    set outUniPortList [list]
    set outTagStsList  [list]

    validateUniPortTagStsTupleSeq $inUniPortTagStsSeq \
                                  outUniPortList \
                                  outTagStsList

    createPBBServiceSorCTagOnBD1XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inSorCTag \
                                   $inISidValue \
                                   $outUniPortList \
                                   $outTagStsList
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Deletion on BD1XK Platforms
############################################################################
proc runPBBServiceSorCTagDeleteOnBD1XK {inPbbType
                                        inBVLanName
                                        inSorCVLanName
                                        inUniPortSeq} {
    global abort_on_error

    validateServiceDeleteParams $inBVLanName \
                                $inSorCVLanName \
                                $inUniPortSeq

    deletePBBServiceSorCTagOnBD1XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inUniPortSeq
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on BD2XK Platforms
############################################################################
proc runPBBServiceSorCTagCreateOnBD2XK {inPbbType
                                        inBVLanName
                                        inSorCVLanName
                                        inSorCTag
                                        inISidName
                                        inISidValue
                                        inUniPortTagStsSeq
                                        inBWPNameList
                                        inRateLimitType
                                        inBWPNameToParamsMap} {
    global abort_on_error

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    validateServiceCreateParams $inBVLanName \
                                $inSorCVLanName \
                                $inSorCTag

    validateISidName  $inISidName
    validateISidValue $inISidValue

    set outUniPortList [list]
    set outTagStsList  [list]

    validateUniPortTagStsTupleSeq $inUniPortTagStsSeq \
                                  outUniPortList \
                                  outTagStsList

    createPBBServiceSorCTagOnBD2XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inSorCTag \
                                   $inISidName \
                                   $inISidValue \
                                   $outUniPortList \
                                   $outTagStsList

  if {[catch {
    assignAllUniBWPOnBD20800 $inPbbType \
                             $inSorCTag \
                             $outUniPortList \
                             $inBWPNameList \
                             $inRateLimitType \
                             tmpBWPNameToParamsMap
  } result]} {
    cleanPBBServiceSorCTagOnBD2XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inISidName \
                                   $outUniPortList \
                                   $outTagStsList

    error "FAILED: Could not create Bandwidth profile, $result"
  }

}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD20800
############################################################################
proc assignAllUniBWPOnBD20800 {inPbbType
                               inSorCVLanTag
                               inUniPortList
                               inBWPNameList
                               inRateLimitType
                               inBWPNameToParamsMap} {
     global abort_on_error

     if {![llength $inBWPNameList]} {
         return
     }

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     createAllBWPObjsOnBD20800 $inPbbType \
                               $inSorCVLanTag \
                               $inBWPNameList \
                               $inRateLimitType \
                               tmpBWPNameToParamsMap
     if {[catch {
        attachAllUniBWPOnBD20800 $inSorCVLanTag \
                                 $inUniPortList \
                                 $inBWPNameList \
                                 tmpBWPNameToParamsMap
     } errMsgText]} {

       cleanAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap

       error &quot;FAILED: Can&apos;t Assign BW-Profiles on UNIs, $errMsgText&quot;
     }
}

############################################################################
# All Bandwidth Profile attachment on BD20800
############################################################################
proc attachAllUniBWPOnBD20800 {inSorCVLanTag
                               inUniPortList
                               inBWPNameList
                               inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedUniPortList [list]
     set finishedACLNameList [list]

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)

        if {[catch {
            attachOneUniBWPOnBD20800 $inSorCVLanTag \
                                     $currUniPort \
                                     $currACLName
        } errMsgText]} {

           cleanAllUniBWPAttachment $finishedUniPortList \
                                    $finishedACLNameList

           error &quot;FAILED: Can&apos;t Attach BW-PROF($currBWPName) on UNI($currUniPort), $errMsgText&quot;
        }

        lappend finishedUniPortList $currUniPort
        lappend finishedACLNameList $currACLName
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from all UNI Port(s)
##########################################################################
proc cleanAllUniBWPAttachment {inUniPortList
                               inACLNameList} {

     foreach currUniPort $inUniPortList \
             currACLName $inACLNameList {

        cleanOneUniBWPAttachment $currUniPort \
                                 $currACLName
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from one UNI Port
##########################################################################
proc cleanOneUniBWPAttachment {inUniPortNum
                               inACLName} {
  global abort_on_error
    configure access-list delete $inACLName ports $inUniPortNum ingress
}

############################################################################
# Bandwidth Profile attachment on BD20800
############################################################################
# 1) Configure ACL on a UNI-Port
############################################################################
proc attachOneUniBWPOnBD20800 {inSorCVLanTag
                               inUniPortNum
                               inACLName} {
    global abort_on_error

    if {[catch {
       configure access-list add $inACLName first ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not Add $inUniPortNum to $inACLName, $errMsgText&quot;
    }
}

############################################################################
# All Bandwidth Profile Creation on BD20800
############################################################################
proc createAllBWPObjsOnBD20800 {inPbbType
                                inSorCVLanTag
                                inBWPNameList
                                inRateLimitType
                                inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedBWPNameList [list]

     foreach currBWPName $inBWPNameList {
        if {[catch {
           if {![string equal $inRateLimitType "DUAL_RATE"]} {
                createOneSingleRateBWPObjsOnBD20800 \
                      $inPbbType \
                      $inSorCVLanTag \
                      $tmpBWPNameToParamsMap($currBWPName.COSMode) \
                      $tmpBWPNameToParamsMap($currBWPName.MeterName) \
                      $tmpBWPNameToParamsMap($currBWPName.CIRValue) \
                      $tmpBWPNameToParamsMap($currBWPName.CIRUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.CBSValue) \
                      $tmpBWPNameToParamsMap($currBWPName.CBSUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.ACLName) \
                      $tmpBWPNameToParamsMap($currBWPName.QPNum)
            } else {
                createOneDualRateBWPObjsOnBD20800 \
                      $inPbbType \
                      $inSorCVLanTag \
                      $tmpBWPNameToParamsMap($currBWPName.COSMode) \
                      $tmpBWPNameToParamsMap($currBWPName.MeterName) \
                      $tmpBWPNameToParamsMap($currBWPName.CIRValue) \
                      $tmpBWPNameToParamsMap($currBWPName.CIRUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.CBSValue) \
                      $tmpBWPNameToParamsMap($currBWPName.CBSUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.EIRValue) \
                      $tmpBWPNameToParamsMap($currBWPName.EIRUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.EBSValue) \
                      $tmpBWPNameToParamsMap($currBWPName.EBSUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.ACLName) \
                      $tmpBWPNameToParamsMap($currBWPName.QPNum)
            }
        } errMsgText]} {

           cleanAllBWPObjs $finishedBWPNameList tmpBWPNameToParamsMap

           error &quot;FAILED: Could not create BW-Profile($currBWPName), $errMsgText&quot;;
        }

        lappend finishedBWPNameList $currBWPName
     }
}

############################################################################
# Cleanup QoS Objects (Meter, ACL etc.) for a List of BW-Profile(s)
############################################################################
proc cleanAllBWPObjs {inBWPNameList
                      inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currBWPName $inBWPNameList {

        cleanOneBWPObj $tmpBWPNameToParamsMap($currBWPName.MeterName) \
                       $tmpBWPNameToParamsMap($currBWPName.ACLName)
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Objects (Meter,ACL)
##########################################################################
proc cleanOneBWPObj {inMeterName
                     inACLName} {

    delete access-list $inACLName
    delete meter $inMeterName
}

############################################################################
# Bandwidth Profile Creation on BD20800
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
############################################################################
proc createOneSingleRateBWPObjsOnBD20800 {inPbbType
                                inSorCVLanTag
                                inCOSMode
                                inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inACLName
                                inQPNum} {
    createMeter $inMeterName

    setSingleRateMeterParamsOnBD20800 $inMeterName \
                            $inCIRValue \
                            $inCIRUnit \
                            $inCBSValue \
                            $inCBSUnit

    createMeteringTraffClsfrACL $inPbbType \
                                $inSorCVLanTag \
                                $inCOSMode \
                                $inACLName \
                                $inMeterName \
                                $inQPNum
}

############################################################################
# Bandwidth Profile Creation on BD20800
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
############################################################################
proc createOneDualRateBWPObjsOnBD20800 {inPbbType
                                inSorCVLanTag
                                inCOSMode
                                inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inEIRValue
                                inEIRUnit
                                inEBSValue
                                inEBSUnit
                                inACLName
                                inQPNum} {
    createMeter $inMeterName

    setDualRateMeterParamsOnBD20800 $inMeterName \
                            $inCIRValue \
                            $inCIRUnit \
                            $inCBSValue \
                            $inCBSUnit \
                            $inEIRValue \
                            $inEIRUnit \
                            $inEBSValue \
                            $inEBSUnit

    createMeteringTraffClsfrACL $inPbbType \
                                $inSorCVLanTag \
                                $inCOSMode \
                                $inACLName \
                                $inMeterName \
                                $inQPNum
}

######################################################################
# Procedure to Create the Meter on the Switch
######################################################################
proc createMeter {inMeterName} {

    global abort_on_error

    if {[catch {
       create meter $inMeterName
    } errMsgText]} {
       error &quot;FAILED: Could not create Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD20K
###########################################################################
proc setDualRateMeterParamsOnBD20800 {inMeterName
                              inCIRValue
                              inCIRUnit
                              inCBSValue
                              inCBSUnit
                              inEIRValue
                              inEIRUnit
                              inEBSValue
                              inEBSUnit} {
    global abort_on_error

    if {[catch {
       set tmpCIRArg &quot;committed-rate        $inCIRValue $inCIRUnit&quot;
       set tmpCBSArg &quot;committed-burst-size  $inCBSValue $inCBSUnit&quot;
       set tmpEIRArg &quot;peak-rate $inEIRValue $inEIRUnit&quot;
       set tmpEBSArg &quot;peak-burst-size $inEBSValue $inEBSUnit&quot;

       config meter $inMeterName $tmpCIRArg $tmpCBSArg $tmpEIRArg $tmpEBSArg
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can&apos;t set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD20K
###########################################################################
proc setSingleRateMeterParamsOnBD20800 {inMeterName
                              inCIRValue
                              inCIRUnit
                              inCBSValue
                              inCBSUnit} {
    global abort_on_error

    if {[catch {
       set tmpCIRArg &quot;committed-rate        $inCIRValue $inCIRUnit&quot;
       set tmpCBSArg &quot;committed-burst-size  $inCBSValue $inCBSUnit&quot;

       config meter $inMeterName $tmpCIRArg $tmpCBSArg
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can&apos;t set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Create ACL Policy to classify and meter ingress traffic
##########################################################################
proc createMeteringTraffClsfrACL {inPbbType
                                  inSorCVLanTag
                                  inCOSMode
                                  inACLName
                                  inMeterName
                                  inQPNum} {
    global abort_on_error

    if {![string compare $inCOSMode &quot;PORT&quot;]} {
       set aclMatchCond  &quot;\&quot; \&quot;&quot;
       set aclRuleAction &quot;\&quot;permit;meter $inMeterName;qosprofile qp$inQPNum\&quot;&quot;
    } else {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          set aclMatchCond  &quot;\&quot;vlan-id $inSorCVLanTag\&quot;&quot;
          set aclRuleAction &quot;\&quot;permit;meter $inMeterName;qosprofile qp$inQPNum\&quot;&quot;
       } else {
          set aclMatchCond  &quot;\&quot;svid $inSorCVLanTag\&quot;&quot;
          set aclRuleAction &quot;\&quot;permit;meter $inMeterName;qosprofile qp$inQPNum\&quot;&quot;
       }
    }

    if {[catch {
       create access-list $inACLName $aclMatchCond $aclRuleAction
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Could not create ACL $inACLName, $errMsgText&quot;
    }
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Deletion on BD2XK Platforms
############################################################################
proc runPBBServiceSorCTagDeleteOnBD2XK {inPbbType
                                        inBVLanName
                                        inSorCVLanName
                                        inISidName
                                        inUniPortSeq
                                        inUniPortList
                                        inBWPNameList
                                        inBWPNameToParamsMap} {
    global abort_on_error

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    validateServiceDeleteParams $inBVLanName \
                                $inSorCVLanName \
                                $inUniPortSeq

    validateISidName $inISidName

    unassignAllUniBWPOnBD20800 $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

    deletePBBServiceSorCTagOnBD2XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inISidName \
                                   $inUniPortSeq
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD20800
############################################################################
proc unassignAllUniBWPOnBD20800 {inUniPortList
                                 inBWPNameList
                                 inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     deleteAllUniBWPAttachment $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

     deleteAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap
}

############################################################################
# Cleanup QoS Objects (Meter, ACL etc.) for a List of BW-Profile(s)
############################################################################
proc deleteAllBWPObjs {inBWPNameList
                       inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currBWPName $inBWPNameList {

        set currMeterName $tmpBWPNameToParamsMap($currBWPName.MeterName)
        set currACLName   $tmpBWPNameToParamsMap($currBWPName.ACLName)

        deleteOneBWPObj $currMeterName $currACLName
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Objects (Meter,ACL)
##########################################################################
proc deleteOneBWPObj {inMeterName
                      inACLName} {

    if {[catch {
      delete access-list $inACLName
    } errMsgText]} {
       puts &quot;FAILED: Could not delete access-list $inACLName, $errMsgText&quot;
    }
    if {[catch {
      delete meter $inMeterName
    } errMsgText]} {
       puts &quot;FAILED: Could not delete meter $inMeterName, $errMsgText&quot;
    }

}



##########################################################################
# Procedure to Cleanup BW-Profile Attachment from all UNI Port(s)
##########################################################################
proc deleteAllUniBWPAttachment {inUniPortList
                                inBWPNameList
                                inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)

        deleteOneUniBWPAttachment $currUniPort $currACLName
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from one UNI Port
##########################################################################
proc deleteOneUniBWPAttachment {inUniPortNum
                                inACLName} {
  global abort_on_error
  if {[catch {
      configure access-list delete $inACLName ports $inUniPortNum ingress
    } errMsgText]} {
       puts &quot;FAILED: Could not delete $inACLName from UNI port $inUniPortNum, $errMsgText&quot;
    }
}
############################################################################
# 1) Modify PBB S-Tagged Service ---&gt; Creation of S/C-VLAN at UNI Ports
############################################################################
proc modifyCreatePBBServiceSorCTag {inPbbType
                                    inPlatformModel
                                    inBVLanName
                                    inSorCVLanName
                                    inSorCTag
                                    inISidName
                                    inISidValue
                                    inUniPortTagStsSeq
                                    inUniPortToBWPNameSeq
                                      inORBWPTupleSeq
                                      inTRBWPTupleSeq} {
    global abort_on_error

    set outRateLimitType &quot;SINGLE_RATE&quot;
    set outUniPortList [list]
    set outBWPNameList [list]
    set outBWPNameToParamsMap(SorCVLanName) $inSorCVLanName

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outUniPortList \
                                     outBWPNameList

    switch $inPlatformModel {
       MODEL_BD10K {
       runPBBServiceSorCTagCreateOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inSorCTag \
                                         $inISidValue \
                                         $inUniPortTagStsSeq
       }
       MODEL_BD12K {
       runPBBServiceSorCTagCreateOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inSorCTag \
                                         $inISidValue \
                                         $inUniPortTagStsSeq
       }
       MODEL_BD20800 {
       if (![expr [string length $inORBWPTupleSeq] &gt; 0]) {
               valInsTRBWPTupleSeq $inTRBWPTupleSeq \
                           outBWPNameToParamsMap
            set outRateLimitType "DUAL_RATE"
       } else {
            valInsORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap
       }

       runPBBServiceSorCTagCreateOnBD2XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inSorCTag \
                                         $inISidName \
                                         $inISidValue \
                                         $inUniPortTagStsSeq \
                                         $outBWPNameList \
                                         $outRateLimitType \
                                         outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

###############################################################################
# 2) Modify PBB S-Tagged Service ---&gt; Deletion of S/C-VLAN from all UNI Ports
###############################################################################
proc modifyDeletePBBServiceSorCTag {inPbbType
                                    inPlatformModel
                                    inBVLanName
                                    inSorCVLanName
                                    inISidName
                                    inUniPortSeq
                                    inUniPortToBWPNameSeq
                                    inORBWPTupleSeq
                                    inTRBWPTupleSeq} {
    global abort_on_error

    set outUniPortList [list]
    set outBWPNameList [list]
    set outBWPNameToParamsMap(BVLanName) $inBVLanName

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outUniPortList \
                                     outBWPNameList

    switch $inPlatformModel {
       MODEL_BD10K {
       runPBBServiceSorCTagDeleteOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inUniPortSeq
       }
       MODEL_BD12K {
       runPBBServiceSorCTagDeleteOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inUniPortSeq
       }
       MODEL_BD20800 {
       if (![expr [string length $inORBWPTupleSeq] &gt; 0]) {
               valRemTRBWPTupleSeq $inTRBWPTupleSeq \
                           outBWPNameToParamsMap
        } else {
            valRemORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap
       }
       runPBBServiceSorCTagDeleteOnBD2XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inISidName \
                                         $inUniPortSeq \
                                         $outUniPortList \
                                         $outBWPNameList \
                                         outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

###############################################################################
# 3) Modify PBB S-Tagged Service ---> Insertion of more UNI Ports to S/C-VLAN
###############################################################################
proc modifyInsertPBBServiceSorCTag {inPbbType
                                    inSorCVLanName
                                    inSorCVLanTag
                                    inUniPortTagStsSeq
                                    inUniPortToBWPNameSeq
                                    inORBWPTupleSeq
                                    inTRBWPTupleSeq} {
    global abort_on_error

    validateServiceInsertParams $inSorCVLanName

    set outRateLimitType &quot;SINGLE_RATE&quot;
    set outUniPortList [list]
    set tmpUniPortList [list]
    set outTagStsList  [list]
    set outBWPNameList [list]
    set outBWPNameToParamsMap(SorCVLanName) $inSorCVLanName

    validateUniPortTagStsTupleSeq $inUniPortTagStsSeq \
                                  outUniPortList \
                                  outTagStsList

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     tmpUniPortList \
                                     outBWPNameList

    if (![expr [string length $inORBWPTupleSeq] &gt; 0]) {
          valInsTRBWPTupleSeq $inTRBWPTupleSeq \
                           outBWPNameToParamsMap
            set outRateLimitType "DUAL_RATE"
    } else {
        valInsORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap
    }

    insAllUnisToSorCVLan $inPbbType \
                         $inSorCVLanName \
                         $outUniPortList \
                         $outTagStsList

    if {[catch {
    assignAllUniBWPOnBD20800 $inPbbType \
                             $inSorCVLanTag \
                             $outUniPortList \
                             $outBWPNameList \
                             $outRateLimitType \
                             outBWPNameToParamsMap
  } result]} {
    cleanAllUnisFromSorCVLan  $inPbbType \
                $inSorCVLanName \
                                $outUniPortList \
                                $outTagStsList
    error "FAILED: Could not add port to svlan/cvlan $inSorCVLanName, $result"
  }
}

###############################################################################
# 4) Modify PBB S-Tagged Service ---&gt; Removal of some UNI Ports from S/C-VLAN
###############################################################################
proc modifyRemovePBBServiceSorCTag {inPbbType
                                    inSorCVLanName
                                    inUniPortSeq
                                    inUniPortToBWPNameSeq
                                    inORBWPTupleSeq
                                    inTRBWPTupleSeq} {
    global abort_on_error

    set outUniPortList [list]
    set outBWPNameList [list]
    set outBWPNameToParamsMap(SorCVLanName) $inSorCVLanName

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outUniPortList \
                                     outBWPNameList

    if (![expr [string length $inORBWPTupleSeq] &gt; 0]) {
               valRemTRBWPTupleSeq $inTRBWPTupleSeq \
                           outBWPNameToParamsMap
    } else {
            valRemORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap
      }

    validateServiceRemoveParams $inSorCVLanName \
                                $inUniPortSeq

    unassignAllUniBWPOnBD20800 $outUniPortList \
                               $outBWPNameList \
                               outBWPNameToParamsMap

    remAllUnisFromSorCVLan $inPbbType \
                           $inSorCVLanName \
                           $inUniPortSeq
}

###############################################################################################
# 3) Modify PBB S-Tagged Service ---> Insertion of bandwidth profile to UNI Ports to S/C-VLAN
###############################################################################################
proc modifyInsertBWPBBServiceSorCTag {inPbbType
                                    inSorCVLanName
                                    inSorCVLanTag
                                    inUniPortTagStsSeq
                                    inUniPortToBWPNameSeq
                                    inORBWPTupleSeq
                                    inTRBWPTupleSeq} {
    global abort_on_error

    validateServiceInsertParams $inSorCVLanName

    set outRateLimitType &quot;SINGLE_RATE&quot;
    set outUniPortList [list]
    set tmpUniPortList [list]
    set outTagStsList  [list]
    set outBWPNameList [list]
    set outBWPNameToParamsMap(SorCVLanName) $inSorCVLanName

    validateUniPortTagStsTupleSeq $inUniPortTagStsSeq \
                                  outUniPortList \
                                  outTagStsList

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     tmpUniPortList \
                                     outBWPNameList

    if (![expr [string length $inORBWPTupleSeq] &gt; 0]) {
          valInsTRBWPTupleSeq $inTRBWPTupleSeq \
                           outBWPNameToParamsMap
            set outRateLimitType "DUAL_RATE"
    } else {
        valInsORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap
    }

    assignAllUniBWPOnBD20800 $inPbbType \
                             $inSorCVLanTag \
                             $outUniPortList \
                             $outBWPNameList \
                             $outRateLimitType \
                             outBWPNameToParamsMap
}

###############################################################################################
# 4) Modify PBB S-Tagged Service ---> Removal of bandwidth profile from UNI Ports from S/C-VLAN
###############################################################################################
proc modifyRemoveBWPBBServiceSorCTag {inPbbType
                                    inSorCVLanName
                                    inUniPortSeq
                                    inUniPortToBWPNameSeq
                                    inORBWPTupleSeq
                                    inTRBWPTupleSeq} {
    global abort_on_error

    set outUniPortList [list]
    set outBWPNameList [list]
    set outBWPNameToParamsMap(SorCVLanName) $inSorCVLanName

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outUniPortList \
                                     outBWPNameList

    if (![expr [string length $inORBWPTupleSeq] &gt; 0]) {
               valRemTRBWPTupleSeq $inTRBWPTupleSeq \
                           outBWPNameToParamsMap
    } else {
            valRemORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap
      }

    validateServiceRemoveParams $inSorCVLanName \
                                $inUniPortSeq

    unassignAllUniBWPOnBD20800 $outUniPortList \
                               $outBWPNameList \
                               outBWPNameToParamsMap
}

############################################################################
# TCL Procedure for PBB based S-Tagged Service Modification on UNI Ports
############################################################################
proc handlePBBServiceSorCTagModify {inModifyAction
                                    inPbbType
                                    inPlatformModel
                                    inBVLanName
                                    inSorCVLanName
                                    inSorCVLanTag
                                    inISidName
                                    inISidValue
                                    inUniPortTagStsSeq
                                    inUniPortSeq
                                    inUniPortToBWPNameSeq
                                    inInsORBWPTupleSeq
                                    inInsTRBWPTupleSeq
                                    inRemORBWPTupleSeq
                                    inRemTRBWPTupleSeq} {
    global abort_on_error
    global isExos

    if {[string match $isExos true]} {
        create log entry &quot;Starting PBB S/C-TAG Service Modification on Switch&quot;
       }

    validatePbbTypePlatformModel $inPbbType $inPlatformModel

    switch $inModifyAction {
       Modify_Create {
       modifyCreatePBBServiceSorCTag $inPbbType \
                                     $inPlatformModel \
                                     $inBVLanName \
                                     $inSorCVLanName \
                                     $inSorCVLanTag \
                                     $inISidName \
                                     $inISidValue \
                                     $inUniPortTagStsSeq \
                                     $inUniPortToBWPNameSeq \
                                     $inInsORBWPTupleSeq \
                                     $inInsTRBWPTupleSeq
       }
       Modify_Delete {
       modifyDeletePBBServiceSorCTag $inPbbType \
                                     $inPlatformModel \
                                     $inBVLanName \
                                     $inSorCVLanName \
                                     $inISidName \
                                     $inUniPortSeq \
                                     $inUniPortToBWPNameSeq \
                                     $inRemORBWPTupleSeq \
                                     $inRemTRBWPTupleSeq
       }
       Modify_Insert {
       modifyInsertPBBServiceSorCTag $inPbbType \
                                     $inSorCVLanName \
                                     $inSorCVLanTag \
                                     $inUniPortTagStsSeq \
                                     $inUniPortToBWPNameSeq \
                                        $inInsORBWPTupleSeq \
                                      $inInsTRBWPTupleSeq
       }
       Modify_Remove {
       modifyRemovePBBServiceSorCTag $inPbbType \
                                     $inSorCVLanName \
                                     $inUniPortSeq \
                                        $inUniPortToBWPNameSeq \
                                        $inRemORBWPTupleSeq \
                                     $inRemTRBWPTupleSeq
       }
       Modify_BW_Insert {
       modifyInsertBWPBBServiceSorCTag $inPbbType \
                                     $inSorCVLanName \
                                     $inSorCVLanTag \
                                     $inUniPortTagStsSeq \
                                     $inUniPortToBWPNameSeq \
                                        $inInsORBWPTupleSeq \
                                      $inInsTRBWPTupleSeq
       }
       Modify_BW_Remove {
       modifyRemoveBWPBBServiceSorCTag $inPbbType \
                                     $inSorCVLanName \
                                     $inUniPortSeq \
                                        $inUniPortToBWPNameSeq \
                                        $inRemORBWPTupleSeq \
                                     $inRemTRBWPTupleSeq
       }
       default {
        error &quot;FAILED: Invalid Service Modify Action Type&quot;
       }
    }

    if {[string match $isExos true]} {
        create log entry &quot;Finished PBB S/C-TAG Service Modification on Switch&quot;
       }
}

########################################################################
# CLI Configuration Scripts Execution STARTING
########################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

handlePBBServiceSorCTagModify $ethServModifyAction \
                              $ethServPbbType \
                              $ethServPlatformModel \
                              $ethServBVLanName \
                              $ethServSorCVLanName \
                              $ethServSorCVLanTag \
                              $ethServISidName \
                              $ethServISidValue \
                              $ethServUniPortTagStsSeq \
                              $ethServUniPortSeq \
                              $ethServUniPortBWPNameSeq \
                              $ethServInsORBWPTupleSeq \
                              $ethServInsTRBWPTupleSeq \
                              $ethServRemORBWPTupleSeq \
                              $ethServRemTRBWPTupleSeq
</content>
  <creator>system</creator>
  <scriptOwner>system</scriptOwner>
  <contexts></contexts>
  <supprotedGroups></supprotedGroups>
  <roles>,Administrator,</roles>
  <auditLogEnabled>false</auditLogEnabled>
  <saveConfigOnExit>false</saveConfigOnExit>
  <menuScope>NONE</menuScope>
  <scriptTimeout>120</scriptTimeout>
  <rollbackScript>Rollback_MOD_PBB_Service</rollbackScript>
  <postprocessScript>Sync_MOD_PBB_Service</postprocessScript>
</script>
