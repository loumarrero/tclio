<!-- This file is generated by system. Do not edit this file. -->
<script name="Modify_EAPSProtected_BVLAN">
<comments>This scripts modifies B-VLANs protected by EAPS domains</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Modification of B-VLAN protection via EAPS domain
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create B-VLAN
# 2.  Assign the B-VLAN to a QoS Profile
# 3.  Add the B-VLAN to a EAPS domain
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Modifies B-VLANs via addition or removal to EAPS domains&quot;
# @SectionStart ( description = &quot;B-VLAN EAPS Protection Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

#############################################################################
# B-VLAN Protection Parameters definitions
#############################################################################

# @VariableFieldLabel (description = &quot;Choose Modification Action-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [Modify_Create,Modify_Delete,Modify_Insert,Modify_Remove,Modify_InsRem])
set var eapsProtModifyActionType Modify_Create

# @VariableFieldLabel (description = &quot;Comma separated 3-Tuples of BVLAN-Name+BVLAN-Tag+BVLAN-QPNum, Create-only&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var eapsProtBVLanNameTagQPSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated B-VLAN Names, INS,REM,DEL-only&quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var eapsProtBVLanNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated protecting Ring Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtRingPortSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated EAPS Domain Names, this is set when EAPS is inserted and removed on same device&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtIRDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated protecting Ring Ports, this is set when EAPS is inserted and removed on same device&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtIRRingPortSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd

################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;FAILED: This script is only supported for Extreme switches.&quot;
    ENDIF
}

##############################################################
# B-VLAN Protection Creation Parameter Validation
##############################################################
proc validateBVLanCreateParams {inBVLanNameTagQPSeq
                                inDomainNameSeq
                                inRingPortSeq} {
    global abort_on_error

    IF (![expr [string length $inBVLanNameTagQPSeq] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name Tag QP List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inRingPortSeq] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Protect Port List is empty.&quot;
    ENDIF
}

##############################################################
# B-VLAN Protection Update Parameter Validation
##############################################################
proc validateBVLanUpdateParams {inBVLanNameSeq
                                inDomainNameSeq
                                inRingPortSeq} {
    global abort_on_error

    IF (![expr [string length $inBVLanNameSeq] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inRingPortSeq] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Protect Port List is empty.&quot;
    ENDIF
}

##############################################################
# BVLAN Protection Update Parameter Validation for shared links
##############################################################
proc validateBVLanUpdateSharedLinkParams {inBVLanNameSeq
                               inDomainNameSeq} {
    global abort_on_error

    IF (![expr [string length $inBVLanNameSeq] &gt; 0]) THEN
       error &quot;FAILED: BVLAN Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 3-Tuple of the form 'B-VLAN-Name+Tag+QP-Num'
################################################################################
proc validateOneBVLanNameTagQPTuple {inNameTagQP
                                     outBVLanName
                                     outBVLanTag
                                     outBVLanQP} {
     global abort_on_error

     upvar $outBVLanName tmpBVLanName
     upvar $outBVLanTag  tmpBVLanTag
     upvar $outBVLanQP   tmpBVLanQP

     set tmpNameTagQPList [split $inNameTagQP '+']

     if {[llength $tmpNameTagQPList] != 3} {
         error &quot;Invalid B-VLAN-Name,Tag,QP-Num Tuple=>$inNameTagQP&quot;
     }
     set tmpBVLanName [lindex $tmpNameTagQPList 0]
     set tmpBVLanTag  [lindex $tmpNameTagQPList 1]
     set tmpBVLanQP   [lindex $tmpNameTagQPList 2]
}

################################################################################
# Procedure to Validate List of 3-Tuples of the form 'B-VLAN-Name+Tag+QP-Num'
################################################################################
proc validateAllBVLanNameTagQPTuples {inNameTagQPSeq
                                      outBVLanNameList
                                      outBVLanTagList
                                      outBVLanQPList} {
     global abort_on_error

     set tmpNameTagQPList [split $inNameTagQPSeq ,]

     if {[llength $tmpNameTagQPList] == 0} {
        error &quot;FAILED: B-VLAN-Name, Tag, QP Tuple List is empty.&quot;
     }

     upvar $outBVLanNameList tmpBVLanNameList
     upvar $outBVLanTagList  tmpBVLanTagList
     upvar $outBVLanQPList   tmpBVLanQPList

     foreach currTuple $tmpNameTagQPList {

        set outBVLanName ""
        set outBVLanTag  ""
        set outBVLanQP   ""

        validateOneBVLanNameTagQPTuple $currTuple \
                                       outBVLanName \
                                       outBVLanTag \
                                       outBVLanQP

        lappend tmpBVLanNameList $outBVLanName
        lappend tmpBVLanTagList  $outBVLanTag
        lappend tmpBVLanQPList   $outBVLanQP
     }
}

###########################################################################
# Procedure to Clean-up a List of B-VLANs on the switch
###########################################################################
proc cleanUpBVLanList {inBVLanNameList} {

    global abort_on_error

    foreach currBVLanName $inBVLanNameList {
       delete bvlan $currBVLanName
    }
}

##########################################################################
# TCL Procedure to Create one B-VLAN
##########################################################################
proc createOneBVLan {inBVLanName
                     inBVLanTag
                     inBVLanQPNum} {
    global abort_on_error

    if {[catch {
       create bvlan $inBVLanName
    } errMsgText]} {
       error &quot;FAILED: Could not create B-VLAN $inBVLanName, $errMsgText&quot;
    }

    if {[catch {
       config bvlan $inBVLanName tag $inBVLanTag
    } errMsgText]} {
       delete bvlan $inBVLanName
       error &quot;FAILED: Invalid Tag $inBVLanTag for B-VLAN $inBVLanName, $errMsgText&quot;
    }

##  if {[catch {
##     config bvlan $inBVLanName qosprofile qp$inBVLanQPNum
##  } errMsgText]} {
##     delete bvlan $inBVLanName
##     error &quot;FAILED: Invalid QoS-Profile for B-VLAN $inBVLanName, $errMsgText&quot;
##  }
##
##  if {[catch {
##     config bvlan ethertype 0x8100
##  } errMsgText]} {
##     delete bvlan $inBVLanName
##     error &quot;FAILED: Invalid Ether-Type for B-VLAN $inBVLanName, $errMsgText&quot;
##  }
}

##########################################################################
# Procedure to Create all B-VLANs
##########################################################################
proc createAllBVLans {inBVLanNameList
                      inBVLanTagList
                      inBVLanQPList} {
    global abort_on_error

    set finishedBVLanNameList [list]

    foreach currBVLanName $inBVLanNameList \
            currBVLanTag  $inBVLanTagList \
            currBVLanQPNum $inBVLanQPList {

        if {[catch {
           createOneBVLan $currBVLanName $currBVLanTag $currBVLanQPNum
        } errMsgText]} {
           cleanUpBVLanList $finishedBVLanNameList
           error &quot;FAILED: Could not create B-VLANs, $errMsgText&quot;
        }

        lappend finishedBVLanNameList $currBVLanName
    }
}

################################################################
# TCL Procedure to delete one B-VLAN
################################################################
proc delOneBVLan {inBVLanName} {

    global abort_on_error

    if {[catch {
       delete bvlan $inBVLanName
    } errMsgText]} {
       puts &quot;FAILED: Could not delete B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

################################################################
# TCL Procedure to delete all B-VLANs
################################################################
proc delAllBVLans {inBVLanNameList} {

    global abort_on_error

    foreach currBVLanName $inBVLanNameList {
       delOneBVLan $currBVLanName
    }
}

##########################################################################
# Procedure to add a List of Ring-Port(s) to one B-VLAN
##########################################################################
proc addPortsToOneBVLan {inBVLanName
                         inRingPortList} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       config bvlan $inBVLanName add ports $inRingPortList tagged
       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI   $permitRingPortsAsUni
       ENDIF
    } errMsgText]} {
       error &quot;FAILED: Could not add Ports $inRingPortList to B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to add a List of Ring-Port(s) to all B-VLAN
##########################################################################
proc addPortsToAllBVLans {inBVLanNameList
                          inRingPortList} {
    global abort_on_error

    set finishedBVLanNameList [list]

    foreach currBVLanName $inBVLanNameList {

        if {[catch {
           addPortsToOneBVLan $currBVLanName $inRingPortList
        } errMsgText]} {
           cleanUpBVLanList $finishedBVLanNameList
           error &quot;FAILED: Could not add Ring-Ports to B-VLAN, $errMsgText&quot;
        }

        lappend finishedBVLanNameList $currBVLanName
    }
}

################################################################
# TCL Procedure to remove EAPS Ring Ports from one B-VLAN
################################################################
proc delPortsFromOneBVLan {inBVLanName
                           inRingPortSeq} {
    global abort_on_error

    IF ([expr [string length $inRingPortSeq] &gt; 0]) THEN
        if {[catch {
           config bvlan $inBVLanName delete ports $inRingPortSeq
        } errMsgText]} {
           puts &quot;FAILED: Could not delete Ports $inRingPortSeq from B-VLAN $inBVLanName, $errMsgText&quot;
        }
    ENDIF
}

################################################################
# TCL Procedure to remove EAPS Ring Ports from all B-VLANs
################################################################
proc delPortsFromAllBVLans {inBVLanNameList inRingPortSeq} {

    global abort_on_error

    foreach currBVLanName $inBVLanNameList {
       delPortsFromOneBVLan $currBVLanName $inRingPortSeq
    }
}

####################################################################
# Procedure to Add Protection of one B-VLAN by one EAPS Domain
####################################################################
proc addOneBVLanProtectByOneDomain {inBVLanName inDomainName} {

   global abort_on_error

   if {[catch {
      config eaps $inDomainName add protect $inBVLanName
   } errMsgText]} {
      error &quot;FAILED: EAPS-Domain $inDomainName cannot protect B-VLAN $inBVLanName, $errMsgText&quot;
   }
}

####################################################################
# Procedure to Add Protection of one B-VLAN by all EAPS Domain(s)
####################################################################
proc addOneBVLanProtectByAllDomains {inBVLanName inDomainNameSeq} {

   global abort_on_error

   set tmpDomainNameList [split $inDomainNameSeq ,]

   foreach currDomainName $tmpDomainNameList {

       addOneBVLanProtectByOneDomain $inBVLanName $currDomainName
   }
}

####################################################################
# Procedure to Add Protection of all B-VLANs by all EAPS Domain(s)
####################################################################
proc addAllBVLansProtectByAllDomains {inBVLanNameList inDomainNameSeq} {

    global abort_on_error

    foreach currBVLanName $inBVLanNameList {

        if {[catch {
           addOneBVLanProtectByAllDomains $currBVLanName $inDomainNameSeq
        } errMsgText]} {
           cleanUpBVLanList $inBVLanNameList
           error &quot;FAILED: B-VLAN Protection, $errMsgText&quot;
        }
    }
}

####################################################################
# Procedure to Remove Protection of one B-VLAN by one EAPS Domain
####################################################################
proc remOneBVLanProtectByOneDomain {inBVLanName
                                    inDomainName} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
        config eaps $inDomainName delete protect $inBVLanName
        regexp {.*deleting.* from the EAPS domain could cause a loop .*} ${CLI.OUT} addWarningMsg
        IF ([info exists addWarningMsg]) THEN
        CLI $permitRingPortsAsUni
        ENDIF
    } errMsgText]} {
        puts &quot;FAILED: Cannot delete protection of B-VLAN $inBVLanName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

####################################################################
# Procedure to Remove Protection of one B-VLAN by all EAPS Domain(s)
####################################################################
proc remOneBVLanProtectByAllDomains {inBVLanName
                                     inDomainNameList} {
    global abort_on_error

    foreach currDomainName $inDomainNameList {
       remOneBVLanProtectByOneDomain $inBVLanName $currDomainName
    }
}

####################################################################
# Procedure to Remove Protection of all B-VLANs by all EAPS Domain(s)
####################################################################
proc remAllBVLansProtectByAllDomains {inBVLanNameList
                                      inDomainNameList} {
    global abort_on_error

    foreach currBVLanName $inBVLanNameList {
       remOneBVLanProtectByAllDomains $currBVLanName \
                                      $inDomainNameList
    }
}

##################################################################
# Protected B-VLAN Modification : Creation of B-VLAN and Protection
##################################################################
proc modifyProtectedBVLanCreate {inBVLanNameTagQPSeq
                                 inDomainNameSeq
                                 inRingPortSeq} {
    global abort_on_error

    validateBVLanCreateParams $inBVLanNameTagQPSeq \
                              $inDomainNameSeq \
                              $inRingPortSeq

    set outBVLanNameList [list]
    set outBVLanTagList  [list]
    set outBVLanQPList   [list]

    validateAllBVLanNameTagQPTuples $inBVLanNameTagQPSeq \
                                    outBVLanNameList \
                                    outBVLanTagList \
                                    outBVLanQPList

    createAllBVLans $outBVLanNameList \
                    $outBVLanTagList \
                    $outBVLanQPList

    addPortsToAllBVLans $outBVLanNameList \
                        $inRingPortSeq

    addAllBVLansProtectByAllDomains $outBVLanNameList \
                                    $inDomainNameSeq
}

##################################################################
# Protected B-VLAN Modification : Deletion of Protection and B-VLAN
##################################################################
proc modifyProtectedBVLanDelete {inBVLanNameSeq
                                 inDomainNameSeq
                                 inRingPortSeq} {
    global abort_on_error

    validateBVLanUpdateParams $inBVLanNameSeq \
                              $inDomainNameSeq \
                              $inRingPortSeq

    set tmpBVLanNameList  [split $inBVLanNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]
    
    delPortsFromAllBVLans $tmpBVLanNameList \
                          $inRingPortSeq

    remAllBVLansProtectByAllDomains $tmpBVLanNameList \
                                    $tmpDomainNameList

    delAllBVLans $tmpBVLanNameList
}

##################################################################
# Protected B-VLAN Modification : Insertion of Protection
##################################################################
proc modifyProtectedBVLanInsert {inBVLanNameSeq
                                 inDomainNameSeq
                                 inRingPortSeq} {
    global abort_on_error

    validateBVLanUpdateParams $inBVLanNameSeq \
                              $inDomainNameSeq \
                              $inRingPortSeq

    set tmpBVLanNameList   [split $inBVLanNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]

    addPortsToAllBVLans $tmpBVLanNameList \
                        $inRingPortSeq

    addAllBVLansProtectByAllDomains $tmpBVLanNameList \
                                    $inDomainNameSeq
}

##################################################################
# Protected B-VLAN Modification : Removal of Protection
##################################################################
proc modifyProtectedBVLanRemove {inBVLanNameSeq
                                 inDomainNameSeq
                                 inRingPortSeq} {
    global abort_on_error

    validateBVLanUpdateSharedLinkParams $inBVLanNameSeq \
                                         $inDomainNameSeq

    set tmpBVLanNameList   [split $inBVLanNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]
    
    delPortsFromAllBVLans $tmpBVLanNameList \
                          $inRingPortSeq

    remAllBVLansProtectByAllDomains $tmpBVLanNameList \
                                    $tmpDomainNameList

}

##################################################################
# Protected BVLAN Modification : Insert and Removal of Protection
##################################################################
proc modifyProtectedBVLanInsertRemove {inVBLanNameSeq
                                inDomainNameSeq
                                inRingPortSeq
                                inIRDomainNameSeq
                                inIRRingPortSeq} {
    global abort_on_error

    modifyProtectedBVLanRemove $inBVLanNameSeq \
                              $inIRDomainNameSeq \
                              $inIRRingPortSeq

    modifyProtectedBVLanInsert $inBVLanNameSeq \
                              $inDomainNameSeq \
                              $inRingPortSeq

}

####################################################################
# Modification of 802.1Q B-VLAN(s) on protecting EAPS Domains
####################################################################
proc modifyEapsProtectedBVLan {inModifyActionType
                               inBVLanNameTagQPSeq
                               inBVLanNameSeq
                               inDomainNameSeq
                               inRingPortSeq
                               inIRDomainNameSeq
                               inIRRingPortSeq} {

    global abort_on_error
    global isExos

    if {[string match $isExos true]} {
        create log entry &quot;Starting B-VLAN EAPS-Protection Modification on Switch&quot;
    }

    switch $inModifyActionType {
      "Modify_Create" {
       modifyProtectedBVLanCreate $inBVLanNameTagQPSeq \
                                  $inDomainNameSeq \
                                  $inRingPortSeq
      }
      "Modify_Delete" {
       modifyProtectedBVLanDelete $inBVLanNameSeq \
                                  $inDomainNameSeq \
                                  $inRingPortSeq
      }
      "Modify_Insert" {
       modifyProtectedBVLanInsert $inBVLanNameSeq \
                                  $inDomainNameSeq \
                                  $inRingPortSeq
      }
      "Modify_Remove" {
       modifyProtectedBVLanRemove $inBVLanNameSeq \
                                  $inDomainNameSeq \
                                  $inRingPortSeq
      }
      "Modify_InsRem" {
      modifyProtectedBVLanInsertRemove $inBVLanNameSeq \
                                      $inDomainNameSeq \
                                      $inRingPortSeq \
                                      $inIRDomainNameSeq \
                                      $inIRRingPortSeq
      }
      default {
       error &quot;FAILED: Unknown B-VLAN Modify Action ($inModifyActionType)&quot;
      }
    }

    if {[string match $isExos true]} {
        create log entry &quot;Finished B-VLAN EAPS-Protection Modification on Switch&quot;
       }
}

############################################################################
# CLI Configuration Starting for B-VLAN Service Modification
############################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

modifyEapsProtectedBVLan $eapsProtModifyActionType \
                         $eapsProtBVLanNameTagQPSeq \
                         $eapsProtBVLanNameSeq \
                         $eapsProtDomainNameSeq \
                         $eapsProtRingPortSeq \
                         $eapsProtIRDomainNameSeq \
                         $eapsProtIRRingPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_MOD_EAPSProtected_BVLAN</rollbackScript>
<postprocessScript>Sync_MOD_EAPSProtected_BVLAN</postprocessScript>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
