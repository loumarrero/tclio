<!-- This file is generated by system. Do not edit this file. -->
<script name="Rollback_CRE_EAPSProtected_BVLAN">
<comments>This scripting.Script rollsback protected B-VLANs from EAPS Domains</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Rollback of protected B-VLAN creation from EAPS Domain
#############################################################################
# Revision      : 1.0
# Last Updated  : 09-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create B-VLAN
# 2.  Assign the B-VLAN to a QoS Profile
# 3.  Add the B-VLAN to a EAPS domain
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Rollsback protected B-VLAN create from EAPS Domains&quot;
# @SectionStart (description = &quot;Protected B-VLAN Create-Rollback Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

#############################################################################
# B-VLAN Protection Parameters definitions
#############################################################################

# @VariableFieldLabel (description = &quot;Comma Listed BVLAN_Name+BVLAN_Tag+BVLAN_QP&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtBVLanNameTagQPSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed Protecting Ring Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtRingPortSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# TCL Procedure for B-VLAN Protection Parameter Validation
############################################################################
proc validateBVLanProtectParams {inBVLanNameTagQPSeq
                                 inDomainNameSeq
                                 inProtectPortSeq} {
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
    
    IF (![expr [string length $inBVLanNameTagQPSeq] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name Tag QP List is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inProtectPortSeq] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Protect Port List is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 3-Tuple of the form 'B-VLAN-Name+Tag+QP-Num'
################################################################################
proc validateBVLanNameTagQPTuple {inNameTagQP
                                  outBVLanName
                                  outBVLanTag
                                  outBVLanQP} {

     upvar $outBVLanName tmpBVLanName
     upvar $outBVLanTag  tmpBVLanTag
     upvar $outBVLanQP   tmpBVLanQP

     set tmpNameTagQPList [split $inNameTagQP '+']

     if {[llength $tmpNameTagQPList] != 3} {
         error &quot;Invalid BVLAN-Name,Tag,QP-Num Tuple=>$inNameTagQP&quot;
     }
     set tmpBVLanName [lindex $tmpNameTagQPList 0]
     set tmpBVLanTag  [lindex $tmpNameTagQPList 1]
     set tmpBVLanQP   [lindex $tmpNameTagQPList 2]
}

################################################################################
# Procedure to Validate List of 3-Tuples of the form 'B-VLAN-Name+Tag+QP-Num'
################################################################################
proc validateBVLanNameTagQPTupleSeq {inNameTagQPSeq
                                     outBVLanNameList
                                     outBVLanTagList
                                     outBVLanQPList} {

     set tmpNameTagQPList [split $inNameTagQPSeq ,]

     if {[llength $tmpNameTagQPList] == 0} {
        error &quot;FAILED: BVLAN-Name, Tag, QP Tuple List is empty.&quot;
     }

     upvar $outBVLanNameList tmpBVLanNameList
     upvar $outBVLanTagList  tmpBVLanTagList
     upvar $outBVLanQPList   tmpBVLanQPList

     foreach currTuple $tmpNameTagQPList {

        set outBVLanName ""
        set outBVLanTag  ""
        set outBVLanQP   ""

        validateBVLanNameTagQPTuple $currTuple \
                                    outBVLanName \
                                    outBVLanTag \
                                    outBVLanQP

        lappend tmpBVLanNameList $outBVLanName
        lappend tmpBVLanTagList  $outBVLanTag
        lappend tmpBVLanQPList   $outBVLanQP
     }
}

##########################################################################
# TCL Procedures for B-VLAN removal from EAPS Domain Ring Ports
# and subsequent deletion of the B-VLAN
##########################################################################
proc remProtectOneBVLanFromOneDomain {inBVLanName inDomainName} {

    if {[catch {
        config eaps $inDomainName delete protected $inBVLanName
    } errMsgText]} { 
        puts &quot;FAILED: Cannot delete protection of B-VLAN $inBVLanName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

proc remProtectOneBVLanFromAllDomain {inBVLanName inDomainNameList} {

    foreach currDomainName $inDomainNameList {
       remProtectOneBVLanFromOneDomain $inBVLanName $currDomainName
    }
}

proc delPortsFromOneBVLan {inBVLanName inRingPortSeq} {

    if {[catch {
       config bvlan $inBVLanName delete ports $inRingPortSeq
    } errMsgText]} { 
       puts &quot;FAILED: Could not delete Ports $inRingPortSeq from B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

proc delOneBVLan {inBVLanName} {

    if {[catch {
       delete bvlan $inBVLanName
    } errMsgText]} { 
       puts &quot;FAILED: Could not delete B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

proc remProtectAllBVLansFromAllDomain {inBVLanNameList inDomainNameList} {

    foreach currBVLanName $inBVLanNameList {
       remProtectOneBVLanFromAllDomain $currBVLanName $inDomainNameList
    }
}

proc delPortsFromAllBVLans {inBVLanNameList inRingPortSeq} {

    foreach currBVLanName $inBVLanNameList {
       delPortsFromOneBVLan $currBVLanName $inRingPortSeq
    }
}

proc delAllBVLans {inBVLanNameList} {

    foreach currBVLanName $inBVLanNameList {
       delOneBVLan $currBVLanName
    }
}

##################################################################
# TCL Procedure for Rollback of B-VLAN protection from EAPS Domain
# after validating all parameters
##################################################################
proc rollbackProtectedBVLanCreate {inBVLanNameTagQPSeq
                                   inDomainNameSeq
                                   inProtectPortSeq} {
	
	global isExos
	
	if {[string match $isExos true]} {
    	create log entry &quot;START-Create-Rollback B-VLAN Protection from EAPS&quot;
	}
	
    validateBVLanProtectParams $inBVLanNameTagQPSeq \
                               $inDomainNameSeq \
                               $inProtectPortSeq

    set outBVLanNameList  [list]
    set outBVLanTagList   [list]
    set outBVLanQPList    [list]
    set outDomainNameList [split $inDomainNameSeq ,]

    validateBVLanNameTagQPTupleSeq $inBVLanNameTagQPSeq \
                                   outBVLanNameList \
                                   outBVLanTagList \
                                   outBVLanQPList
    
    remProtectAllBVLansFromAllDomain $outBVLanNameList \
                                     $outDomainNameList
    
    delPortsFromAllBVLans $outBVLanNameList \
                          $inProtectPortSeq
    
    delAllBVLans $outBVLanNameList

	if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Create-Rollback B-VLAN Protection from EAPS&quot;
	}
}

############################################################################
# CLI Configuration Starting
############################################################################
setCliErrorHandling $abortOnCliError

rollbackProtectedBVLanCreate $eapsProtBVLanNameTagQPSeq \
                             $eapsProtDomainNameSeq \
                             $eapsProtRingPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
