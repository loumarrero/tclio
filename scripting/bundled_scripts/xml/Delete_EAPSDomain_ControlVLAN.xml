<!-- This file is generated by system. Do not edit this file. -->
<script name="Delete_EAPSDomain_ControlVLAN">
<comments>This script deletes EAPS Domain and its Control VLAN</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : EAPS Domain and Control VLAN Deletion
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose :
#############################################################################
# 1) Delete EAPS Domain
# 2) Delete Control VLAN
#####################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Deletes EAPS domain and its Control VLAN.&quot;
# @SectionStart (description = &quot;EAPS Domain and Control VLAN Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;List of comma separated EAPS Domain Names&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var eapsDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;List of comma separated Control VLAN Names&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var eapsControlVLanNameSeq &quot;&quot;

#
# @SectionEnd
# @MetaDataEnd
################################################################################
################################################################################
#                                    CONFIGURATION DETAIL
################################################################################
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#####################################################################
# TCL Procedure for EAPS Domain Parameter Validation
#####################################################################
proc validateEapsDomainParams {inDomainNameSeq inCtrlVLanNameSeq} {

    global abort_on_error
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
    
    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inCtrlVLanNameSeq] &gt; 0]) THEN
       error &quot;FAILED: Control VLAN Name List is empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure for EAPS Domain and Control VLAN Deletion
############################################################################
proc deleteEapsDomainCtrlVLanSeq {inDomainNameSeq inCtrlVLanNameSeq} {

    global abort_on_error
    set delDomainNameList   [split $inDomainNameSeq ,]
    set delCtrlVLanNameList [split $inCtrlVLanNameSeq ,]

    foreach currDomainName $delDomainNameList {

       if {[catch {
          disable eaps $currDomainName
       } result ]} { 
          error &quot;FAILED: Cannot disable EAPS Domain $currDomainName $result&quot;
       }
    }

    foreach currVLanName $delCtrlVLanNameList {

       if {[catch {
          delete vlan $currVLanName
       } result ]} { 
          error &quot;FAILED: Cannot delete Control VLAN $currVLanName $result&quot;
       }
    }

    foreach currDomainName $delDomainNameList {

       if {[catch {
          delete eaps $currDomainName
       } result ]} { 
          error &quot;FAILED: Cannot delete EAPS Domain $currDomainName $result&quot;
       }
    }
}

##################################################################
# TCL Procedure for EAPS Domain and Control VLAN deletion
##################################################################
proc handleEapsDomainCtrlVLanDelete {inDomainNameSeq inCtrlVLanNameSeq} {

    global abort_on_error
    global isExos
    
    if {[string match $isExos true]} {
        create log entry &quot;Starting EAPS Domain and Control VLAN Deletion on Switch&quot;
       }
       
    validateEapsDomainParams $inDomainNameSeq $inCtrlVLanNameSeq

    deleteEapsDomainCtrlVLanSeq $inDomainNameSeq $inCtrlVLanNameSeq

    if {[string match $isExos true]} {
        create log entry &quot;Finished EAPS Domain and Control VLAN Deletion on Switch&quot;
       }
}

############################################################################
# CLI Configuration Starting on the Switch
############################################################################
setCliErrorHandling $abortOnCliError

handleEapsDomainCtrlVLanDelete $eapsDomainNameSeq $eapsControlVLanNameSeq

################################################################################
# Sync the device so that deleted EAPS Domain is not discovered
################################################################################
PerformSync -device $deviceIP -scope EapsDomain
PerformSync -device $deviceIP -scope VLAN</content>

<contexts></contexts>
<supprotedGroups>,ALL,</supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<menuScope>TOOLS</menuScope>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
