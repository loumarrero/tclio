<!-- This file is generated by system. Do not edit this file. -->
<script name="Rollback_MOD_PB_Service_Port">
<comments>This script Rollsback PB Service Modification at UNI Port(s)</comments>
<content>#@MetaDataStart
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Rollback PB Service Modification
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:  This script Rollsback a PB Service modification at UNI Port(s)
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;To Rollback a PB Service Modify at UNI Ports&quot;
# @SectionStart (description = &quot;VMAN&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;Switch-Platform&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes,
#   validValues = [MODEL_BD88KSSSF,MODEL_BD10K,MODEL_BD12K,MODEL_BD12804R,MODEL_BD20800])
set var ethServPlatformModel &quot;&quot;

# @VariableFieldLabel (description = &quot;Choose Modification Action-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [Modify_Insert,Modify_Remove])
set var ethServModifyActionType Modify_Insert

# @VariableFieldLabel (description = &quot;802.1ad VMAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServVManName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ad VMAN Tag&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var ethServVManSTag &quot;&quot;

# @VariableFieldLabel (description = &quot;List of comma separated UNI Ports&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var ethServUniPortSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+BWP_Name&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServUniPortBWPNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServInsORBWPTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServInsTRBWPTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServRemORBWPTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServRemTRBWPTupleSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd
################################################################################

proc valInsBWPORCreParams {inMeterName
                           inCIRValue
                           inCIRUnit
                           inCBSValue
                           inCBSUnit} {
    global abort_on_error

    IF (![expr [string length $inMeterName] &gt; 0]) THEN
       error &quot;FAILED: Meter Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inCIRValue] &gt; 0]) THEN
       error &quot;FAILED: CIR value is empty.&quot;
    ENDIF

    IF (![expr [string length $inCIRUnit] &gt; 0]) THEN
       error &quot;FAILED: CIR unit is empty.&quot;
    ENDIF

    IF (![expr [string length $inCBSValue] &gt; 0]) THEN
       error &quot;FAILED: CBS value is empty.&quot;
    ENDIF

    IF (![expr [string length $inCBSUnit] &gt; 0]) THEN
       error &quot;FAILED: CBS unit is empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure To Validate Bandwidth-Profile Two-Rate Create Parameters
############################################################################
proc valInsBWPTRCreParams {inMeterName
                           inCIRValue
                           inCIRUnit
                           inCBSValue
                           inCBSUnit
                           inEIRValue
                           inEIRUnit
                           inEBSValue
                           inEBSUnit} {
    global abort_on_error

    valInsBWPORCreParams $inMeterName \
                         $inCIRValue \
                         $inCIRUnit \
                         $inCBSValue \
                         $inCBSUnit

    IF (![expr [string length $inEIRValue] &gt; 0]) THEN
       error &quot;FAILED: EIR value is empty.&quot;
    ENDIF

    IF (![expr [string length $inEIRUnit] &gt; 0]) THEN
       error &quot;FAILED: EIR unit is empty.&quot;
    ENDIF

    IF (![expr [string length $inEBSValue] &gt; 0]) THEN
       error &quot;FAILED: EBS value is empty.&quot;
    ENDIF

    IF (![expr [string length $inEBSUnit] &gt; 0]) THEN
       error &quot;FAILED: EBS unit is empty.&quot;
    ENDIF
}

###########################################################################
# Procedure to validate Bandwidth Lower-Limit Units
###########################################################################
proc valInsBWLLUnits {inCIRUnit
                      inCBSUnit
                      outSwCIRUnit
                      outSwCBSUnit} {

    global abort_on_error

    upvar  $outSwCIRUnit tmpSwCIRUnit
    upvar  $outSwCBSUnit tmpSwCBSUnit

    switch $inCIRUnit {
       "CIRU_KBPS" {set tmpSwCIRUnit "Kbps"}
       "CIRU_MBPS" {set tmpSwCIRUnit "Mbps"}
       "CIRU_GBPS" {set tmpSwCIRUnit "Gbps"}
       default {
        error &quot;FAILED: Invalid CIR Unit_Type=>$inCIRUnit&quot;
       }
    }
    switch $inCBSUnit {
       "CBSU_KB" {set tmpSwCBSUnit "Kb"}
       "CBSU_MB" {set tmpSwCBSUnit "Mb"}
       "CBSU_GB" {set tmpSwCBSUnit "Gb"}
       default {
        error &quot;FAILED: Invalid CBS Unit_Type=>$inCBSUnit&quot;
       }
    }
}

###########################################################################
# Procedure to validate Bandwidth Upper-Limit Units
###########################################################################
proc valInsBWULUnits {inEIRUnit
                      inEBSUnit
                      outSwEIRUnit
                      outSwEBSUnit} {

    global abort_on_error

    upvar  $outSwEIRUnit tmpSwEIRUnit
    upvar  $outSwEBSUnit tmpSwEBSUnit

    switch $inEIRUnit {
       "EIRU_KBPS" {set tmpSwEIRUnit "Kbps"}
       "EIRU_MBPS" {set tmpSwEIRUnit "Mbps"}
       "EIRU_GBPS" {set tmpSwEIRUnit "Gbps"}
       default {
        error &quot;FAILED: Invalid EIR Unit_Type=>$inEIRUnit&quot;
       }
    }
    switch $inEBSUnit {
       "EBSU_KB" {set tmpSwEBSUnit "Kb"}
       "EBSU_MB" {set tmpSwEBSUnit "Mb"}
       "EBSU_GB" {set tmpSwEBSUnit "Gb"}
       default {
        error &quot;FAILED: Invalid EBS Unit_Type=>$inEBSUnit&quot;
       }
    }
}

######################################################################
# Procedure to Validate Out-Of-Profile Action types for Platforms
# BD8800, SummitStack and Summit-Family
######################################################################
proc valInsOROOPAction {inOOPAction
                        outSwOOPAction} {

    global abort_on_error
    upvar  $outSwOOPAction tmpSwOOPAction

    switch $inOOPAction {
       "OOPACT_DROP"    {set tmpSwOOPAction "drop"}
       "OOPACT_SETPRCD" {set tmpSwOOPAction "set-drop-precedence"}
       default {
        error &quot;FAILED: Invalid Out-Of-Profile Action=>$inOOPAction&quot;
       }
    }
}

######################################################################
# Procedure to Validate Scheduling types
######################################################################
proc valInsLQoSSchedType {inSchedType
                          outSwSchedType} {

    global abort_on_error
    upvar  $outSwSchedType tmpSwSchedType

    switch $inSchedType {
       "SCHEDT_SPR" {set tmpSwSchedType "strict-priority"}
       "SCHEDT_WRR" {set tmpSwSchedType "wrr"}
       default {
        error &quot;FAILED: Invalid Scheduling_Type=>$inSchedType&quot;
       }
    }
}

###########################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI_Port+BWP_Name'
###########################################################################
proc validateUniPortBWPTuple {inUniPortBWPName
                              outUniPortNum
                              outBWPName} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outBWPName    tmpBWPName

     set tmpUniBWPList [split $inUniPortBWPName '+']

     if {[llength $tmpUniBWPList] != 2} {
         error &quot;Invalid UNI-Port, BWP-Name Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniBWPList 0]
     set tmpBWPName    [lindex $tmpUniBWPList 1]
}

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple => 'BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum'
###########################################################################
proc valInsORBWPTuple {inBWPNameParamsTuple
                       outBWPName
                       outCOSMode
                       outMeterName
                       outCIRValue
                       outCIRUnit
                       outCBSValue
                       outCBSUnit
                       outOOPAction
                       outSchedType
                       outACLName
                       outQPNum} {

     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outCIRValue   tmpCIRValue
     upvar $outCIRUnit    tmpCIRUnit
     upvar $outCBSValue   tmpCBSValue
     upvar $outCBSUnit    tmpCBSUnit
     upvar $outOOPAction  tmpOOPAction
     upvar $outSchedType  tmpSchedType
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 10} {
         error &quot;Invalid BWP-Attrs Tuple($inBWPNameParamsTuple).&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpCIRValue   [lindex $tmpBWPAttrList 2]
     set tmpCIRUnit    [lindex $tmpBWPAttrList 3]
     set tmpCBSValue   [lindex $tmpBWPAttrList 4]
     set tmpCBSUnit    [lindex $tmpBWPAttrList 5]
     set tmpOOPAction  [lindex $tmpBWPAttrList 6]
     set tmpSchedType  [lindex $tmpBWPAttrList 7]
     set tmpACLName    [lindex $tmpBWPAttrList 8]
     set tmpQPNum      [lindex $tmpBWPAttrList 9]

     set cnvSwCIRUnit   ""
     set cnvSwCBSUnit   ""
     set cnvSwOOPAction ""

     valInsBWPORCreParams $tmpMeterName \
                          $tmpCIRValue \
                          $tmpCIRUnit \
                          $tmpCBSValue \
                          $tmpCBSUnit

     valInsBWLLUnits $tmpCIRUnit $tmpCBSUnit cnvSwCIRUnit cnvSwCBSUnit

     valInsOROOPAction $tmpOOPAction cnvSwOOPAction

     valInsLQoSSchedType $tmpSchedType cnvSwSchedType

     set tmpCIRUnit   $cnvSwCIRUnit
     set tmpCBSUnit   $cnvSwCBSUnit
     set tmpOOPAction $cnvSwOOPAction
     set tmpSchedType $cnvSwSchedType
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum'
###########################################################################
proc valInsTRBWPTuple {inBWPNameParamsTuple
                       outBWPName
                       outCOSMode
                       outMeterName
                       outCIRValue
                       outCIRUnit
                       outCBSValue
                       outCBSUnit
                       outEIRValue
                       outEIRUnit
                       outEBSValue
                       outEBSUnit
                       outSchedType
                       outACLName
                       outQPNum} {

     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outCIRValue   tmpCIRValue
     upvar $outCIRUnit    tmpCIRUnit
     upvar $outCBSValue   tmpCBSValue
     upvar $outCBSUnit    tmpCBSUnit
     upvar $outEIRValue   tmpEIRValue
     upvar $outEIRUnit    tmpEIRUnit
     upvar $outEBSValue   tmpEBSValue
     upvar $outEBSUnit    tmpEBSUnit
     upvar $outSchedType  tmpSchedType
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 13} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpCIRValue   [lindex $tmpBWPAttrList 2]
     set tmpCIRUnit    [lindex $tmpBWPAttrList 3]
     set tmpCBSValue   [lindex $tmpBWPAttrList 4]
     set tmpCBSUnit    [lindex $tmpBWPAttrList 5]
     set tmpEIRValue   [lindex $tmpBWPAttrList 6]
     set tmpEIRUnit    [lindex $tmpBWPAttrList 7]
     set tmpEBSValue   [lindex $tmpBWPAttrList 8]
     set tmpEBSUnit    [lindex $tmpBWPAttrList 9]
     set tmpSchedType  [lindex $tmpBWPAttrList 10]
     set tmpACLName    [lindex $tmpBWPAttrList 11]
     set tmpQPNum      [lindex $tmpBWPAttrList 12]

     set cnvSwCIRUnit   ""
     set cnvSwCBSUnit   ""
     set cnvSwEIRUnit   ""
     set cnvSwEBSUnit   ""
     set cnvSwSchedType ""

     valInsBWPTRCreParams $tmpMeterName \
                          $tmpCIRValue \
                          $tmpCIRUnit \
                          $tmpCBSValue \
                          $tmpCBSUnit
                          $tmpEIRValue \
                          $tmpEIRUnit \
                          $tmpEBSValue \
                          $tmpEBSUnit

     valInsBWLLUnits $tmpCIRUnit $tmpCBSUnit cnvSwCIRUnit cnvSwCBSUnit

     valInsBWULUnits $tmpEIRUnit $tmpEBSUnit cnvSwEIRUnit cnvSwEBSUnit

     valInsLQoSSchedType $tmpSchedType cnvSwSchedType

     set tmpCIRUnit   $cnvSwCIRUnit
     set tmpCBSUnit   $cnvSwCBSUnit
     set tmpEIRUnit   $cnvSwEIRUnit
     set tmpEBSUnit   $cnvSwEBSUnit
     set tmpSchedType $cnvSwSchedType
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form 'UNI_Port+BWP_Name'
#############################################################################
proc validateUniPortToBWPNameTupleSeq {inUniPortToBWPNameSeq
                                       outUniPortList
                                       outBWPNameList} {
     global abort_on_error

     if {![string length $inUniPortToBWPNameSeq]} {
        return
     }

     set tmpUniPortBWPNameList [split $inUniPortToBWPNameSeq ,]

     if {![llength $tmpUniPortBWPNameList]} {
        error &quot;UNI-Port, BWP-Name Tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outBWPNameList tmpBWPNameList

     foreach currTuple $tmpUniPortBWPNameList {

        set outUniPortNum ""
        set outBWPName    ""

        validateUniPortBWPTuple $currTuple \
                                outUniPortNum \
                                outBWPName

        lappend tmpUniPortList $outUniPortNum
        lappend tmpBWPNameList $outBWPName
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Name:CIR_V+CIR_U+CBS_V+CBS_U+SCH_T'
###########################################################################
proc valInsORBWPTupleSeq {inBWPNameToParamsSeq
                          outBWPNameToParamsMap} {

     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outCIRValue   ""
        set outCIRUnit    ""
        set outCBSValue   ""
        set outCBSUnit    ""
        set outOOPAction  ""
        set outSchedType  ""
        set outACLName    ""
        set outQPNum      ""

        valInsORBWPTuple $currTuple \
                         outBWPName \
                         outCOSMode \
                         outMeterName \
                         outCIRValue \
                         outCIRUnit \
                         outCBSValue \
                         outCBSUnit \
                         outOOPAction \
                         outSchedType \
                         outACLName \
                         outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.CIRValue)   $outCIRValue
        set tmpBWPNameToParamsMap($outBWPName.CIRUnit)    $outCIRUnit
        set tmpBWPNameToParamsMap($outBWPName.CBSValue)   $outCBSValue
        set tmpBWPNameToParamsMap($outBWPName.CBSUnit)    $outCBSUnit
        set tmpBWPNameToParamsMap($outBWPName.OOPAction)  $outOOPAction
        set tmpBWPNameToParamsMap($outBWPName.SchedType)  $outSchedType
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum'
###########################################################################
proc valInsTRBWPTupleSeq {inBWPNameToParamsSeq
                          outBWPNameToParamsMap} {

     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outCIRValue   ""
        set outCIRUnit    ""
        set outCBSValue   ""
        set outCBSUnit    ""
        set outEIRValue   ""
        set outEIRUnit    ""
        set outEBSValue   ""
        set outEBSUnit    ""
        set outSchedType  ""
        set outACLName    ""
        set outQPNum      ""

        valInsTRBWPTuple $currTuple \
                         outBWPName \
                         outCOSMode \
                         outMeterName \
                         outCIRValue \
                         outCIRUnit \
                         outCBSValue \
                         outCBSUnit \
                         outEIRValue \
                         outEIRUnit \
                         outEBSValue \
                         outEBSUnit \
                         outSchedType \
                         outACLName \
                         outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.CIRValue)   $outCIRValue
        set tmpBWPNameToParamsMap($outBWPName.CIRUnit)    $outCIRUnit
        set tmpBWPNameToParamsMap($outBWPName.CBSValue)   $outCBSValue
        set tmpBWPNameToParamsMap($outBWPName.CBSUnit)    $outCBSUnit
        set tmpBWPNameToParamsMap($outBWPName.EIRValue)   $outEIRValue
        set tmpBWPNameToParamsMap($outBWPName.EIRUnit)    $outEIRUnit
        set tmpBWPNameToParamsMap($outBWPName.EBSValue)   $outEBSValue
        set tmpBWPNameToParamsMap($outBWPName.EBSUnit)    $outEBSUnit
        set tmpBWPNameToParamsMap($outBWPName.SchedType)  $outSchedType
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

######################################################################
# Procedure to Create the Meter on the Switch
######################################################################
proc createMeter {inMeterName} {

    global abort_on_error

    if {[catch {
       create meter $inMeterName
    } errMsgText]} {
       error &quot;FAILED: Could not create Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD8800/SummitStack/SummitFamily
###########################################################################
proc setMeterParamsOnBD88KSSSF {inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inOOPAction} {
    global abort_on_error

    set CIR_Args    "committed-rate $inCIRValue $inCIRUnit"
    set CBS_Args    "max-burst-size $inCBSValue $inCBSUnit"
    set OUT_Actions "out-actions $inOOPAction"

    if {[catch {
       config meter $inMeterName $CIR_Args $CBS_Args $OUT_Actions
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD20K for dual rate type
###########################################################################
proc setDualRateMeterParamsOnBD20800 {inMeterName
                              inCIRValue
                              inCIRUnit
                              inCBSValue
                              inCBSUnit
                              inEIRValue
                              inEIRUnit
                              inEBSValue
                              inEBSUnit} {
    global abort_on_error

    if {[catch {
       set tmpCIRArg "committed-rate        $inCIRValue $inCIRUnit"
       set tmpCBSArg "committed-burst-size  $inCBSValue $inCBSUnit"
       set tmpEIRArg "peak-rate $inEIRValue $inEIRUnit"
       set tmpEBSArg "peak-burst-size $inEBSValue $inEBSUnit"

       config meter $inMeterName $tmpCIRArg $tmpCBSArg $tmpEIRArg $tmpEBSArg
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD20K for single rate
###########################################################################
proc setSingleRateMeterParamsOnBD20800 {inMeterName
                              inCIRValue
                              inCIRUnit
                              inCBSValue
                              inCBSUnit} {
    global abort_on_error

    if {[catch {
       set tmpCIRArg "committed-rate        $inCIRValue $inCIRUnit"
       set tmpCBSArg "committed-burst-size  $inCBSValue $inCBSUnit"

       config meter $inMeterName $tmpCIRArg $tmpCBSArg
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}


##########################################################################
# Procedure to Create ACL Policy to classify and meter ingress traffic
##########################################################################
proc createMeteringTraffClsfrACL {inACLName
                                  inMeterName
                                  inQPNum} {
    global abort_on_error

    set aclMatchCond  "\" \""
    set aclRuleAction "\"permit;meter $inMeterName;qosprofile qp$inQPNum\""

    if {[catch {
       create access-list $inACLName $aclMatchCond $aclRuleAction
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Could not create ACL $inACLName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Cleanup BW-Profile Objects (Meter,ACL)
##########################################################################
proc cleanOneBWPObj {inMeterName
                     inACLName} {

    delete access-list $inACLName
    delete meter $inMeterName
}

############################################################################
# Bandwidth Profile Creation on BD8800, SummitStack and Summit-Familiy
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
proc createOneBWPObjsOnBD88KSSSF {inVManId
                                  inMeterName
                                  inCIRValue
                                  inCIRUnit
                                  inCBSValue
                                  inCBSUnit
                                  inOOPAction
                                  inACLName
                                  inQPNum} {
    global abort_on_error

    createMeter $inMeterName

    setMeterParamsOnBD88KSSSF $inMeterName \
                              $inCIRValue \
                              $inCIRUnit \
                              $inCBSValue \
                              $inCBSUnit \
                              $inOOPAction

    createMeteringTraffClsfrACL $inACLName \
                                $inMeterName \
                                $inQPNum
}

############################################################################
# Bandwidth Profile Creation on BD20800 for Dual rate type
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
############################################################################
proc createOneDualRateBWPObjsOnBD20800 {inVManId
                                inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inEIRValue
                                inEIRUnit
                                inEBSValue
                                inEBSUnit
                                inACLName
                                inQPNum} {
    global abort_on_error

    createMeter $inMeterName

    setDualRateMeterParamsOnBD20800 $inMeterName \
                            $inCIRValue \
                            $inCIRUnit \
                            $inCBSValue \
                            $inCBSUnit \
                            $inEIRValue \
                            $inEIRUnit \
                            $inEBSValue \
                            $inEBSUnit

    createMeteringTraffClsfrACL $inACLName \
                                $inMeterName \
                                $inQPNum
}

############################################################################
# Bandwidth Profile Creation on BD20800 for Single rate type
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
############################################################################
proc createOneSingleRateBWPObjsOnBD20800 {inVManId
                                inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inACLName
                                inQPNum} {
    global abort_on_error

    createMeter $inMeterName

    setSingleRateMeterParamsOnBD20800 $inMeterName \
                            $inCIRValue \
                            $inCIRUnit \
                            $inCBSValue \
                            $inCBSUnit

    createMeteringTraffClsfrACL $inACLName \
                                $inMeterName \
                                $inQPNum
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from one UNI Port
##########################################################################
proc cleanOneUniBWPAttachment {inUniPortNum
                               inACLName} {
	global abort_on_error
    configure access-list delete $inACLName ports $inUniPortNum ingress
}

############################################################################
# Bandwidth Profile attachment on BD8800, SummitStack and Summit-Familiy
############################################################################
# 1) Configure ACL on a UNI-Port
############################################################################
proc attachOneUniBWPOnBD88KSSSF {inVManId
                                 inUniPortNum
                                 inACLName
                                 inQPNum} {
    global abort_on_error

    if {[catch {
       configure access-list add $inACLName first ports $inUniPortNum ingress
    } errMsgText]} { 	
      set regexprefix {.*Error: ACL install operation failed - qosprofile QP}
      set regexsuffix { not yet created.*}
      set refexfinal $regexprefix$inQPNum$regexsuffix
 
      regexp $refexfinal $errMsgText addWarningMsg 
       IF ([info exists addWarningMsg]) THEN
       	create qosprofile QP$inQPNum
       	configure access-list add $inACLName first ports $inUniPortNum ingress
       ELSE
         error "FAILED: Could not Add $inUniPortNum to $inACLName, $errMsgText"
       ENDIF
    }
}

############################################################################
# Bandwidth Profile attachment on BD20800
############################################################################
# 1) Configure ACL on a UNI-Port
############################################################################
proc attachOneUniBWPOnBD20800 {inVManId
                               inUniPortNum
                               inACLName} {
    global abort_on_error

    if {[catch {
       configure access-list add $inACLName first ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not Add $inUniPortNum to $inACLName, $errMsgText&quot;
    }
}

############################################################################
# Cleanup QoS Objects (Meter, ACL etc.) for a List of BW-Profile(s)
############################################################################
proc cleanAllBWPObjs {inBWPNameList
                      inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currBWPName $inBWPNameList {

        cleanOneBWPObj $tmpBWPNameToParamsMap($currBWPName.MeterName) \
                       $tmpBWPNameToParamsMap($currBWPName.ACLName)
     }
}

############################################################################
# All Bandwidth Profile Creation on BD8800, SummitStack and Summit-Familiy
############################################################################
proc createAllBWPObjsOnBD88KSSSF {inVManId
                                  inBWPNameList
                                  inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedBWPNameList [list]

     foreach currBWPName $inBWPNameList {

        if {[catch {
           createOneBWPObjsOnBD88KSSSF \
              $inVManId \
              $tmpBWPNameToParamsMap($currBWPName.MeterName) \
              $tmpBWPNameToParamsMap($currBWPName.CIRValue) \
              $tmpBWPNameToParamsMap($currBWPName.CIRUnit) \
              $tmpBWPNameToParamsMap($currBWPName.CBSValue) \
              $tmpBWPNameToParamsMap($currBWPName.CBSUnit) \
              $tmpBWPNameToParamsMap($currBWPName.OOPAction) \
              $tmpBWPNameToParamsMap($currBWPName.ACLName) \
              $tmpBWPNameToParamsMap($currBWPName.QPNum)
        } errMsgText]} {

           cleanAllBWPObjs $finishedBWPNameList tmpBWPNameToParamsMap

           error &quot;FAILED: Could not create BW-Profile($currBWPName), $errMsgText&quot;
        }

        lappend finishedBWPNameList $currBWPName
     }
}

############################################################################
# All Bandwidth Profile Creation on BD20800
############################################################################
proc createAllBWPObjsOnBD20800 {inVManId
                                inBWPNameList
								inRateLimitType
                                inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedBWPNameList [list]

     foreach currBWPName $inBWPNameList {

        if {[catch {
           	if {![string equal $inRateLimitType "DUAL_RATE"]} {
				createOneSingleRateBWPObjsOnBD20800 \
	    		    $inVManId \
   	   	            $tmpBWPNameToParamsMap($currBWPName.MeterName) \
	                $tmpBWPNameToParamsMap($currBWPName.CIRValue) \
        	        $tmpBWPNameToParamsMap($currBWPName.CIRUnit) \
            	    $tmpBWPNameToParamsMap($currBWPName.CBSValue) \
	                $tmpBWPNameToParamsMap($currBWPName.CBSUnit) \
    	            $tmpBWPNameToParamsMap($currBWPName.ACLName) \
        	        $tmpBWPNameToParamsMap($currBWPName.QPNum)
		    } else {
		    	createOneDualRateBWPObjsOnBD20800 \
	    		    $inVManId \
   	   	            $tmpBWPNameToParamsMap($currBWPName.MeterName) \
	                $tmpBWPNameToParamsMap($currBWPName.CIRValue) \
        	        $tmpBWPNameToParamsMap($currBWPName.CIRUnit) \
            	    $tmpBWPNameToParamsMap($currBWPName.CBSValue) \
	                $tmpBWPNameToParamsMap($currBWPName.CBSUnit) \
	                $tmpBWPNameToParamsMap($currBWPName.EIRValue) \
	                $tmpBWPNameToParamsMap($currBWPName.EIRUnit) \
	                $tmpBWPNameToParamsMap($currBWPName.EBSValue) \
	                $tmpBWPNameToParamsMap($currBWPName.EBSUnit) \
    	            $tmpBWPNameToParamsMap($currBWPName.ACLName) \
        	        $tmpBWPNameToParamsMap($currBWPName.QPNum)
		    }
        } errMsgText]} {

           cleanAllBWPObjs $finishedBWPNameList tmpBWPNameToParamsMap

           error &quot;FAILED: Could not create BW-Profile($currBWPName), $errMsgText&quot;
        }

        lappend finishedBWPNameList $currBWPName
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from all UNI Port(s)
##########################################################################
proc cleanAllUniBWPAttachment {inUniPortList
                               inACLNameList} {

     foreach currUniPort $inUniPortList \
             currACLName $inACLNameList {

        cleanOneUniBWPAttachment $currUniPort \
                                 $currACLName
     }
}

############################################################################
# All Bandwidth Profile attachment on BD8800, SummitStack and Summit-Familiy
############################################################################
proc attachAllUniBWPOnBD88KSSSF {inVManId
                                 inUniPortList
                                 inBWPNameList
                                 inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedUniPortList [list]
     set finishedACLNameList [list]

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)
        set currQPNum $tmpBWPNameToParamsMap($currBWPName.QPNum)

        if {[catch {
           attachOneUniBWPOnBD88KSSSF $inVManId \
                                      $currUniPort \
                                      $currACLName \
                                      $currQPNum
        } errMsgText]} {

           cleanAllUniBWPAttachment $finishedUniPortList \
                                    $finishedACLNameList

           error &quot;FAILED: Can't Attach BW-PROF($currBWPName) on UNI($currUniPort), $errMsgText&quot;
        }

        lappend finishedUniPortList $currUniPort
        lappend finishedACLNameList $currACLName
     }
}

############################################################################
# All Bandwidth Profile attachment on BD20800
############################################################################
proc attachAllUniBWPOnBD20800 {inVManId
                               inUniPortList
                               inBWPNameList
                               inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedUniPortList [list]
     set finishedACLNameList [list]

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)

        if {[catch {
            attachOneUniBWPOnBD20800 $inVManId \
                                     $currUniPort \
                                     $currACLName
        } errMsgText]} {

           cleanAllUniBWPAttachment $finishedUniPortList \
                                    $finishedACLNameList

           error &quot;FAILED: Can't Attach BW-PROF($currBWPName) on UNI($currUniPort), $errMsgText&quot;
        }

        lappend finishedUniPortList $currUniPort
        lappend finishedACLNameList $currACLName
     }
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD88KSSSF
############################################################################
proc assignAllUniBWPOnBD88KSSSF {inVManId
                                 inUniPortList
                                 inBWPNameList
                                 inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     createAllBWPObjsOnBD88KSSSF $inVManId \
                                 $inBWPNameList \
                                 tmpBWPNameToParamsMap

     if {[catch {
        attachAllUniBWPOnBD88KSSSF $inVManId \
                                   $inUniPortList \
                                   $inBWPNameList \
                                   tmpBWPNameToParamsMap
     } errMsgText]} {

       cleanAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap

       error &quot;FAILED: Can't Assign BW-Profiles on UNIs, $errMsgText&quot;
     }
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD20800
############################################################################
proc assignAllUniBWPOnBD20800 {inVManId
                               inUniPortList
                               inBWPNameList
                               inRateLimitType
                               inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     createAllBWPObjsOnBD20800 $inVManId \
                               $inBWPNameList \
                               $inRateLimitType \
                               tmpBWPNameToParamsMap
     if {[catch {
        attachAllUniBWPOnBD20800 $inVManId \
                                 $inUniPortList \
                                 $inBWPNameList \
                                 tmpBWPNameToParamsMap
     } errMsgText]} {

       cleanAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap

       error &quot;FAILED: Can't Assign BW-Profiles on UNIs, $errMsgText&quot;
     }
}

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple => 'BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum'
###########################################################################
proc valRemORBWPTuple {inBWPNameParamsTuple
                       outBWPName
                       outCOSMode
                       outMeterName
                       outACLName
                       outQPNum} {

     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 4} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpACLName    [lindex $tmpBWPAttrList 2]
     set tmpQPNum      [lindex $tmpBWPAttrList 3]
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+ACLName+QPNum'
###########################################################################
proc valRemTRBWPTuple {inBWPNameParamsTuple
                       outBWPName
                       outCOSMode
                       outMeterName
                       outACLName
                       outQPNum} {

     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 4} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpACLName    [lindex $tmpBWPAttrList 2]
     set tmpQPNum      [lindex $tmpBWPAttrList 3]
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+ACLName+QPNum'
###########################################################################
proc valRemORBWPTupleSeq {inBWPNameToParamsSeq
                          outBWPNameToParamsMap} {

     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outACLName    ""
        set outQPNum      ""

        valRemORBWPTuple $currTuple \
                         outBWPName \
                         outCOSMode \
                         outMeterName \
                         outACLName \
                         outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+ACLName+QPNum'
###########################################################################
proc valRemTRBWPTupleSeq {inBWPNameToParamsSeq
                          outBWPNameToParamsMap} {

     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outACLName    ""
        set outQPNum      ""

        valRemTRBWPTuple $currTuple \
                         outBWPName \
                         outCOSMode \
                         outMeterName \
                         outACLName \
                         outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Objects (Meter,ACL)
##########################################################################
proc deleteOneBWPObj {inMeterName
                      inACLName} {

    delete access-list $inACLName
    delete meter $inMeterName
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from one UNI Port
##########################################################################
proc deleteOneUniBWPAttachment {inUniPortNum
                                inACLName} {
	global abort_on_error
    configure access-list delete $inACLName ports $inUniPortNum ingress
}

############################################################################
# Cleanup QoS Objects (Meter, ACL etc.) for a List of BW-Profile(s)
############################################################################
proc deleteAllBWPObjs {inBWPNameList
                       inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currBWPName $inBWPNameList {

        set currMeterName $tmpBWPNameToParamsMap($currBWPName.MeterName)
        set currACLName   $tmpBWPNameToParamsMap($currBWPName.ACLName)

        deleteOneBWPObj $currMeterName $currACLName
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from all UNI Port(s)
##########################################################################
proc deleteAllUniBWPAttachment {inUniPortList
                                inBWPNameList
                                inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)

        deleteOneUniBWPAttachment $currUniPort $currACLName
     }
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD88KSSSF
############################################################################
proc unassignAllUniBWPOnBD88KSSSF {inUniPortList
                                   inBWPNameList
                                   inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     deleteAllUniBWPAttachment $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

     deleteAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD20800
############################################################################
proc unassignAllUniBWPOnBD20800 {inUniPortList
                                 inBWPNameList
                                 inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     deleteAllUniBWPAttachment $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

     deleteAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap
}

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;FAILED: This script is only supported for Extreme switches.&quot;
    ENDIF
}

############################################################################
# Define TCL Procedures for Service Modify Parameter Validation
############################################################################
proc validatePBServiceMODParams {inVManName inUniPortSeq} {

    global abort_on_error

    IF (![expr [string length $inVManName] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inUniPortSeq] &gt; 0]) THEN
       error &quot;FAILED: UNI Port List is empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure for VMAN Addition to UNI Ports for Service Modification
############################################################################
proc insertVManService {inVManName inUniPortSeq} {

    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       configure vlan Default del port $inUniPortSeq
    } result]} {
       error &quot;FAILED: Cannot delete Ports $inUniPortSeq from default VLAN, $result&quot;
    }

    if {[catch {
       configure vman $inVManName add port $inUniPortSeq

       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI    $permitRingPortsAsUni
       ENDIF
    } result]} {
       error &quot;FAILED: Cannot add UNI-Port(s) $inUniPortSeq to VMAN $inVManName, $result&quot;
    }
}

############################################################################
# TCL Procedure for VMAN Addition to UNI Ports for Service Modification
############################################################################
proc removeVManService {inVManName inUniPortSeq} {

    global abort_on_error

    if {[catch {
       configure vman $inVManName delete port $inUniPortSeq
    } result]} {
       error &quot;FAILED: Cannot delete Ports $inUniPortSeq from VMAN, $result&quot;
    }

}

############################################################################
# VLAN Service Modify-Insert at UNI Ports on BD88K and Summit Family devices
############################################################################
proc modifyPBServiceINSOnBD88KSSSF {inVManName
                                    inVManId
                                    inUniPortSeq
                                    inBWPUniPortList
                                    inBWPNameList
                                    inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    insertVManService $inVManName $inUniPortSeq

    assignAllUniBWPOnBD88KSSSF $inVManId \
                               $inBWPUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap
}

################################################################################################
# PB-Service Modify-Insert of bandwidth profile to UNI Ports on BD88K and Summit Family devices
################################################################################################
proc modifyPBServiceBWINSOnBD88KSSSF {inVManName
                                    inVManId
                                    inUniPortSeq
                                    inBWPUniPortList
                                    inBWPNameList
                                    inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    assignAllUniBWPOnBD88KSSSF $inVManId \
                               $inBWPUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap
}

############################################################################
# VLAN Service Modify-Insert at UNI Ports on BD10K devices
############################################################################
proc modifyPBServiceINSOnBD10K {inVManName
                                inUniPortSeq} {

    insertVManService $inVManName $inUniPortSeq
}

############################################################################
# VLAN Service Modify-Insert at UNI Ports on BD12K devices
############################################################################
proc modifyPBServiceINSOnBD12K {inVManName
                                inUniPortSeq} {

    insertVManService $inVManName $inUniPortSeq
}

############################################################################
# VLAN Service Modify-Insert at UNI Ports on BD12804 devices
############################################################################
proc modifyPBServiceINSOnBD12804 {inVManName
                                  inUniPortSeq} {

    insertVManService $inVManName $inUniPortSeq
}

############################################################################
# VLAN Service Modify-Insert at UNI Ports on BD20800 devices
############################################################################
proc modifyPBServiceINSOnBD20800 {inVManName
                                  inVManId
                                  inUniPortSeq
                                  inBWPUniPortList
                                  inBWPNameList
                                  inRateLimitType
                                  inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    insertVManService $inVManName $inUniPortSeq

    assignAllUniBWPOnBD20800 $inVManId \
                             $inBWPUniPortList \
                             $inBWPNameList \
                             $inRateLimitType \
                             tmpBWPNameToParamsMap
}

############################################################################
# PB-Service Modify-Insert bandwidth profile to UNI Ports on BD20800 devices
############################################################################
proc modifyPBServiceBWINSOnBD20800 {inVManName
                                  inVManId
                                  inUniPortSeq
                                  inBWPUniPortList
                                  inBWPNameList
                                  inRateLimitType
                                  inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    assignAllUniBWPOnBD20800 $inVManId \
                             $inBWPUniPortList \
                             $inBWPNameList \
                             $inRateLimitType \
                             tmpBWPNameToParamsMap
}

############################################################################
# VLAN Service Modify-Remove at UNI Ports on BD88K and Summit Family devices
############################################################################
proc modifyPBServiceREMOnBD88KSSSF {inVManName
                                    inUniPortSeq
                                    inBWPUniPortList
                                    inBWPNameList
                                    inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    unassignAllUniBWPOnBD88KSSSF $inBWPUniPortList \
                                 $inBWPNameList \
                                 tmpBWPNameToParamsMap

    removeVManService $inVManName $inUniPortSeq
}

################################################################################################
# PB-Service Modify-Remove bandwidth profile from UNI Ports on BD88K and Summit Family devices
################################################################################################
proc modifyPBServiceBWREMOnBD88KSSSF {inVManName
                                    inUniPortSeq
                                    inBWPUniPortList
                                    inBWPNameList
                                    inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    unassignAllUniBWPOnBD88KSSSF $inBWPUniPortList \
                                 $inBWPNameList \
                                 tmpBWPNameToParamsMap
}

############################################################################
# VLAN Service Modify-Remove at UNI Ports on BD10K
############################################################################
proc modifyPBServiceREMOnBD10K {inVManName
                                inUniPortSeq} {
    global abort_on_error

    removeVManService $inVManName $inUniPortSeq
}

############################################################################
# VLAN Service Modify-Remove at UNI Ports on BD12K
############################################################################
proc modifyPBServiceREMOnBD12K {inVManName
                                inUniPortSeq} {
    global abort_on_error

    removeVManService $inVManName $inUniPortSeq
}

############################################################################
# VLAN Service Modify-Remove at UNI Ports on BD12804R
############################################################################
proc modifyPBServiceREMOnBD12804R {inVManName
                                   inUniPortSeq} {
    global abort_on_error

    removeVManService $inVManName $inUniPortSeq
}

############################################################################
# VLAN Service Modify-Remove at UNI Ports on BD20800
############################################################################
proc modifyPBServiceREMOnBD20800 {inVManName
                                  inUniPortSeq
                                  inBWPUniPortList
                                  inBWPNameList
                                  inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    unassignAllUniBWPOnBD20800 $inBWPUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

    removeVManService $inVManName $inUniPortSeq
}

############################################################################
# PB-Service Modify-Remove bandwidth profile from UNI Ports on BD20800
############################################################################
proc modifyPBServiceBWREMOnBD20800 {inVManName
                                  inUniPortSeq
                                  inBWPUniPortList
                                  inBWPNameList
                                  inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    unassignAllUniBWPOnBD20800 $inBWPUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap
}

############################################################################
# Rollback PB Service Remove-Modification via Adding-Back UNI Ports
############################################################################
proc rollbackPBServiceREMModify {inVManName
                                 inVManId
                                 inPlatformModel
                                 inUniPortSeq
                                 inUniPortToBWPNameSeq
                                 inORBWPTupleSeq
                                 inTRBWPTupleSeq} {
    global abort_on_error

    set outRateLimitType "SINGLE_RATE"
    set outBWPUniPortList  [list]
    set outBWPNameList     [list]
    set outBWPNameToParamsMap(VManName) $inVManName

    validatePBServiceMODParams $inVManName $inUniPortSeq

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outBWPUniPortList \
                                     outBWPNameList
    switch $inPlatformModel {
       MODEL_BD88KSSSF {
       valInsORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap

       modifyPBServiceINSOnBD88KSSSF $inVManName \
                                     $inVManId \
                                     $inUniPortSeq \
                                     $outBWPUniPortList \
                                     $outBWPNameList \
                                     outBWPNameToParamsMap
       }
       MODEL_BD10K {
       modifyPBServiceINSOnBD10K $inVManName \
                                 $inUniPortSeq
       }
       MODEL_BD12K {
       modifyPBServiceINSOnBD12K $inVManName \
                                 $inUniPortSeq
       }
       MODEL_BD12804R {
       modifyPBServiceINSOnBD12804R $inVManName \
                                    $inUniPortSeq
       }
       MODEL_BD20800 {
       if (![expr [string length $inORBWPTupleSeq] &gt; 0]) {
       		valInsTRBWPTupleSeq $inTRBWPTupleSeq \
                           outBWPNameToParamsMap
			set outRateLimitType "DUAL_RATE"
       } else {
    		valInsORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap
	   }

       modifyPBServiceINSOnBD20800 $inVManName \
                                   $inVManId \
                                   $inUniPortSeq \
                                   $outBWPUniPortList \
                                   $outBWPNameList \
                                   $outRateLimitType \
                                   outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

############################################################################
# Rollback PB Service Insert-Modification via Removing-Back UNI Ports
############################################################################
proc rollbackPBServiceINSModify {inVManName
                                 inPlatformModel
                                 inUniPortSeq
                                 inUniPortToBWPNameSeq
                                 inORBWPTupleSeq
                                 inTRBWPTupleSeq} {
    global abort_on_error

    validatePBServiceMODParams $inVManName $inUniPortSeq

    set outBWPUniPortList [list]
    set outBWPNameList    [list]
    set outBWPNameToParamsMap(VManName) $inVManName

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outBWPUniPortList \
                                     outBWPNameList
    switch $inPlatformModel {
       MODEL_BD88KSSSF {
       valRemORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap

       modifyPBServiceREMOnBD88KSSSF $inVManName \
                                     $inUniPortSeq \
                                     $outBWPUniPortList \
                                     $outBWPNameList \
                                     outBWPNameToParamsMap
       }
       MODEL_BD10K {
       modifyPBServiceREMOnBD10K $inVManName \
                                 $inUniPortSeq
       }
       MODEL_BD12K {
       modifyPBServiceREMOnBD12K $inVManName \
                                 $inUniPortSeq
       }
       MODEL_BD12804R {
       modifyPBServiceREMOnBD12804R $inVManName \
                                    $inUniPortSeq
       }
       MODEL_BD20800 {
       if (![expr [string length $inORBWPTupleSeq] &gt; 0]) {
       		valRemTRBWPTupleSeq $inTRBWPTupleSeq \
                           outBWPNameToParamsMap
       } else {
       		valRemORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap
       }

       modifyPBServiceREMOnBD20800 $inVManName \
                                   $inUniPortSeq \
                                   $outBWPUniPortList \
                                   $outBWPNameList \
                                   outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

############################################################################
# PB-Service Modification via Insertion of bandwidth profile to UNI Ports
############################################################################
proc runPBServiceBWINSModify {inVManName
                            inVManId
                            inPlatformModel
                            inUniPortSeq
                            inUniPortToBWPNameSeq
                            inORBWPTupleSeq
                            inTRBWPTupleSeq} {
    global abort_on_error

	set outRateLimitType "SINGLE_RATE"
    set outBWPUniPortList  [list]
    set outBWPNameList     [list]
    set outBWPNameToParamsMap(VManName) $inVManName

    validatePBServiceMODParams $inVManName $inUniPortSeq

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outBWPUniPortList \
                                     outBWPNameList
    switch $inPlatformModel {
       MODEL_BD88KSSSF {
       valInsORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap

       modifyPBServiceBWINSOnBD88KSSSF $inVManName \
                                     $inVManId \
                                     $inUniPortSeq \
                                     $outBWPUniPortList \
                                     $outBWPNameList \
                                     outBWPNameToParamsMap
       }
       MODEL_BD20800 {
       if (![expr [string length $inORBWPTupleSeq] &gt; 0]) {
       		valInsTRBWPTupleSeq $inTRBWPTupleSeq \
                           outBWPNameToParamsMap
			set outRateLimitType "DUAL_RATE"
		} else {
    		valInsORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap
	   }

       modifyPBServiceBWINSOnBD20800 $inVManName \
                                   $inVManId \
                                   $inUniPortSeq \
                                   $outBWPUniPortList \
                                   $outBWPNameList \
                                   $outRateLimitType \
                                   outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

############################################################################
# PB-Service Modification via Removal of existing UNI Ports
############################################################################
proc runPBServiceBWREMModify {inVManName
                            inPlatformModel
                            inUniPortSeq
                            inUniPortToBWPNameSeq
                            inORBWPTupleSeq
                            inTRBWPTupleSeq} {
    global abort_on_error

    validatePBServiceMODParams $inVManName $inUniPortSeq

    set outBWPUniPortList [list]
    set outBWPNameList    [list]
    set outBWPNameToParamsMap(VManName) $inVManName

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outBWPUniPortList \
                                     outBWPNameList
    switch $inPlatformModel {
       MODEL_BD88KSSSF {
       valRemORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap

       modifyPBServiceBWREMOnBD88KSSSF $inVManName \
                                     $inUniPortSeq \
                                     $outBWPUniPortList \
                                     $outBWPNameList \
                                     outBWPNameToParamsMap
       }
       MODEL_BD20800 {
       if (![expr [string length $inORBWPTupleSeq] &gt; 0]) {
       		valRemTRBWPTupleSeq $inTRBWPTupleSeq \
                           outBWPNameToParamsMap
		} else {
    		valRemORBWPTupleSeq $inORBWPTupleSeq \
                           outBWPNameToParamsMap
	   }

       modifyPBServiceBWREMOnBD20800 $inVManName \
                                   $inUniPortSeq \
                                   $outBWPUniPortList \
                                   $outBWPNameList \
                                   outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

############################################################################
# Rollback PB Service Modification at UNI Ports
############################################################################
proc rollbackPBServiceModify {inModifyActionType
                              inVManName
                              inVManId
                              inPlatformModel
                              inUniPortSeq
                              inUniPortToBWPNameSeq
                              inInsORBWPTupleSeq
                              inInsTRBWPTupleSeq
                              inRemORBWPTupleSeq
                              inRemTRBWPTupleSeq} {
    global abort_on_error
	global isExos

	if {[string match $isExos true]} {
    	create log entry &quot;START-Modify-Rollback PB Service&quot;
	}

    switch $inModifyActionType {
       Modify_Insert {
       rollbackPBServiceINSModify $inVManName \
                                  $inPlatformModel \
                                  $inUniPortSeq \
                                  $inUniPortToBWPNameSeq \
                                  $inInsORBWPTupleSeq \
                                  $inInsTRBWPTupleSeq
       }
       Modify_Remove {
       rollbackPBServiceREMModify $inVManName \
                                  $inVManId \
                                  $inPlatformModel \
                                  $inUniPortSeq \
                                  $inUniPortToBWPNameSeq \
                                  $inRemORBWPTupleSeq \
                                  $inRemTRBWPTupleSeq
       }
       Modify_BW_Insert {
       runPBServiceBWREMModify $inVManName \
                             $inPlatformModel \
                             $inUniPortSeq \
                             $inUniPortToBWPNameSeq \
                             $inRemORBWPTupleSeq \
                             $inRemTRBWPTupleSeq
       }
       Modify_BW_Remove {
       runPBServiceBWINSModify $inVManName \
                             $inVManId \
                             $inPlatformModel \
                             $inUniPortSeq \
                             $inUniPortToBWPNameSeq \
                             $inInsORBWPTupleSeq \
                             $inInsTRBWPTupleSeq
       }
       default {
        error &quot;FAILED: Invalid Modify_Action $inModifyActionType&quot;
       }
    }

    if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Modify-Rollback PB Service&quot;
	}
}

############################################################################
# CLI Configuration Starting for VLAN Service Modification
############################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

rollbackPBServiceModify $ethServModifyActionType \
                        $ethServVManName \
                        $ethServVManSTag \
                        $ethServPlatformModel \
                        $ethServUniPortSeq \
                        $ethServUniPortBWPNameSeq \
                        $ethServInsORBWPTupleSeq \
                        $ethServInsTRBWPTupleSeq \
                        $ethServRemORBWPTupleSeq \
                        $ethServRemTRBWPTupleSeq
</content>
<contexts>,Device,</contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
