<!-- This file is generated by system. Do not edit this file. -->
<script name="Modify_UnProtected_VLAN">
<comments>This scripts modifies a unprotected 802.1Q VLAN on NNI Ports</comments>
<content># @METADATASTART
#@DetailDescriptionStart
##################################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Unprotected 802.1Q VLAN modification on NNI Ports
##################################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
##################################################################################
# Author Name   : NMS Team
##################################################################################
# Purpose:
##################################################################################
# 1. Modify a unprotected 802.1Q VLAN via creation on a new Switch
# 2. Modify a unprotected 802.1Q VLAN via deletion from a Switch
# 3. Modify a unprotected 802.1Q VLAN via insertion to more NNI Ports on a Switch
# 4. Modify a unprotected 802.1Q VLAN via removal from some NNI Ports on a Switch
##################################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;This script modifies 802.1Q VLANs on NNI Ports&quot;
# @SectionStart (description = &quot;802.1Q VLAN Modification Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;Choose Modification Action-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [Modify_Create,Modify_Delete,Modify_Insert,Modify_Remove,Modify_INSREM,Modify_RENAME])
set var unprotVLanModifyActionType Modify_Create

# @VariableFieldLabel (description = &quot;Comma Listed UnTagged UNI_Port to be removed from Default VLAN&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVLanDelInDefVlanPortSeq &quot;&quot;

################################################################################
# 802.1Q VLAN modification Parameters Definition
################################################################################
# @VariableFieldLabel (description = &quot;802.1Q-VLAN Old Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotVLanOldName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1Q-VLAN New Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotVLanNewName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1Q VLAN Tag &quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var unprotVLanCTag &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1Q VLAN QoS Profile, Create-only&quot;,
#   type        = String,
#   scope       = global,
#   required    = no,
#   validValues =[1,2,3,4,5,6,7,8])
set var unprotVLanQPNum 8

# @VariableFieldLabel (description = &quot;VLAN Protocol&quot;
#   type        = String,
#   scope       = global,
#   required    = no)
set var unprotVLanProtocol &quot;&quot; 

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status for VLAN&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVLanPortTagStsSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status for VLAN&quot;
#   type        = String,
#   scope       = device,
#   required    = no)
set var unprotVLanIRPortTagStsSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

#############################################################
# Validation of Unprotected VLAN Creation Parameters
#############################################################
proc validateVLanCreateParams {inVLanOldName
                               inVLanQPNum} {
    global abort_on_error

    IF (![expr [string length $inVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inVLanQPNum] &gt; 0]) THEN
       error &quot;FAILED: VLAN QoS-Profile Number is empty.&quot;
    ENDIF
}

############################################################################
# Validation of Unprotected VLAN Update (Create/Insert/Remove/Delete)
############################################################################
proc validateVLanUpdateParams {inVLanOldName} {
    global abort_on_error

    IF (![expr [string length $inVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name is empty.&quot;
    ENDIF

}

############################################################################
# Validation of Unprotected VLAN Insert and Remove
############################################################################
proc validateVLanInsRemParams {inVLanOldName} {
    global abort_on_error

    IF (![expr [string length $inVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name is empty.&quot;
    ENDIF
}

############################################################################
# Validation of Unprotected VLAN renaming Parameters
############################################################################
proc validateVLanRenameParams {inVLanOldName
                               inVLanNewName} {
    global abort_on_error

    IF (![expr [string length $inVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: VLAN Old Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inVLanNewName] &gt; 0]) THEN
       error &quot;FAILED: VLAN New Name is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTuple {inUniPortTagStatus
                                     inVLanType
                                    outUniPortNum
                                    outTagStatus} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagStatus  tmpTagStatus

     set tmpUniTagList [split $inUniPortTagStatus '+']

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI-Port Tagging-Status, Tuple=>$inUniPortTagStatus&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagStatus  [lindex $tmpUniTagList 1]

     if {[string equal $inVLanType "UNTAGGED_VLAN"]} {
         if {[string equal $outTagStatus "tagged"]} {
            error &quot;Invalid UNI-Port Tagging-Status($outTagStatus), tagged port can not be added to untagged VLAN.&quot;
         }
     }
}

################################################################################
# Procedure to Validate List of Tuples of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTupleSeq {inUniPortTagStatusSeq
                                        inVLanType
                                       outUniPortList
                                       outTagStatusList} {
     global abort_on_error

     if {[string length $inUniPortTagStatusSeq] == 0} {
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     }

     set tmpUniPortTagStatusList [split $inUniPortTagStatusSeq ,]

     if {[llength $tmpUniPortTagStatusList] == 0} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList   tmpUniPortList
     upvar $outTagStatusList tmpTagStatusList

     foreach currTuple $tmpUniPortTagStatusList {

        set outUniPortNum ""
        set outTagStatus  ""

        validateUniPortTagStatusTuple $currTuple \
                                        $inVLanType \
                                      outUniPortNum \
                                      outTagStatus

        lappend tmpUniPortList    $outUniPortNum
        lappend tmpTagStatusList  $outTagStatus
     }
}

############################################################################
# Creation of a Unprotected VLAN and add Ports to it
############################################################################
proc createUnProtVLan {inVLanOldName
                       inVLanCTag
                       inVLanQPNum
                       inUniPortList
                       inTagStatusList
                       inVLanProtocol
                       inDelInDefVlanPortSeq} {
    global abort_on_error

    if {[catch {
       create vlan $inVLanOldName
    } result]} {
       error &quot;FAILED: Could not create VLan $inVLanOldName, $result&quot;
    }

    IF ([expr [string length $inVLanCTag] &gt; 0]) THEN
        if {[catch {
           config vlan $inVLanOldName tag $inVLanCTag
        } result]} {
           delete vlan $inVLanOldName
           error &quot;FAILED: Invalid Tag $inVLanCTag for VLan $inVLanOldName, $result&quot;
        }
    ENDIF
    
    if {![string equal $inVLanProtocol "ANY"]} {
     if {[catch {
        config vlan $inVLanOldName protocol $inVLanProtocol
     } errMsgText]} {
        delete vlan $inVLanOldName
        error &quot;FAILED: Invalid protocol for VLAN $inVLanOldName, $errMsgText&quot;
     }
   }

    ## if {[catch {
    ##   config vlan $inVLanOldName qosprofile qp$inVLanQPNum
    ## } result]} {
    ##   delete vlan $inVLanOldName
    ##   error &quot;FAILED: Invalid QoS-Profile for VLan $inVLanOldName, $result&quot;
    ## }

    if {[catch {
       addDot1qVLanToAllUnis $inVLanOldName \
                          $inUniPortList \
                          $inTagStatusList \
                          $inDelInDefVlanPortSeq
    } result]} {
       delete vlan $inVLanOldName
       error "FAILED: Could not add port to vlan $inVLanOldName, $result"
    }
}

###########################################################################
# Procedure to add the 802.1q VLAN to one UNI Port on the switch
##########################################################################
proc addDot1qVLanToOneUni {inVLanName
                           inUniPortNum
                           inTagStatus} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       configure vlan $inVLanName add port $inUniPortNum $inTagStatus

       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI    $permitRingPortsAsUni
       ENDIF
    } result]} {
       error &quot;FAILED: Cannot add UNI-Port $inUniPortNum to VLAN $inVLanName, $result&quot;
    }
}

###########################################################################
# Procedure to Add the VLAN to all the UNI Ports on the switch
###########################################################################
proc addDot1qVLanToAllUnis {inVLanName
                            inUniPortList
                            inTagStatusList
                            inDelInDefVlanPortSeq} {
    global abort_on_error

    set delInDefVlanPortList [split $inDelInDefVlanPortSeq ,]
    foreach delInDefVlanPort $delInDefVlanPortList {
        if {[catch {
            configure vlan Default del port $delInDefVlanPort
        } result]} {
            error &quot;FAILED: Cannot delete Port $delInDefVlanPort from default VLAN, $result&quot;
        }
    }
    if {[catch {
        foreach currUniPort   $inUniPortList \
                currTagStatus $inTagStatusList {

           addDot1qVLanToOneUni $inVLanName \
                                $currUniPort \
                                $currTagStatus
        }
    } result]} {
        foreach currUniPort   $inUniPortList \
                currTagStatus $inTagStatusList {

           remDot1qVLanFromOneUni $inVLanName \
                                  $currUniPort \
                                  $currTagStatus
        }                              

        foreach delInDefVlanPort $delInDefVlanPortList {
            if {[catch {
                configure vlan Default add port $delInDefVlanPort untagged
            } result]} {
                error &quot;FAILED: Cannot add Port $delInDefVlanPort to default VLAN, $result&quot;
            }
        }
        error "FAILED: Could not add port to vlan $inVLanName, $result"
    }

}

############################################################################
# Deletion of a Unprotected VLAN after removing Ports from it
############################################################################
proc deleteUnProtVLan {inVLanOldName
                       inUniPortList
                       inTagStatusList} {

    global abort_on_error

    remDot1qVLanFromAllUnis $inVLanOldName \
                              $inUniPortList \
                              $inTagStatusList

    if {[catch {
       delete vlan $inVLanOldName
    } result]} {
       error &quot;FAILED: Could not delete VLan $inVLanOldName, $result&quot;
    }
}

##########################################################################
# Procedure to remove the 802.1q VLAN from one UNI Port on the switch
##########################################################################
proc remDot1qVLanFromOneUni {inVLanName
                             inUniPortNum
                             inTagStatus} {
  	global abort_on_error
                               
    if {[catch {
       configure vlan $inVLanName delete port $inUniPortNum
    } result]} {
       error &quot;FAILED: Cannot delete Port $inUniPortNum from VLAN, $result&quot;
    }
}

###########################################################################
# Procedure to Remove the VLAN from all the UNI Ports on the switch
###########################################################################
proc remDot1qVLanFromAllUnis {inVLanName
                              inUniPortList
                              inTagStatusList} {
    set inDelInDefVlanPortSeq ""
    if {[catch {
        foreach currUniPort   $inUniPortList \
                currTagStatus $inTagStatusList {

           remDot1qVLanFromOneUni $inVLanName \
                                  $currUniPort \
                                  $currTagStatus
        }
    } result]} {
        foreach currUniPort   $inUniPortList \
                currTagStatus $inTagStatusList {

           addDot1qVLanToOneUni $inVLanName \
                                $currUniPort \
                                $currTagStatus
        }
       error "FAILED: Could not delete ports from vlan $inVLanName, $result"
    }
}

############################################################################
# Insertion of a List of Ports to a Unprotected VLAN
############################################################################
proc insertUnProtVLan {inVLanOldName
                       inUniPortList
                       inTagStatusList
                       inDelInDefVlanPortSeq} {

    global abort_on_error

    addDot1qVLanToAllUnis $inVLanOldName \
                          $inUniPortList \
                          $inTagStatusList \
                          $inDelInDefVlanPortSeq
}

############################################################################
# Removal of a List of Ports from a Unprotected VLAN
############################################################################
proc removeUnProtVLan {inVLanOldName
                       inUniPortList
                       inTagStatusList} {

    global abort_on_error

    remDot1qVLanFromAllUnis $inVLanOldName \
                              $inUniPortList \
                              $inTagStatusList
}

############################################################################
# Renaming of a Unprotected VLAN
############################################################################
proc renameUnProtVLan {inVLanOldName
                       inVLanNewName} {

    global abort_on_error

    if {[catch {
       config vlan $inVLanOldName name $inVLanNewName
    } result]} {
       error &quot;FAILED: Could not rename VLan $inVLanOldName, $result&quot;
    }
}

############################################################################
# Modifying Unprotected VLAN via Creation on a new Switch
############################################################################
proc modifyUnProtVLanCreate {inVLanOldName
                             inVLanCTag
                             inVLanQPNum
                             inVLanType
                             inVLanPortTagStsSeq
                             inVLanProtocol
                             inDelInDefVlanPortSeq} {
    global abort_on_error
    set outUniPortList [list]
    set outTagStatusList   [list]

    validateVLanCreateParams $inVLanOldName \
                             $inVLanQPNum

    validateUniPortTagStatusTupleSeq $inVLanPortTagStsSeq \
                                     $inVLanType \
                                     outUniPortList \
                                     outTagStatusList

    createUnProtVLan $inVLanOldName \
                     $inVLanCTag \
                     $inVLanQPNum \
                     $outUniPortList \
                     $outTagStatusList \
                     $inVLanProtocol \
                     $inDelInDefVlanPortSeq
}

############################################################################
# Modifying Unprotected VLAN via Deletion from a Switch
############################################################################
proc modifyUnProtVLanDelete {inVLanOldName
                             inVLanType
                             inUniPortTagStsSeq} {
    global abort_on_error
    set outUniPortList [list]
    set outTagStatusList   [list]

    validateVLanUpdateParams $inVLanOldName

    validateUniPortTagStatusTupleSeq $inUniPortTagStsSeq \
                                     $inVLanType \
                                     outUniPortList \
                                     outTagStatusList

    deleteUnProtVLan $inVLanOldName \
                     $outUniPortList \
                     $outTagStatusList
}

############################################################################
# Modifying Unprotected VLAN via Insertion on a Switch
############################################################################
proc modifyUnProtVLanInsert {inVLanOldName
                             inVLanType
                             inUniPortTagStsSeq
                             inDelInDefVlanPortSeq} {
    global abort_on_error
    set outUniPortList [list]
    set outTagStatusList   [list]

    validateVLanUpdateParams $inVLanOldName

    validateUniPortTagStatusTupleSeq $inUniPortTagStsSeq \
                                     $inVLanType \
                                     outUniPortList \
                                     outTagStatusList

    insertUnProtVLan $inVLanOldName \
                     $outUniPortList \
                     $outTagStatusList \
                     $inDelInDefVlanPortSeq
}

############################################################################
# Modifying Unprotected VLAN via Removal from a Switch
############################################################################
proc modifyUnProtVLanRemove {inVLanOldName
                             inVLanType
                             inUniPortTagStsSeq} {
    set outUniPortList [list]
    set outTagStatusList   [list]

    validateVLanUpdateParams $inVLanOldName

    validateUniPortTagStatusTupleSeq $inUniPortTagStsSeq \
                                     $inVLanType \
                                     outUniPortList \
                                     outTagStatusList

    removeUnProtVLan $inVLanOldName \
                     $outUniPortList \
                     $outTagStatusList
}

############################################################################
# Modifying Unprotected VLAN via Insert-Removal from a Switch
############################################################################
proc modifyUnProtVLanInsRem {inVLanOldName
                             inVLanType
                             inInsUniPortTagStsSeq
                             inRemUniPortTagStsSeq
                             inDelInDefVlanPortSeq} {

    set outInsUniPortList [list]
    set outInsTagStatusList   [list]
    set outRemUniPortList [list]
    set outRemTagStatusList   [list]

    validateVLanInsRemParams $inVLanOldName

    validateUniPortTagStatusTupleSeq $inInsUniPortTagStsSeq \
                                     $inVLanType \
                                     outInsUniPortList \
                                     outInsTagStatusList

    validateUniPortTagStatusTupleSeq $inRemUniPortTagStsSeq \
                                     $inVLanType \
                                     outRemUniPortList \
                                     outRemTagStatusList

    insertUnProtVLan $inVLanOldName \
                     $outInsUniPortList \
                     $outInsTagStatusList \
                     $inDelInDefVlanPortSeq

    removeUnProtVLan $inVLanOldName \
                     $outRemUniPortList \
                     $outRemTagStatusList
}

############################################################################
# Modifying Unprotected VLAN by renaming the VLAN Named on the Switch
############################################################################
proc modifyUnProtVLanRename {inVLanOldName
                             inVLanNewName} {

    validateVLanRenameParams $inVLanOldName \
                             $inVLanNewName

    renameUnProtVLan $inVLanOldName \
                     $inVLanNewName
}

############################################################################
# TCL Procedure to modify a unprotected 802.1Q VLAN on NNI ports of a Switch
############################################################################
proc modifyUnProt8021qVLan {inModifyActionType
                            inVLanOldName
                            inVLanNewName
                            inVLanCTag
                            inVLanQPNum
                            inVLanPortTagStsSeq
                            inVLanIRPortTagStsSeq
                            inVLanProtocol
                            inDelInDefVlanPortSeq} {
    global abort_on_error
    global isExos
    set outVLanType "TAGGED_VLAN"

    if {[string match $isExos true]} {
        create log entry &quot;Starting protected/unprotected 802.1Q VLAN modification on Switch&quot;
    }

    if {[string length $inVLanCTag] == 0} {
        set outVLanType "UNTAGGED_VLAN"
    }

    switch $inModifyActionType {
       Modify_Create {
       modifyUnProtVLanCreate $inVLanOldName \
                              $inVLanCTag \
                              $inVLanQPNum \
                              $outVLanType \
                              $inVLanPortTagStsSeq \
                              $inVLanProtocol \
                              $inDelInDefVlanPortSeq
       }
       Modify_Delete {
       modifyUnProtVLanDelete $inVLanOldName \
                                 $outVLanType \
                              $inVLanPortTagStsSeq
       }
       Modify_Insert {
       modifyUnProtVLanInsert $inVLanOldName \
                                 $outVLanType \
                              $inVLanPortTagStsSeq \
                              $inDelInDefVlanPortSeq
       }
       Modify_Remove {
       modifyUnProtVLanRemove $inVLanOldName \
                                 $outVLanType \
                              $inVLanPortTagStsSeq
       }
       Modify_INSREM {
       modifyUnProtVLanInsRem $inVLanOldName \
                                 $outVLanType \
                              $inVLanPortTagStsSeq \
                              $inVLanIRPortTagStsSeq \
                              $inDelInDefVlanPortSeq
       }
       Modify_RENAME {
       modifyUnProtVLanRename $inVLanOldName \
                              $inVLanNewName
       }
       default {
        error &quot;FAILED: Invalid Service Modify Action Type&quot;
       }
    }

    if {[string match $isExos true]} {
        create log entry &quot;Finished protected/unprotected 802.1Q VLAN modification on Switch&quot;
       }
}

###################################################################
# CLI MODE Settings
###################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

modifyUnProt8021qVLan $unprotVLanModifyActionType \
                      $unprotVLanOldName \
                      $unprotVLanNewName \
                      $unprotVLanCTag \
                      $unprotVLanQPNum \
                      $unprotVLanPortTagStsSeq \
                      $unprotVLanIRPortTagStsSeq \
                      $unprotVLanProtocol \
                      $unprotVLanDelInDefVlanPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_MOD_UnProtected_VLAN</rollbackScript>
<postprocessScript>Sync_MOD_UnProtected_VLAN</postprocessScript>
<scriptOwner>system</scriptOwner>

</script>
