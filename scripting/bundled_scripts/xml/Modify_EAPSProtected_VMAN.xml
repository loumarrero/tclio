<!-- This file is generated by system. Do not edit this file. -->
<script name="Modify_EAPSProtected_VMAN">
<comments>This scripts modifies VMANs protected by EAPS domains</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Modification of VMAN protection via EAPS domain
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create VMAN
# 2.  Assign the VMAN to a QoS Profile
# 3.  Add the VMAN to a EAPS domain
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Modifies VMANs via addition or removal to EAPS domains&quot;
# @SectionStart ( description = &quot;VMAN EAPS Protection Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

#############################################################################
# VMAN Protection Parameters definitions
#############################################################################

# @VariableFieldLabel (description = &quot;Choose Modification Action-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [Modify_Create,Modify_Delete,Modify_Insert,Modify_Remove,Modify_InsRem])
set var eapsProtModifyActionType Modify_Create

# @VariableFieldLabel (description = &quot;Comma separated 3-Tuples of VMAN-Name+VMAN-Tag+VMAN-QPNum, Create-only&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var eapsProtVManNameTagQPSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated VMAN Names, INS,REM,DEL-only&quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var eapsProtVManNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated protecting Ring Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtRingPortSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated EAPS Domain Names, this is set when EAPS is inserted and removed on same device&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtIRDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated protecting Ring Ports, this is set when EAPS is inserted and removed on same device&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtIRRingPortSeq &quot;&quot;


set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd

################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;FAILED: This script is only supported for Extreme switches.&quot;
    ENDIF
}

##############################################################
# VMAN Protection Creation Parameter Validation
##############################################################
proc validateVManCreateParams {inVManNameTagQPSeq
                               inDomainNameSeq
                               inRingPortSeq} {
    global abort_on_error

    IF (![expr [string length $inVManNameTagQPSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name Tag QP List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inRingPortSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Protect Port List is empty.&quot;
    ENDIF
}

##############################################################
# VMAN Protection Update Parameter Validation
##############################################################
proc validateVManUpdateParams {inVManNameSeq
                               inDomainNameSeq
                               inRingPortSeq} {
    global abort_on_error

    IF (![expr [string length $inVManNameSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inRingPortSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Protect Port List is empty.&quot;
    ENDIF
}

##############################################################
# VMAN Protection Update Parameter Validation for shared links
##############################################################
proc validateVManUpdateSharedLinkParams {inVManNameSeq
                               inDomainNameSeq} {
    global abort_on_error

    IF (![expr [string length $inVManNameSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 3-Tuple of the form 'VMAN-Name+Tag+QP-Num'
################################################################################
proc validateOneVManNameTagQPTuple {inNameTagQP
                                    outVManName
                                    outVManTag
                                    outVManQP} {
     global abort_on_error

     upvar $outVManName tmpVManName
     upvar $outVManTag  tmpVManTag
     upvar $outVManQP   tmpVManQP

     set tmpNameTagQPList [split $inNameTagQP '+']

     if {[llength $tmpNameTagQPList] != 3} {
         error &quot;Invalid VMAN-Name,Tag,QP-Num Tuple=>$inNameTagQP&quot;
     }
     set tmpVManName [lindex $tmpNameTagQPList 0]
     set tmpVManTag  [lindex $tmpNameTagQPList 1]
     set tmpVManQP   [lindex $tmpNameTagQPList 2]
}

################################################################################
# Procedure to Validate List of 3-Tuples of the form 'VMAN-Name+Tag+QP-Num'
################################################################################
proc validateAllVManNameTagQPTuples {inNameTagQPSeq
                                     outVManNameList
                                     outVManTagList
                                     outVManQPList} {
     global abort_on_error

     set tmpNameTagQPList [split $inNameTagQPSeq ,]

     if {[llength $tmpNameTagQPList] == 0} {
        error &quot;FAILED: VMAN-Name, Tag, QP Tuple List is empty.&quot;
     }

     upvar $outVManNameList tmpVManNameList
     upvar $outVManTagList  tmpVManTagList
     upvar $outVManQPList   tmpVManQPList

     foreach currTuple $tmpNameTagQPList {

        set outVManName ""
        set outVManTag  ""
        set outVManQP   ""

        validateOneVManNameTagQPTuple $currTuple \
                                      outVManName \
                                      outVManTag \
                                      outVManQP

        lappend tmpVManNameList $outVManName
        lappend tmpVManTagList  $outVManTag
        lappend tmpVManQPList   $outVManQP
     }
}

###########################################################################
# Procedure to Clean-up a List of VMANs on the switch
###########################################################################
proc cleanUpVManList {inVManNameList} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       delete vman $currVManName
    }
}

##########################################################################
# TCL Procedure to Create one VMAN
##########################################################################
proc createOneVMan {inVManName
                    inVManTag
                    inVManQPNum} {
    global abort_on_error

    if {[catch {
       create vman $inVManName
    } errMsgText]} {
       error &quot;FAILED: Could not create VMAN $inVManName, $errMsgText&quot;
    }

    if {[catch {
       config vman $inVManName tag $inVManTag
    } errMsgText]} {
       delete vman $inVManName
       error &quot;FAILED: Invalid Tag $inVManTag for VMAN $inVManName, $errMsgText&quot;
    }

    ## if {[catch {
    ##   config vman $inVManName qosprofile qp$inVManQPNum
    ## } errMsgText]} {
    ##    delete vman $inVManName
    ##    error &quot;FAILED: Invalid QoS-Profile for VMAN $inVManName, $errMsgText&quot;
    ## }

    if {[catch {
       config vman ethertype 0x8100
    } errMsgText]} {
       delete vman $inVManName
       error &quot;FAILED: Invalid Ether-Type for VMAN $inVManName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Create all VMANs
##########################################################################
proc createAllVMans {inVManNameList
                     inVManTagList
                     inVManQPList} {
    global abort_on_error

    set finishedVManNameList [list]

    foreach currVManName $inVManNameList currVManTag $inVManTagList currVManQPNum $inVManQPList {

        if {[catch {
           createOneVMan $currVManName $currVManTag $currVManQPNum
        } errMsgText]} {
           cleanUpVManList $finishedVManNameList
           error &quot;FAILED: Could not create VMANs, $errMsgText&quot;
        }

        lappend finishedVManNameList $currVManName
    }
}

################################################################
# TCL Procedure to delete one VMAN
################################################################
proc delOneVMan {inVManName} {

    global abort_on_error

    if {[catch {
       delete vman $inVManName
    } errMsgText]} {
       puts &quot;FAILED: Could not delete VMAN $inVManName, $errMsgText&quot;
    }
}

################################################################
# TCL Procedure to delete all VMANs
################################################################
proc delAllVMans {inVManNameList} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       delOneVMan $currVManName
    }
}

##########################################################################
# Procedure to add a List of Ring-Port(s) to one VMAN
##########################################################################
proc addPortsToOneVMan {inVManName inRingPortList} {

    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       config vman $inVManName add ports $inRingPortList tagged
       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI   $permitRingPortsAsUni
       ENDIF
    } errMsgText]} {
       error &quot;FAILED: Could not add Ports $inRingPortList to VMAN $inVManName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to add a List of Ring-Port(s) to all VMAN
##########################################################################
proc addPortsToAllVMans {inVManNameList inRingPortList} {

    global abort_on_error

    set finishedVManNameList [list]

    foreach currVManName $inVManNameList {

        if {[catch {
           addPortsToOneVMan $currVManName $inRingPortList
        } errMsgText]} {
           cleanUpVManList $finishedVManNameList
           error &quot;FAILED: Could not add Ring-Ports to VMAN, $errMsgText&quot;
        }

        lappend finishedVManNameList $currVManName
    }
}

################################################################
# TCL Procedure to remove EAPS Ring Ports from one VMAN
################################################################
proc delPortsFromOneVMan {inVManName inRingPortSeq} {

    global abort_on_error

    IF ([expr [string length $inRingPortSeq] &gt; 0]) THEN
        if {[catch {
           config vman $inVManName delete ports $inRingPortSeq
        } errMsgText]} {
           puts &quot;FAILED: Could not delete Ports $inRingPortSeq from VMAN $inVManName, $errMsgText&quot;
        }
    ENDIF
}

################################################################
# TCL Procedure to remove EAPS Ring Ports from all VMANs
################################################################
proc delPortsFromAllVMans {inVManNameList inRingPortSeq} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       delPortsFromOneVMan $currVManName $inRingPortSeq
    }
}

####################################################################
# Procedure to Add Protection of one VMAN by one EAPS Domain
####################################################################
proc addOneVManProtectByOneDomain {inVManName inDomainName} {

   global abort_on_error

   if {[catch {
      config eaps $inDomainName add protect $inVManName
   } errMsgText]} {
      error &quot;FAILED: EAPS-Domain $inDomainName cannot protect VMAN $inVManName, $errMsgText&quot;
   }
}

####################################################################
# Procedure to Add Protection of one VMAN by all EAPS Domain(s)
####################################################################
proc addOneVManProtectByAllDomains {inVManName inDomainNameSeq} {

   global abort_on_error

   set tmpDomainNameList [split $inDomainNameSeq ,]

   foreach currDomainName $tmpDomainNameList {

       addOneVManProtectByOneDomain $inVManName $currDomainName
   }
}

####################################################################
# Procedure to Add Protection of all VMANs by all EAPS Domain(s)
####################################################################
proc addAllVMansProtectByAllDomains {inVManNameList inDomainNameSeq} {

    global abort_on_error

    foreach currVManName $inVManNameList {

        if {[catch {
           addOneVManProtectByAllDomains $currVManName $inDomainNameSeq
        } errMsgText]} {
           cleanUpVManList $inVManNameList
           error &quot;FAILED: VMAN Protection, $errMsgText&quot;
        }
    }
}

####################################################################
# Procedure to Remove Protection of one VMAN by one EAPS Domain
####################################################################
proc remOneVManProtectByOneDomain {inVManName inDomainName} {

    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
        config eaps $inDomainName delete protect $inVManName
        regexp {.*deleting.* from the EAPS domain could cause a loop .*} ${CLI.OUT} addWarningMsg
        IF ([info exists addWarningMsg]) THEN
        CLI $permitRingPortsAsUni
        ENDIF
    } errMsgText]} {
        puts &quot;FAILED: Cannot delete protection of VMAN $inVManName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

####################################################################
# Procedure to Remove Protection of one VMAN by all EAPS Domain(s)
####################################################################
proc remOneVManProtectByAllDomains {inVManName inDomainNameList} {

    global abort_on_error

    foreach currDomainName $inDomainNameList {
       remOneVManProtectByOneDomain $inVManName $currDomainName
    }
}

####################################################################
# Procedure to Remove Protection of all VMANs by all EAPS Domain(s)
####################################################################
proc remAllVMansProtectByAllDomains {inVManNameList inDomainNameList} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       remOneVManProtectByAllDomains $currVManName $inDomainNameList
    }
}

##################################################################
# Protected VMAN Modification : Creation of VMAN and Protection
##################################################################
proc modifyProtectedVManCreate {inVManNameTagQPSeq inDomainNameSeq inRingPortSeq} {

    global abort_on_error

    validateVManCreateParams $inVManNameTagQPSeq $inDomainNameSeq $inRingPortSeq

    set outVManNameList [list]
    set outVManTagList  [list]
    set outVManQPList   [list]

    validateAllVManNameTagQPTuples $inVManNameTagQPSeq outVManNameList outVManTagList outVManQPList

    createAllVMans $outVManNameList $outVManTagList $outVManQPList

    addPortsToAllVMans $outVManNameList $inRingPortSeq

    addAllVMansProtectByAllDomains $outVManNameList $inDomainNameSeq
}

##################################################################
# Protected VMAN Modification : Deletion of Protection and VMAN
##################################################################
proc modifyProtectedVManDelete {inVManNameSeq inDomainNameSeq inRingPortSeq} {

    global abort_on_error

    validateVManUpdateParams $inVManNameSeq $inDomainNameSeq $inRingPortSeq

    set tmpVManNameList   [split $inVManNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]
    
    delPortsFromAllVMans $tmpVManNameList $inRingPortSeq    

    remAllVMansProtectByAllDomains $tmpVManNameList $tmpDomainNameList
    
    delAllVMans $tmpVManNameList
}

##################################################################
# Protected VMAN Modification : Insertion of Protection
##################################################################
proc modifyProtectedVManInsert {inVManNameSeq inDomainNameSeq inRingPortSeq} {

    global abort_on_error

    validateVManUpdateParams $inVManNameSeq $inDomainNameSeq $inRingPortSeq

    set tmpVManNameList   [split $inVManNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]

    addPortsToAllVMans $tmpVManNameList $inRingPortSeq

    addAllVMansProtectByAllDomains $tmpVManNameList $inDomainNameSeq
}

##################################################################
# Protected VMAN Modification : Removal of Protection
##################################################################
proc modifyProtectedVManRemove {inVManNameSeq inDomainNameSeq inRingPortSeq} {

    global abort_on_error

    validateVManUpdateSharedLinkParams $inVManNameSeq $inDomainNameSeq

    set tmpVManNameList   [split $inVManNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]
    
    delPortsFromAllVMans $tmpVManNameList $inRingPortSeq

    remAllVMansProtectByAllDomains $tmpVManNameList $tmpDomainNameList

    
}

##################################################################
# Protected VMAN Modification : Insert and Removal of Protection
##################################################################
proc modifyProtectedVManInsertRemove {inVManNameSeq
                                inDomainNameSeq
                                inRingPortSeq
                                inIRDomainNameSeq
                                inIRRingPortSeq} {
    global abort_on_error

    modifyProtectedVManRemove $inVManNameSeq \
                              $inIRDomainNameSeq \
                              $inIRRingPortSeq


    modifyProtectedVManInsert $inVManNameSeq \
                              $inDomainNameSeq \
                              $inRingPortSeq

}

####################################################################
# Modification of 802.1Q VMAN(s) on protecting EAPS Domains
####################################################################
proc modifyEapsProtectedVMan {inModifyActionType
                              inVManNameTagQPSeq
                              inVManNameSeq
                              inDomainNameSeq
                              inRingPortSeq
                              inIRDomainNameSeq
                              inIRRingPortSeq} {
    global abort_on_error
    global isExos

    if {[string match $isExos true]} {
        create log entry &quot;Starting VMAN EAPS-Protection Modification on Switch&quot;
    }

    switch $inModifyActionType {
      "Modify_Create" {
       modifyProtectedVManCreate $inVManNameTagQPSeq \
                                 $inDomainNameSeq \
                                 $inRingPortSeq
      }
      "Modify_Delete" {
       modifyProtectedVManDelete $inVManNameSeq \
                                 $inDomainNameSeq \
                                 $inRingPortSeq
      }
      "Modify_Insert" {
       modifyProtectedVManInsert $inVManNameSeq \
                                 $inDomainNameSeq \
                                 $inRingPortSeq
      }
      "Modify_Remove" {
       modifyProtectedVManRemove $inVManNameSeq \
                                 $inDomainNameSeq \
                                 $inRingPortSeq
      }
      "Modify_InsRem" {
      modifyProtectedVManInsertRemove $inVManNameSeq \
                                      $inDomainNameSeq \
                                      $inRingPortSeq \
                                      $inIRDomainNameSeq \
                                      $inIRRingPortSeq
      }
      default {
       error &quot;FAILED: Unknown Modify Action ($inModifyActionType)&quot;
      }
    }

    if {[string match $isExos true]} {
        create log entry &quot;Finished VMAN EAPS-Protection Modification on Switch&quot;
    }
}

############################################################################
# CLI Configuration Starting for VMAN Service Modification
############################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

modifyEapsProtectedVMan $eapsProtModifyActionType \
                        $eapsProtVManNameTagQPSeq \
                        $eapsProtVManNameSeq \
                        $eapsProtDomainNameSeq \
                        $eapsProtRingPortSeq \
                        $eapsProtIRDomainNameSeq \
                        $eapsProtIRRingPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_MOD_EAPSProtected_VMAN</rollbackScript>
<postprocessScript>Sync_MOD_EAPSProtected_VMAN</postprocessScript>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
