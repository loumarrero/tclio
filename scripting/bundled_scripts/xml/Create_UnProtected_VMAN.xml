<!-- This file is generated by system. Do not edit this file. -->
<script name="Create_UnProtected_VMAN">
<comments>This scripts creates a unprotected VMAN and adds it to Ports</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : VMAN creation and adding it to a list of Ports (default STP)
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create VMAN
# 2.  Assign the VMAN to a QoS Profile
# 3.  Add a List of Ports to the VMAN
#####################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;This script creates a VMAN and adds a List of Ports&quot;
# @SectionStart (description = &quot;Unprotected VMAN Create Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;Comma Listed UnTagged UNI_Port to be removed from Default VLAN&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVManDelInDefVlanPortSeq &quot;&quot;
set var permitRingPortsAsUni Yes

################################################################################
# VMAN Definition
################################################################################

# @VariableFieldLabel (description = &quot;802.1ad VMAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotVManName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ad VMAN Tag&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var unprotVManSTag &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ad VMAN EtherType&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotVManEtherType &quot;&quot;

# @VariableFieldLabel (description = &quot;VMAN QoS Profile Number&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues =[1,2,3,4,5,6,7,8])
set var unprotVManQPNum 8

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVManPortTagStsSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

############################################################################
# TCL Procedure for VMAN Create Parameters Validation
############################################################################
proc validateVManCreateParams {inVManName
                               inVManQPNum} {
    global abort_on_error

    IF (![expr [string length $inVManName] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name empty.&quot;
    ENDIF

    IF (![expr [string length $inVManQPNum] &gt; 0]) THEN
       error &quot;FAILED: VMAN QoS Profile empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTuple {inUniPortTagStatus
                                    inVManType
                                    outUniPortNum
                                    outTagStatus} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagStatus  tmpTagStatus

     set tmpUniTagList [split $inUniPortTagStatus '+']

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI-Port Tagging-Status, Tuple=>$inUniPortTagStatus&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagStatus  [lindex $tmpUniTagList 1]

     if {[string equal $inVManType "UNTAGGED_VMAN"]} {
         if {[string equal $outTagStatus "tagged"]} {
            error &quot;Invalid UNI-Port Tagging-Status($outTagStatus), tagged port can not be added to untagged VMAN.&quot;
         }
     }
}

################################################################################
# Procedure to Validate List of Tuples of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTupleSeq {inUniPortTagStatusSeq
                                       inVManType
                                       outUniPortList
                                       outTagStatusList} {
     global abort_on_error

     if {[string length $inUniPortTagStatusSeq] == 0} {
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     }

     set tmpUniPortTagStatusList [split $inUniPortTagStatusSeq ,]

     if {[llength $tmpUniPortTagStatusList] == 0} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList   tmpUniPortList
     upvar $outTagStatusList tmpTagStatusList

     foreach currTuple $tmpUniPortTagStatusList {

        set outUniPortNum ""
        set outTagStatus  ""

        validateUniPortTagStatusTuple $currTuple \
                                      $inVManType \
                                      outUniPortNum \
                                      outTagStatus

        lappend tmpUniPortList    $outUniPortNum
        lappend tmpTagStatusList  $outTagStatus
     }
}

############################################################################
# TCL Procedure to Create the VMAN and add Ports to it
############################################################################
proc create8021adVMan {inVManName
                       inVManSTag
                       inVManQPNum
                       inUniPortList
                       inTagStatusList
                       inVManEtherType
                       inDelInDefVlanPortSeq} {

    global abort_on_error

    if {[catch {
       create vman $inVManName
    } result]} {
       error &quot;FAILED: Could not create vman $inVManName, $result&quot;
    }

    IF ([expr [string length $inVManSTag] &gt; 0]) THEN
        if {[catch {
           config vman $inVManName tag $inVManSTag
        } result]} {
           delete vman $inVManName
           error &quot;FAILED: Invalid Tag $inVManSTag for VMan $inVManName, $result&quot;
        }
    ENDIF

    ## if {[catch {
    ##   config vman $inVManName qosprofile qp$inVManQPNum
    ## } result]} {
    ##   delete vman $inVManName
    ##   error &quot;FAILED: Invalid QoS-Profile for VMan $inVManName, $result&quot;
    ## }

    if {[catch {
       config vman ethertype $inVManEtherType
    } result]} {
       delete vman $inVManName
       error &quot;FAILED: Invalid Ether-Type for VMan $inVManName, $result&quot;
    }

    if {[catch {
       addVManToAllUnis $inVManName \
                     $inUniPortList \
                     $inTagStatusList \
                     $inDelInDefVlanPortSeq
    } result]} {
       delete vman $inVManName
       error "FAILED: Could not add port to vman $inVManName, $result"
    }
}

###########################################################################
# Procedure to add the VMAN to one UNI Port on the switch
##########################################################################
proc addVManToOneUni {inVManName
                           inUniPortNum
                           inTagStatus} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       configure vman $inVManName add port $inUniPortNum $inTagStatus

       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI    $permitRingPortsAsUni
       ENDIF
    } result]} {
       error &quot;FAILED: Cannot add UNI-Port $inUniPortNum to VMAN $inVManName, $result&quot;
    }
}

###########################################################################
# Procedure to Add the VMAN to all the UNI Ports on the switch
###########################################################################
proc addVManToAllUnis {inVManName
                            inUniPortList
                            inTagStatusList
                            inDelInDefVlanPortSeq} {
    global abort_on_error

    set delInDefVlanPortList [split $inDelInDefVlanPortSeq ,]
    foreach delInDefVlanPort $delInDefVlanPortList {
        if {[catch {
            configure vlan Default del port $delInDefVlanPort
        } result]} {
            error &quot;FAILED: Cannot delete Port $delInDefVlanPort from default VLAN, $result&quot;
        }
    }

    foreach currUniPort   $inUniPortList \
            currTagStatus $inTagStatusList {

       addVManToOneUni $inVManName \
                            $currUniPort \
                            $currTagStatus
    }
}

############################################################################
# TCL Procedure to validate and Create the 802.1ad VMAN and add Ports to it
############################################################################
proc createUnProtectedVMan {inVManName
                            inVManSTag
                            inVManQPNum
                            inUniPortTagStsSeq
                            inVManEtherType
                            inDelInDefVlanPortSeq} {
    global abort_on_error
    global isExos
    set outUniPortList [list]
    set outTagStatusList   [list]
    set outVManType "TAGGED_VMAN"

    if {[string match $isExos true]} {
        create log entry &quot;Starting Unprotected VMAN Creation on Switch&quot;
       }

       if {[string length $inVManSTag] == 0} {
        set outVManType "UNTAGGED_VMAN"
    }

    validateVManCreateParams $inVManName \
                             $inVManQPNum

    validateUniPortTagStatusTupleSeq $inUniPortTagStsSeq \
                                     $outVManType \
                                     outUniPortList \
                                     outTagStatusList

    create8021adVMan $inVManName \
                     $inVManSTag \
                     $inVManQPNum \
                     $outUniPortList \
                     $outTagStatusList \
                     $inVManEtherType \
                     $inDelInDefVlanPortSeq

    if {[string match $isExos true]} {
        create log entry &quot;Finished Unprotected VMAN Creation on Switch&quot;
       }
}

################################################################################
# CLI MODE Settings
################################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

createUnProtectedVMan $unprotVManName \
                      $unprotVManSTag \
                      $unprotVManQPNum \
                      $unprotVManPortTagStsSeq \
                      $unprotVManEtherType \
                      $unprotVManDelInDefVlanPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_CRE_UnProtected_VMAN</rollbackScript>
<postprocessScript>Sync_CRE_UnProtected_VMAN</postprocessScript>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
