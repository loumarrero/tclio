<!-- This file is generated by system. Do not edit this file. -->
<script name="Delete_MixedProtected_VMAN">
<comments>This scripts deletes a List of partially protected VMANs</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : VMAN deletion from partial EAPS domain's protection
#############################################################################
# Revision      : 1.0
# Last Updated  : 20-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1. Delete the list of VMAN from protection of a list of EAPS domains.
# 1. Delete the list of Ring Ports from each VMAN in the List.
# 2. Delete the list of VMAN(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;scripting.Script to delete partially protected VMANs&quot;
# @SectionStart (description = &quot;VMAN Deletion Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

################################################################################
# VMAN Definition
################################################################################

# @VariableFieldLabel (description = &quot;Choose VMAN Delete Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [DELETE_PROTECTED,DELETE_UNPROTECTED])
set var mixedProtDeleteType DELETE_PROTECTED

# @VariableFieldLabel (description = &quot;Comma separated VMAN Names&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var mixedProtVManNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var mixedProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated VMAN Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var mixedProtVManPortSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# TCL Procedure for VMAN Parameter Validation
############################################################################
proc validateVManParams {inVManNameSeq} {
    global abort_on_error
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF

    IF (![expr [string length $inVManNameSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name List is empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure for VMAN Protection Parameter Validation
############################################################################
proc validateProtectParams {inDomainNameSeq} {

    global abort_on_error

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
}

#################################################################################
# Define TCL procedures for VMAN removal from EAPS Domain Ring Ports
# and subsequent deletion of the VMAN
################################################################################
proc remProtectOneVManFromOneDomain {inVManName
                                     inDomainName} {
    global abort_on_error

    if {[catch {
        config eaps $inDomainName delete protect $inVManName
    } errMsgText]} {
        puts &quot;FAILED: Cannot delete protection of VMAN $inVManName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

proc remProtectOneVManFromAllDomain {inVManName
                                     inDomainNameList} {
    global abort_on_error

    foreach currDomainName $inDomainNameList {
       remProtectOneVManFromOneDomain $inVManName \
                                      $currDomainName
    }
}

proc delPortsFromOneVMan {inVManName
                          inVManPortSeq} {
    global abort_on_error

    IF ([expr [string length $inVManPortSeq] &gt; 0]) THEN
      if {[catch {
         config vman $inVManName delete ports $inVManPortSeq
      } errMsgText]} {
         puts &quot;FAILED: Could not delete Ports $inVManPortSeq from VMAN $inVManName, $errMsgText&quot;
      }
  ENDIF
}

proc delOneVMan {inVManName} {

    global abort_on_error

    if {[catch {
       delete vman $inVManName
    } errMsgText]} {
       regexp {.*Invalid input detected at '^' marker.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
           puts &quot;FAILED: Could not delete VMAN $inVManName, $errMsgText&quot;
       ELSE
         error &quot;FAILED: Could not delete VMAN $inVManName, $errMsgText&quot;
       ENDIF
    }
}

proc remProtectAllVManFromAllDomain {inVManNameList
                                     inDomainNameList} {
    global abort_on_error

    foreach currVManName $inVManNameList {
       remProtectOneVManFromAllDomain $currVManName \
                                      $inDomainNameList
    }
}

proc delPortsFromAllVMan {inVManNameList
                          inVManPortSeq} {
    global abort_on_error

    foreach currVManName $inVManNameList {
       delPortsFromOneVMan $currVManName \
                           $inVManPortSeq
    }
}

proc delAllVMan {inVManNameList} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       delOneVMan $currVManName
    }
}

######################################################################
# TCL Procedure for EAPS Protected VMAN deletion
######################################################################
proc deleteProtectedVMan {inVManNameSeq
                          inDomainNameSeq
                          inVManPortSeq} {
    global abort_on_error

    validateVManParams $inVManNameSeq

    validateProtectParams $inDomainNameSeq

    set tmpVManNameList   [split $inVManNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]

  delPortsFromAllVMan $tmpVManNameList \
                        $inVManPortSeq

    remProtectAllVManFromAllDomain $tmpVManNameList \
                                   $tmpDomainNameList

    delAllVMan $tmpVManNameList
}

######################################################################
# TCL Procedure for Un-Protected VMAN deletion
######################################################################
proc deleteUnProtectedVMan {inVManNameSeq
                            inVManPortSeq} {
    global abort_on_error

    validateVManParams $inVManNameSeq

    set tmpVManNameList [split $inVManNameSeq ,]

    delPortsFromAllVMan $tmpVManNameList \
                        $inVManPortSeq

    delAllVMan $tmpVManNameList
}

######################################################################
# TCL Procedure for VMAN deletion after protection removal from
# EAPS Domain after validating all parameters
######################################################################
proc handledMixProtectedVManDelete {inDeleteType
                                    inVManNameSeq
                                    inDomainNameSeq
                                    inVManPortSeq} {
    global abort_on_error
    global isExos

  if {[string match $isExos true]} {
      create log entry &quot;START-MIX-PROTECTED-VMAN-DELETE on Switch&quot;
  }

    switch $inDeleteType {
       DELETE_PROTECTED {
       deleteProtectedVMan $inVManNameSeq \
                           $inDomainNameSeq \
                           $inVManPortSeq
       }
       DELETE_UNPROTECTED {
       deleteUnProtectedVMan $inVManNameSeq \
                             $inVManPortSeq
       }
       default {
        error &quot;FAILED: Invalid VMAN Deletion Type&quot;
       }
    }

    if {[string match $isExos true]} {
      create log entry &quot;FINISH-MIX-PROTECTED-VMAN-DELETE on Switch&quot;
  }
}

##############################################################
# CLI Configuration Starting
##############################################################
setCliErrorHandling $abortOnCliError

handledMixProtectedVManDelete $mixedProtDeleteType \
                              $mixedProtVManNameSeq \
                              $mixedProtDomainNameSeq \
                              $mixedProtVManPortSeq

#################################################################################
## Now Sync VMAN and Topology on this device so that they are shown in the Client
#################################################################################
PerformSync -device $deviceIP -scope VLAN
IF (!$match($mixedProtDeleteType,DELETE_PROTECTED) ) THEN
 PerformSync -device $deviceIP -scope EapsDomain -type protected -name $mixedProtDomainNameSeq
ENDIF
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<menuScope>TOOLS</menuScope>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
