<!-- This file is generated by system. Do not edit this file. -->
<script name="Rollback_CRE_PBB_Service">
<comments>scripting.Script to rollback creation of PBB S/C-Tag Service from UNI Port(s)</comments>
<content>#@MetaDataStart
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Rollback creation of a PBB Service
#############################################################################
# Revision      : 1.0
# Last Updated  : 09-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose: scripting.Script to rollback creation of a PBB S/C-Tagged or Port-based
#          Service from a List of UNI Port(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Rollback creation of a S/C-VLAN from UNI Port(s) and Unlink from B-VLAN&quot;

# @SectionStart (description = &quot;PBB Service Create-Rollback Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;PBB Service-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [PBB_STAG,PBB_CTAG,PBB_PORT])
set var ethServPbbType PBB_STAG

# @VariableFieldLabel (description = &quot;Switch-Platform&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes,
#   validValues = [MODEL_BD10K,MODEL_BD12K,MODEL_BD12804R,MODEL_BD20800])
set var ethServPlatformModel &quot;&quot;

# @VariableFieldLabel (description = &quot;B-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServBVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;S/C-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServSorCVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;S/C-VLAN Tag&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var ethServSorCVLanTag &quot;&quot;

# @VariableFieldLabel (description = &quot;I-SID Name on BD20K&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = no,
#   readonly    = no)
set var ethServISidName &quot;&quot;

# @VariableFieldLabel (description = &quot;I-SID Value&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var ethServISidValue &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var ethServUniPortTagStsSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+BWP_Name&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServUniPortBWPNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServOneRateBWParamsTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServTwoRateBWParamsTupleSeq &quot;&quot;

set var permitRingPortsAsUni no

# @SectionEnd
# @MetaDataEnd
############################################################################

############################################################################
#        Configuration Validate and Programming on the Switch
############################################################################

###########################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI_Port+BWP_Name'
###########################################################################
proc validateUniPortBWPTuple {inUniPortBWPName
                              outUniPortNum
                              outBWPName} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outBWPName    tmpBWPName

     set tmpUniBWPList [split $inUniPortBWPName '+']

     if {[llength $tmpUniBWPList] != 2} {
         error &quot;Invalid UNI-Port, BWP-Name Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniBWPList 0]
     set tmpBWPName    [lindex $tmpUniBWPList 1]
}

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple => 'BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum'
###########################################################################
proc validateOneRateBWParamsTuple {inBWPNameParamsTuple
                                   outBWPName
                                   outCOSMode
                                   outMeterName
                                   outCIRValue
                                   outCIRUnit
                                   outCBSValue
                                   outCBSUnit
                                   outOOPAction
                                   outSchedType
                                   outACLName
                                   outQPNum} {
     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outCIRValue   tmpCIRValue
     upvar $outCIRUnit    tmpCIRUnit
     upvar $outCBSValue   tmpCBSValue
     upvar $outCBSUnit    tmpCBSUnit
     upvar $outOOPAction  tmpOOPAction
     upvar $outSchedType  tmpSchedType
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 10} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpCIRValue   [lindex $tmpBWPAttrList 2]
     set tmpCIRUnit    [lindex $tmpBWPAttrList 3]
     set tmpCBSValue   [lindex $tmpBWPAttrList 4]
     set tmpCBSUnit    [lindex $tmpBWPAttrList 5]
     set tmpOOPAction  [lindex $tmpBWPAttrList 6]
     set tmpSchedType  [lindex $tmpBWPAttrList 7]
     set tmpACLName    [lindex $tmpBWPAttrList 8]
     set tmpQPNum      [lindex $tmpBWPAttrList 9]
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum'
###########################################################################
proc validateTwoRateBWParamsTuple {inBWPNameParamsTuple
                                   outBWPName
                                   outCOSMode
                                   outMeterName
                                   outCIRValue
                                   outCIRUnit
                                   outCBSValue
                                   outCBSUnit
                                   outEIRValue
                                   outEIRUnit
                                   outEBSValue
                                   outEBSUnit
                                   outSchedType
                                   outACLName
                                   outQPNum} {
     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outCIRValue   tmpCIRValue
     upvar $outCIRUnit    tmpCIRUnit
     upvar $outCBSValue   tmpCBSValue
     upvar $outCBSUnit    tmpCBSUnit
     upvar $outEIRValue   tmpEIRValue
     upvar $outEIRUnit    tmpEIRUnit
     upvar $outEBSValue   tmpEBSValue
     upvar $outEBSUnit    tmpEBSUnit
     upvar $outSchedType  tmpSchedType
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 13} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpCIRValue   [lindex $tmpBWPAttrList 2]
     set tmpCIRUnit    [lindex $tmpBWPAttrList 3]
     set tmpCBSValue   [lindex $tmpBWPAttrList 4]
     set tmpCBSUnit    [lindex $tmpBWPAttrList 5]
     set tmpEIRValue   [lindex $tmpBWPAttrList 6]
     set tmpEIRUnit    [lindex $tmpBWPAttrList 7]
     set tmpEBSValue   [lindex $tmpBWPAttrList 8]
     set tmpEBSUnit    [lindex $tmpBWPAttrList 9]
     set tmpSchedType  [lindex $tmpBWPAttrList 10]
     set tmpACLName    [lindex $tmpBWPAttrList 11]
     set tmpQPNum      [lindex $tmpBWPAttrList 12]
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form 'UNI_Port+BWP_Name'
#############################################################################
proc validateUniPortToBWPNameTupleSeq {inUniPortToBWPNameSeq
                                       outUniPortList
                                       outBWPNameList} {
     global abort_on_error

     if {![string length $inUniPortToBWPNameSeq]} {
        return
     }

     set tmpUniPortBWPNameList [split $inUniPortToBWPNameSeq ,]

     if {![llength $tmpUniPortBWPNameList]} {
        error &quot;UNI-Port, BWP-Name Tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outBWPNameList tmpBWPNameList

     foreach currTuple $tmpUniPortBWPNameList {

        set outUniPortNum ""
        set outBWPName    ""

        validateUniPortBWPTuple $currTuple \
                                outUniPortNum \
                                outBWPName

        lappend tmpUniPortList $outUniPortNum
        lappend tmpBWPNameList $outBWPName
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Name:CIR_V+CIR_U+CBS_V+CBS_U+SCH_T'
###########################################################################
proc validateOneRateBWParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outCIRValue   ""
        set outCIRUnit    ""
        set outCBSValue   ""
        set outCBSUnit    ""
        set outOOPAction  ""
        set outSchedType  ""
        set outACLName    ""
        set outQPNum      ""

        validateOneRateBWParamsTuple $currTuple \
                                     outBWPName \
                                     outCOSMode \
                                     outMeterName \
                                     outCIRValue \
                                     outCIRUnit \
                                     outCBSValue \
                                     outCBSUnit \
                                     outOOPAction \
                                     outSchedType \
                                     outACLName \
                                     outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.CIRValue)   $outCIRValue
        set tmpBWPNameToParamsMap($outBWPName.CIRUnit)    $outCIRUnit
        set tmpBWPNameToParamsMap($outBWPName.CBSValue)   $outCBSValue
        set tmpBWPNameToParamsMap($outBWPName.CBSUnit)    $outCBSUnit
        set tmpBWPNameToParamsMap($outBWPName.OOPAction)  $outOOPAction
        set tmpBWPNameToParamsMap($outBWPName.SchedType)  $outSchedType
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum'
###########################################################################
proc validateTwoRateBWParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outCIRValue   ""
        set outCIRUnit    ""
        set outCBSValue   ""
        set outCBSUnit    ""
        set outEIRValue   ""
        set outEIRUnit    ""
        set outEBSValue   ""
        set outEBSUnit    ""
        set outSchedType  ""
        set outACLName    ""
        set outQPNum      ""

        validateTwoRateBWParamsTuple $currTuple \
                                     outBWPName \
                                     outCOSMode \
                                     outMeterName \
                                     outCIRValue \
                                     outCIRUnit \
                                     outCBSValue \
                                     outCBSUnit \
                                     outEIRValue \
                                     outEIRUnit \
                                     outEBSValue \
                                     outEBSUnit \
                                     outSchedType \
                                     outACLName \
                                     outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.CIRValue)   $outCIRValue
        set tmpBWPNameToParamsMap($outBWPName.CIRUnit)    $outCIRUnit
        set tmpBWPNameToParamsMap($outBWPName.CBSValue)   $outCBSValue
        set tmpBWPNameToParamsMap($outBWPName.CBSUnit)    $outCBSUnit
        set tmpBWPNameToParamsMap($outBWPName.EIRValue)   $outEIRValue
        set tmpBWPNameToParamsMap($outBWPName.EIRUnit)    $outEIRUnit
        set tmpBWPNameToParamsMap($outBWPName.EBSValue)   $outEBSValue
        set tmpBWPNameToParamsMap($outBWPName.EBSUnit)    $outEBSUnit
        set tmpBWPNameToParamsMap($outBWPName.SchedType)  $outSchedType
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Objects (Meter,ACL)
##########################################################################
proc deleteOneBWPObj {inMeterName
                      inACLName} {

    delete access-list $inACLName
    delete meter $inMeterName
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from one UNI Port
##########################################################################
proc deleteOneUniBWPAttachment {inUniPortNum
                                inACLName} {
	global abort_on_error
    configure access-list delete $inACLName ports $inUniPortNum ingress
}

############################################################################
# Cleanup QoS Objects (Meter, ACL etc.) for a List of BW-Profile(s)
############################################################################
proc deleteAllBWPObjs {inBWPNameList
                       inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currBWPName $inBWPNameList {

        set currMeterName $tmpBWPNameToParamsMap($currBWPName.MeterName)
        set currACLName   $tmpBWPNameToParamsMap($currBWPName.ACLName)

        deleteOneBWPObj $currMeterName $currACLName
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from all UNI Port(s)
##########################################################################
proc deleteAllUniBWPAttachment {inUniPortList
                                inBWPNameList
                                inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)

        deleteOneUniBWPAttachment $currUniPort $currACLName
     }
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD20800
############################################################################
proc unassignAllUniBWPOnBD20800 {inUniPortList
                                 inBWPNameList
                                 inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     deleteAllUniBWPAttachment $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

     deleteAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap
}


############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

############################################################################
# TCL Procedure To Validate PBB Service-Type and Platform Model combination
############################################################################
proc validatePbbServiceType {inPbbType} {

    switch $inPbbType {
       PBB_CTAG {}
       PBB_STAG {}
       PBB_PORT {}
       default {
        error &quot;FAILED: Invalid PBB Service-Type => $inPbbType&quot;
       }
    }
}

proc validatePbbTypePlatformModel {inPbbType
                                   inPlatformModel} {

    global abort_on_error

    validatePbbServiceType $inPbbType

    switch $inPlatformModel {
       MODEL_BD10K {
         if {![string compare $inPbbType "PBB_CTAG"]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD10K.&quot;
         }
       }
       MODEL_BD12K {
         if {![string compare $inPbbType "PBB_CTAG"]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD12K.&quot;
         }
       }
       MODEL_BD12804R {
         if {![string compare $inPbbType "PBB_CTAG"]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD12K.&quot;
         }
       }
       MODEL_BD20800 {
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

############################################################################
# TCL Procedure To Validate B-VLAN based Service Creation Parameters
############################################################################
proc validateServiceDeleteParams {inBVLanName
                                  inSorCVLanName} {

    IF (![expr [string length $inBVLanName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inSorCVLanName] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Name is empty.&quot;
    ENDIF
}

#############################################################
# TCL Procedure To Validate I-SID Name
#############################################################
proc validateISidName {inISidName} {

    IF (![expr [string length $inISidName] &gt; 0]) THEN
       error &quot;FAILED: I-SID Name is empty.&quot;
    ENDIF
}

###########################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI_Port+Tag_Status'
###########################################################################
proc validateUniPortTagStsTuple {inUniPortTagSts
                                 outUniPortNum
                                 outTagSts} {

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagSts     tmpTagSts

     set tmpUniTagList [split $inUniPortTagSts '+']

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI-Port, Tagging-Status Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagSts     [lindex $tmpUniTagList 1]
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form 'UNI_Port+Tag_Status'
#############################################################################
proc validateUniPortTagStsTupleSeq {inUniPortTagStsSeq
                                    outUniPortList
                                    outTagStsList} {

     IF (![expr [string length $inUniPortTagStsSeq] &gt; 0]) THEN
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     ENDIF

     set tmpUniPortTagStsList [split $inUniPortTagStsSeq ,]

     if {![llength $tmpUniPortTagStsList]} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outTagStsList  tmpTagStsList

     foreach currTuple $tmpUniPortTagStsList {

        set outUniPortNum ""
        set outTagSts     ""

        validateUniPortTagStsTuple $currTuple \
                                   outUniPortNum \
                                   outTagSts

        lappend tmpUniPortList $outUniPortNum
        lappend tmpTagStsList  $outTagSts
     }
}

##########################################################################
# Procedure to remove all UNI-Port(s) from S/C-VLAN on the switch
##########################################################################
proc remAllUnisFromSorCVLan {inPbbType
                             inSorCVLanName
                             inUniPortList} {
    global abort_on_error

     foreach currUniPort $inUniPortList {

       remOneUnisFromSorCVLan $inPbbType \
       						  $inSorCVLanName \
                              $currUniPort
    }
}

##########################################################################
# Procedure to remove one UNI-Port(s) from S/C-VLAN on the switch
##########################################################################
proc remOneUnisFromSorCVLan {inPbbType
                             inSorCVLanName
                             inUniPort} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          configure cvlan $inSorCVLanName delete port $inUniPort
       } else {
          configure svlan $inSorCVLanName delete port $inUniPort
       }
    } errMsgText]} {
       error &quot;FAILED: Cannot delete Ports $inUniPort from S/C-VLAN, $errMsgText&quot;
    }

}

###########################################################################
# Procedure to Delete the S/C-VLAN on the switch
###########################################################################
proc deleteSorCVLan {inPbbType
                     inSorCVLanName} {

    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       error &quot;FAILED: Could not delete S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

##############################################################################
# Procedure to remove S/C-VLAN from I-SID and delete I-SID on BD20K Platforms
##############################################################################
proc remSorCVLanDeleteISidOnBD2XK {inPbbType
                                   inSorCVLanName
                                   inISidName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config isid $inISidName delete cvlan $inSorCVLanName
       } else {
          config isid $inISidName delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       error &quot;FAILED: Can't remove S/C-VLAN $inSorCVLanName from I-SID $inISidName, $errMsgText&quot;
    }

    if {[catch {
       delete isid $inISidName
    } errMsgText]} {
       error &quot;FAILED: Can't delete I-SID $inISidName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to remove the S/C-VLAN from B-VLAN on BD10K/BD12K Platforms
###########################################################################
proc remSorCVLanFromBVLanOnBD1XK {inPbbType
                                  inBVLanName
                                  inSorCVLanName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config bvlan $inBVLanName delete cvlan $inSorCVLanName
       } else {
          config bvlan $inBVLanName delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       error &quot;FAILED: Can't remove S/C-VLAN $inSorCVLanName from B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to remove I-SID from B-VLAN on BD20K Platforms
###########################################################################
proc remISidFromBVLanOnBD2XK {inBVLanName
                              inISidName} {
    global abort_on_error

    if {[catch {
       config bvlan $inBVLanName delete isid $inISidName
    } errMsgText]} {
       error &quot;FAILED: Can't remove I-SID $inISidName from B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

############################################################################
# S-TAGGED PBB Service Deletion on BD10K/BD12K Platforms
############################################################################
# 1) Remove S/C-VLAN from B-VLAN
# 2) Remove UNI Ports from S/C-VLAN
# 3) Delete S/C-VLAN
############################################################################
proc deletePBBServiceSorCTagOnBD1XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inUniPortSeq} {

    remSorCVLanFromBVLanOnBD1XK $inPbbType \
                                $inBVLanName \
                                $inSorCVLanName

    remAllUnisFromSorCVLan $inPbbType \
                           $inSorCVLanName \
                           $inUniPortSeq

    deleteSorCVLan $inPbbType \
                   $inSorCVLanName
}

############################################################################
# S-TAGGED PBB Service Deletion on BD20K Platforms
############################################################################
# 1) Remove I-SID from B-VLAN
# 2) Remove S/C-VLAN from I-SID and then delete I-SID
# 3) Remove UNI Ports from S/C-VLAN
# 4) Delete S/C-VLAN
############################################################################
proc deletePBBServiceSorCTagOnBD2XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inISidName
                                     inUniPortList} {

    remISidFromBVLanOnBD2XK $inBVLanName $inISidName

    remSorCVLanDeleteISidOnBD2XK $inPbbType \
                                 $inSorCVLanName \
                                 $inISidName

    remAllUnisFromSorCVLan $inPbbType \
                           $inSorCVLanName \
                           $inUniPortList

    deleteSorCVLan $inPbbType \
                   $inSorCVLanName
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on BD1XK Platforms
############################################################################
proc rollbackPBBServiceSorCTagCREOnBD1XK {inPbbType
                                          inBVLanName
                                          inSorCVLanName
                                          inUniPortTagStsSeq} {
    set outUniPortList [list]
    set outTagStsList  [list]

    validateServiceDeleteParams $inBVLanName \
                                $inSorCVLanName

    validateUniPortTagStsTupleSeq $inUniPortTagStsSeq \
                                  outUniPortList \
                                  outTagStsList

    deletePBBServiceSorCTagOnBD1XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $outUniPortList
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on BD2XK Platforms
############################################################################
proc rollbackPBBServiceSorCTagCREOnBD2XK {inPbbType
                                          inBVLanName
                                          inSorCVLanName
                                          inISidName
                                          inUniPortTagStsSeq
                                          inBWPNameList
                                          inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    set outUniPortList [list]
    set outTagStsList  [list]

    validateServiceDeleteParams $inBVLanName \
                                $inSorCVLanName

    validateISidName $inISidName

    validateUniPortTagStsTupleSeq $inUniPortTagStsSeq \
                                  outUniPortList \
                                  outTagStsList

    unassignAllUniBWPOnBD20800 $outUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

    deletePBBServiceSorCTagOnBD2XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inISidName \
                                   $outUniPortList
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on UNI Ports
############################################################################
proc rollbackPBBServiceSorCTagCreate {inPbbType
                                      inPlatformModel
                                      inBVLanName
                                      inSorCVLanName
                                      inSorCTag
                                      inISidName
                                      inISidValue
                                      inUniPortTagStsSeq
                                      inUniPortToBWPNameSeq
                                      inOneRateBWParamsTupleSeq
                                      inTwoRateBWParamsTupleSeq} {
    global isExos
    set outUniPortList [list]
    set outBWPNameList [list]
    set outBWPNameToParamsMap(SorCVLanName) $inSorCVLanName

	if {[string match $isExos true]} {
    	create log entry &quot;START-Create-Rollback PBB S/C-TAG Service&quot;
	}

    validatePbbTypePlatformModel $inPbbType \
                                 $inPlatformModel

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outUniPortList \
                                     outBWPNameList
    switch $inPlatformModel {
       MODEL_BD10K {
       rollbackPBBServiceSorCTagCREOnBD1XK $inPbbType \
                                           $inBVLanName \
                                           $inSorCVLanName \
                                           $inSorCTag \
                                           $inISidValue \
                                           $inUniPortTagStsSeq
       }
       MODEL_BD12K {
       rollbackPBBServiceSorCTagCREOnBD1XK $inPbbType \
                                           $inBVLanName \
                                           $inSorCVLanName \
                                           $inSorCTag \
                                           $inISidValue \
                                           $inUniPortTagStsSeq
       }
       MODEL_BD12804R {
       rollbackPBBServiceSorCTagCREOnBD1XK $inPbbType \
                                           $inBVLanName \
                                           $inSorCVLanName \
                                           $inSorCTag \
                                           $inISidValue \
                                           $inUniPortTagStsSeq
       }
       MODEL_BD20800 {
       if (![expr [string length $inOneRateBWParamsTupleSeq] &gt; 0]) {
       		validateTwoRateBWParamsTupleSeq $inTwoRateBWParamsTupleSeq \
						outBWPNameToParamsMap
       } else {
       		validateOneRateBWParamsTupleSeq $inOneRateBWParamsTupleSeq \
                                       outBWPNameToParamsMap
       }

       rollbackPBBServiceSorCTagCREOnBD2XK $inPbbType \
                                           $inBVLanName \
                                           $inSorCVLanName \
                                           $inISidName \
                                           $inUniPortTagStsSeq \
                                           $outBWPNameList \
                                           outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }

	if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Create-Rollback PBB S/C-TAG Service&quot;
	}
}

############################################################################
# CLI Configuration Scripts Execution STARTING
############################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

rollbackPBBServiceSorCTagCreate $ethServPbbType \
                                $ethServPlatformModel \
                                $ethServBVLanName \
                                $ethServSorCVLanName \
                                $ethServSorCVLanTag \
                                $ethServISidName \
                                $ethServISidValue \
                                $ethServUniPortTagStsSeq \
                                $ethServUniPortBWPNameSeq \
                                $ethServOneRateBWParamsTupleSeq \
                                $ethServTwoRateBWParamsTupleSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<scriptOwner>system</scriptOwner>

</script>
