<!-- This file is generated by system. Do not edit this file. -->
<script name="Rollback_CRE_UnProtected_VMAN">
<comments>This scripts rollsback a previously created unprotected VMAN</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Rollback of a VMAN from a List of UNI Ports.
#############################################################################
# Revision      : 1.0
# Last Updated  : 09-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create VMAN
# 2.  Assign the VMAN to a QoS Profile
# 3.  Add a List of Ports to the VMAN
#####################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;To rollback a unprotected VMAN from UNI Ports&quot;
# @SectionStart (description = &quot;Unprotected VMAN Create Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

################################################################################
# VMAN Definition
################################################################################

# @VariableFieldLabel (description = &quot;802.1ad VMAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotVManName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ad VMAN Tag&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var unprotVManSTag &quot;&quot;

# @VariableFieldLabel (description = &quot;VMAN QoS Profile Number&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues =[1,2,3,4,5,6,7,8])
set var unprotVManQPNum 8

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status of VMAN&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVManPortTagStsSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

proc validateVendorName {inVendorName} {

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

############################################################################
# TCL Procedure for VMAN Delete Parameters Validation
############################################################################
proc validateVManDeleteParams {inVManName} {

    IF (![expr [string length $inVManName] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name empty.&quot;
    ENDIF

}

################################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTuple {inUniPortTagStatus
                                    outUniPortNum
                                    outTagStatus} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagStatus  tmpTagStatus

     set tmpUniTagList [split $inUniPortTagStatus '+']

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI-Port Tagging-Status, Tuple=>$inUniPortTagStatus&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagStatus  [lindex $tmpUniTagList 1]
}

################################################################################
# Procedure to Validate List of Tuples of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTupleSeq {inUniPortTagStatusSeq
                                       outUniPortList
                                       outTagStatusList} {
     global abort_on_error

     if {[string length $inUniPortTagStatusSeq] == 0} {
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     }

     set tmpUniPortTagStatusList [split $inUniPortTagStatusSeq ,]

     if {[llength $tmpUniPortTagStatusList] == 0} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList   tmpUniPortList
     upvar $outTagStatusList tmpTagStatusList

     foreach currTuple $tmpUniPortTagStatusList {

        set outUniPortNum ""
        set outTagStatus  ""

        validateUniPortTagStatusTuple $currTuple \
                                      outUniPortNum \
                                      outTagStatus

        lappend tmpUniPortList    $outUniPortNum
        lappend tmpTagStatusList  $outTagStatus
     }
}

##########################################################################
# Procedure to remove the VMAN from one UNI Port on the switch
##########################################################################
proc remVManFromOneUni {inVManName
                             inUniPortNum
                             inTagStatus} {
    if {[catch {
       configure vman $inVManName delete port $inUniPortNum
    } result]} {
       error &quot;FAILED: Cannot delete Port $inUniPortNum from VMAN, $result&quot;
    }
}

###########################################################################
# Procedure to Remove the VMAN from all the UNI Ports on the switch
###########################################################################
proc remVManFromAllUnis {inVManName
                              inUniPortList
                              inTagStatusList} {

    foreach currUniPort   $inUniPortList \
            currTagStatus $inTagStatusList {

       remVManFromOneUni $inVManName \
                              $currUniPort \
                              $currTagStatus
    }
}

#########################################################################
# TCL Procedure to remove Ports from VMANs and also delete the VMANs
#########################################################################
proc delete8021adVMans {inVManName
						inUniPortList
                        inTagStatusList} {

    global abort_on_error

    remVManFromAllUnis $inVManName \
                              $inUniPortList \
                              $inTagStatusList

    if {[catch {
       delete vman $inVManName
    } errMsgText]} {
       error &quot;FAILED: Could not delete VMAN $inVManName, $errMsgText&quot;
    }
}

############################################################################
# TCL Procedure to validate and delete the 802.1ad VMAN and remove Ports
############################################################################
proc rollbackUnProtectedVManCreate {inVManName
                                    inVManSTag
                                    inVManQPNum
                                    inUniPortTagStsSeq} {

    global isExos
    set outUniPortList [list]
    set outTagStatusList   [list]

    if {[string match $isExos true]} {
    	create log entry &quot;START-Create-Rollback Unprotected VMAN&quot;
	}

    validateVManDeleteParams $inVManName

    validateUniPortTagStatusTupleSeq $inUniPortTagStsSeq \
                                     outUniPortList \
                                     outTagStatusList

    delete8021adVMans $inVManName \
                     $outUniPortList \
    				 $outTagStatusList

	if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Create-Rollback Unprotected VMAN&quot;
	}
}

######################################################################
# CLI MODE Settings
######################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

rollbackUnProtectedVManCreate $unprotVManName \
                              $unprotVManSTag \
                              $unprotVManQPNum \
                              $unprotVManPortTagStsSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
