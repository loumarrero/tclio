<!-- This file is generated by system. Do not edit this file. -->
<script name="Create_BW_Profile">
<comments>This script creates a BW Profile</comments>
<content>#@MetaDataStart
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Create a Bandwidth Profile
#############################################################################
# Revision      : 1.0
# Last Updated  : 15-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:  This script creates a Bandwidth Profile
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;scripting.Script to create a Bandwidth Profile&quot;

# @SectionStart (description = &quot;Bandwidth Profile Create Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;PBB Service-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [PBB_STAG,PBB_CTAG,PBB_PORT])
set var ethServPbbType PBB_STAG

# @VariableFieldLabel (description = &quot;Switch Platform&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes,
#   validValues = [Model_BD10K,Model_BD12K,Model_BD20K])
set var ethServPlatformModel &quot;&quot;

# @VariableFieldLabel (description = &quot;B-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServBVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;S/C-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServSorCVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;S/C-VLAN Tag&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var ethServSorCVLanTag &quot;&quot;

# @VariableFieldLabel (description = &quot;I-SID Name on BD20K&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = no,
#   readonly    = no)
set var ethServISidName &quot;&quot;

# @VariableFieldLabel (description = &quot;I-SID Value&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var ethServISidValue &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var ethServUniPortTagStsSeq &quot;&quot;

set var permitRingPortsAsUni no

# @SectionEnd
# @MetaDataEnd
################################################################################

############################################################################
#        Configuration Validate and Programming on the Switch
############################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

############################################################################
# TCL Procedure To Validate PBB Service-Type and Platform Model combination
############################################################################
proc validatePbbServiceType {inPbbType} {

    global abort_on_error

    switch $inPbbType {
       PBB_CTAG {}
       PBB_STAG {}
       PBB_PORT {}
       default {
        error &quot;FAILED: Invalid PBB Service-Type => $inPbbType&quot;
       }
    }
}

proc validatePbbTypePlatformModel {inPbbType
                                   inPlatformModel} {
    global abort_on_error

    validatePbbServiceType $inPbbType

    switch $inPlatformModel {
       Model_BD10K {
         if {![string compare $inPbbType "PBB_CTAG"]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD10K.&quot;
         }
       }
       Model_BD12K {
         if {![string compare $inPbbType "PBB_CTAG"]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD10K.&quot;
         }
       }
       Model_BD20K {
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

############################################################################
# TCL Procedure To Validate B-VLAN based Service Creation Parameters
############################################################################
proc validateServiceCreateParams {inBVLanName
                                  inSorCVLanName
                                  inSorCTag} {
    global abort_on_error

    IF (![expr [string length $inBVLanName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inSorCVLanName] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inSorCTag] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Tag is empty.&quot;
    ENDIF
}

#############################################################
# TCL Procedure To Validate I-SID Name
#############################################################
proc validateISidName {inISidName} {

    global abort_on_error

    IF (![expr [string length $inISidName] &gt; 0]) THEN
       error &quot;FAILED: I-SID Name is empty.&quot;
    ENDIF
}

#############################################################
# TCL Procedure To Validate I-SID Value
#############################################################
proc validateISidValue {inISidValue} {

    global abort_on_error

    IF (![expr [string length $inISidValue] &gt; 0]) THEN
       error &quot;FAILED: I-SID Value is empty.&quot;
    ENDIF
}

###########################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI_Port+Tag_Status'
###########################################################################
proc validateUniPortTagStsTuple {inUniPortTagSts
                                 outUniPortNum
                                 outTagSts} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagSts     tmpTagSts

     set tmpUniTagList [split $inUniPortTagSts '+']

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI-Port, Tagging-Status Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagSts     [lindex $tmpUniTagList 1]
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form 'UNI_Port+Tag_Status'
#############################################################################
proc validateUniPortTagStsTupleSeq {inUniPortTagStsSeq
                                    outUniPortList
                                    outTagStsList} {
     global abort_on_error

     IF (![expr [string length $inUniPortTagStsSeq] &gt; 0]) THEN
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     ENDIF

     set tmpUniPortTagStsList [split $inUniPortTagStsSeq ,]

     if {![expr [llength $tmpUniPortTagStsList] &gt; 0]} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outTagStsList  tmpTagStsList

     foreach currTuple $tmpUniPortTagStsList {

        set outUniPortNum ""
        set outTagSts     ""

        validateUniPortTagStsTuple $currTuple \
                                   outUniPortNum \
                                   outTagSts

        lappend tmpUniPortList $outUniPortNum
        lappend tmpTagStsList  $outTagSts
     }
}

##########################################################################
# Procedure to add one UNI_Port to the S/C-VLAN on the Switch
##########################################################################
proc addOneUniToSorCVLan {inPbbType
                          inSorCVLanName
                          inUniPortNum
                          inTagSts} {
    global abort_on_error

    if {[catch {
       configure vlan Default del port $inUniPortNum
    } errMsgText]} {
       error &quot;FAILED: Cannot delete Port $inUniPortNum from default VLAN, $errMsgText&quot;
    }

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config cvlan $inSorCVLanName add ports $inUniPortNum $inTagSts
       } else {
          config svlan $inSorCVLanName add ports $inUniPortNum $inTagSts
       }
       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
           $permitRingPortsAsUni
       ENDIF
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
         delete cvlan $inSorCVLanName
       } else {
         delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Cannot add UNI-Port $inUniPortNum to S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to add all UNI-Port(s) to the S/C-VLAN on the switch
##########################################################################
proc addAllUnisToSorCVLan {inPbbType
                           inSorCVLanName
                           inUniPortList
                           inTagStsList} {
    global abort_on_error

    foreach currUniPort $inUniPortList \
            currTagSts  $inTagStsList {

       addOneUniToSorCVLan $inPbbType \
                           $inSorCVLanName \
                           $currUniPort \
                           $currTagSts
    }
}

###########################################################################
# Procedure to Create the S/C-VLAN on the switch
###########################################################################
proc createSorCVLAN {inPbbType
                     inSorCVLanName
                     inSorCTag} {

    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          create cvlan $inSorCVLanName
       } else {
          create svlan $inSorCVLanName
       }
    } errMsgText]} {
       error &quot;FAILED: Could not create S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config cvlan $inSorCVLanName tag $inSorCTag
       } else {
          config svlan $inSorCVLanName tag $inSorCTag
       }
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can't set Tag $inSorCTag on S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to assign I-SID value to the S/C-VLAN on BD10K/BD12K Platforms
###########################################################################
proc addISidToSorCVLanOnBD1XK {inPbbType
                               inSorCVLanName
                               inISidValue} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config cvlan $inSorCVLanName isid $inISidValue
       } else {
          config svlan $inSorCVLanName isid $inISidValue
       }
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Invalid I-SID for S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to create I-SID and add S/C-VLAN on BD20K Platforms
###########################################################################
proc createISidAddSorCVLanOnBD2XK {inPbbType
                                   inSorCVLanName
                                   inISidName
                                   inISidValue} {
    global abort_on_error

    if {[catch {
       create isid $inISidName $inISidValue
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can't create I-SID $inISidName:$inISidValue $errMsgText&quot;
    }

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config isid $inISidName add cvlan $inSorCVLanName
       } else {
          config isid $inISidName add svlan $inSorCVLanName
       }
    } errMsgText]} {
       delete isid  $inISidName
       if {![string compare $inPbbType "PBB_CTAG"]} {
         delete cvlan $inSorCVLanName
       } else {
         delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can't add S/C-VLAN $inSorCVLanName to I-SID $inISidName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to add the S/C-VLAN to the B-VLAN on BD10K/BD12K Platforms
###########################################################################
proc addSorCVLanToBVLanOnBD1XK {inPbbType
                                inBVLanName
                                inSorCVLanName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config bvlan $inBVLanName add cvlan $inSorCVLanName
       } else {
          config bvlan $inBVLanName add svlan $inSorCVLanName
       }
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can't add S/C-VLAN $inSorCVLanName to B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to add I-SID to the B-VLAN on BD20K Platforms
###########################################################################
proc addISidToBVLanOnBD2XK {inPbbType
                            inBVLanName
                            inSorCVLanName
                            inISidName} {
    global abort_on_error

    if {[catch {
       config bvlan $inBVLanName add isid $inISidName
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
         config isid  $inISidName delete cvlan $inSorCVLanName
         delete isid  $inISidName
         delete cvlan $inSorCVLanName
       } else {
         config isid  $inISidName delete svlan $inSorCVLanName
         delete isid  $inISidName
         delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can't add I-SID $inISidName to B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

############################################################################
# S/C-TAGGED PBB Service Creation on BD10K/BD12K Platforms
############################################################################
# 1) Create S/C-VLAN
# 2) Add UNI Ports to S/C-VLAN
# 3) Assign I-SID  to S/C-VLAN
# 4) Add    S/C-VLAN to B-VLAN
############################################################################
proc createPBBServiceSorCTagOnBD1XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inSorCTag
                                     inISidValue
                                     inUniPortList
                                     inTagStsList} {
    global abort_on_error

    createSorCVLAN $inPbbType \
                   $inSorCVLanName \
                   $inSorCTag

    addAllUnisToSorCVLan $inPbbType \
                         $inSorCVLanName \
                         $inUniPortList \
                         $inTagStsList

    addISidToSorCVLanOnBD1XK $inPbbType \
                             $inSorCVLanName \
                             $inISidValue

    addSorCVLanToBVLanOnBD1XK $inPbbType \
                              $inBVLanName \
                              $inSorCVLanName
}

############################################################################
# S/C-TAGGED PBB Service Creation on BD20K Platforms
############################################################################
# 1) Create S/C-VLAN
# 2) Add UNI Ports to S/C-VLAN
# 3) Create I-SID and S/C-VLAN to I-SID
# 4) Add I-SID to B-VLAN
############################################################################
proc createPBBServiceSorCTagOnBD2XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inSorCTag
                                     inISidName
                                     inISidValue
                                     inUniPortList
                                     inTagStsList} {
    global abort_on_error

    createSorCVLAN $inPbbType \
                   $inSorCVLanName \
                   $inSorCTag

    addAllUnisToSorCVLan $inPbbType \
                         $inSorCVLanName \
                         $inUniPortList \
                         $inTagStsList

    createISidAddSorCVLanOnBD2XK $inPbbType \
                                 $inSorCVLanName \
                                 $inISidName \
                                 $inISidValue

    addISidToBVLanOnBD2XK $inBVLanName \
                          $inSorCVLanName \
                          $inISidName
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on BD1XK Platforms
############################################################################
proc runPBBServiceSorCTagCreateOnBD1XK {inPbbType
                                        inBVLanName
                                        inSorCVLanName
                                        inSorCTag
                                        inISidValue
                                        inUniPortTagStsSeq} {
    global abort_on_error

    validateServiceCreateParams $inBVLanName \
                                $inSorCVLanName \
                                $inSorCTag

    validateISidValue $inISidValue

    set outUniPortList [list]
    set outTagStsList  [list]

    validateUniPortTagStsTupleSeq $inUniPortTagStsSeq \
                                  outUniPortList \
                                  outTagStsList

    createPBBServiceSorCTagOnBD1XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inSorCTag \
                                   $inISidValue \
                                   $outUniPortList \
                                   $outTagStsList
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on BD2XK Platforms
############################################################################
proc runPBBServiceSorCTagCreateOnBD2XK {inPbbType
                                        inBVLanName
                                        inSorCVLanName
                                        inSorCTag
                                        inISidName
                                        inISidValue
                                        inUniPortTagStsSeq} {
    global abort_on_error

    validateServiceCreateParams $inBVLanName \
                                $inSorCVLanName \
                                $inSorCTag

    validateISidName  $inISidName
    validateISidValue $inISidValue

    set outUniPortList [list]
    set outTagStsList  [list]

    validateUniPortTagStsTupleSeq $inUniPortTagStsSeq \
                                  outUniPortList \
                                  outTagStsList

    createPBBServiceSorCTagOnBD2XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inSorCTag \
                                   $inISidName \
                                   $inISidValue \
                                   $outUniPortList \
                                   $outTagStsList
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on UNI Ports
############################################################################
proc handlePBBServiceSorCTagCreate {inPbbType
                                    inPlatformModel
                                    inBVLanName
                                    inSorCVLanName
                                    inSorCTag
                                    inISidName
                                    inISidValue
                                    inUniPortTagStsSeq} {
    global abort_on_error

	global isExos

	if {[string match $isExos true]} {
    	create log entry &quot;Starting PBB S/C-TAG Service Creation on Switch&quot;
   	}

    validatePbbTypePlatformModel $inPbbType \
                                 $inPlatformModel

    switch $inPlatformModel {
       Model_BD10K {
       runPBBServiceSorCTagCreateOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inSorCTag \
                                         $inISidValue \
                                         $inUniPortTagStsSeq
       }
       Model_BD12K {
       runPBBServiceSorCTagCreateOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inSorCTag \
                                         $inISidValue \
                                         $inUniPortTagStsSeq
       }
       Model_BD20K {
       runPBBServiceSorCTagCreateOnBD2XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inSorCTag \
                                         $inISidName \
                                         $inISidValue \
                                         $inUniPortTagStsSeq
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }

	if {[string match $isExos true]} {
    	create log entry &quot;Finished PBB S/C-TAG Service Creation on Switch&quot;
   	}
}

############################################################################
# CLI Configuration Scripts Execution STARTING
############################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

handlePBBServiceSorCTagCreate $ethServPbbType \
                              $ethServPlatformModel \
                              $ethServBVLanName \
                              $ethServSorCVLanName \
                              $ethServSorCVLanTag \
                              $ethServISidName \
                              $ethServISidValue \
                              $ethServUniPortTagStsSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_CRE_PBB_Service</rollbackScript>
<postprocessScript>Sync_CRE_PBB_Service</postprocessScript>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
