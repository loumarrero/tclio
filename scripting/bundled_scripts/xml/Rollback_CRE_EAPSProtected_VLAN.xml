<!-- This file is generated by system. Do not edit this file. -->
<script name="Rollback_CRE_EAPSProtected_VLAN">
<comments>This scripts rollsback protected VLANs from EAPS Domains</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Rollback of protected VLAN from EAPS Domain
#############################################################################
# Revision      : 1.0
# Last Updated  : 09-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create VLAN
# 2.  Assign the VLAN to a QoS Profile
# 3.  Add the VLAN to a EAPS domain
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Rollsback protected VLAN creations from EAPS Domains&quot;
# @SectionStart (description = &quot;Protected VLAN Create-Rollback Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

#############################################################################
# VLAN Protection Parameters definitions
#############################################################################

# @VariableFieldLabel (description = &quot;Comma Listed VLAN_Name+VLAN_Tag+VLAN_QP&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtVLanNameTagQPSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed Protecting Ring Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtRingPortSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# TCL Procedure for VLAN Protection Parameter Validation
############################################################################
proc validateVLanProtectParams {inVLanNameTagQPSeq
                                inDomainNameSeq
                                inRingPortSeq} {
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
    
    IF (![expr [string length $inVLanNameTagQPSeq] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name Tag QP List is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inRingPortSeq] &gt; 0]) THEN
       error &quot;FAILED: VLAN Protect Port List is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 3-Tuple of the form 'VLAN-Name+Tag+QP-Num'
################################################################################
proc validateVLanNameTagQPTuple {inNameTagQP
                                 outVLanName
                                 outVLanTag
                                 outVLanQP} {

     upvar $outVLanName tmpVLanName
     upvar $outVLanTag  tmpVLanTag
     upvar $outVLanQP   tmpVLanQP

     set tmpNameTagQPList [split $inNameTagQP '+']

     if {[llength $tmpNameTagQPList] != 3} {
         error &quot;Invalid VLAN-Name,Tag,QP-Num Tuple=>$inNameTagQP&quot;
     }
     set tmpVLanName [lindex $tmpNameTagQPList 0]
     set tmpVLanTag  [lindex $tmpNameTagQPList 1]
     set tmpVLanQP   [lindex $tmpNameTagQPList 2]
}

################################################################################
# Procedure to Validate List of 3-Tuples of the form 'VLAN-Name+Tag+QP-Num'
################################################################################
proc validateVLanNameTagQPTupleSeq {inNameTagQPSeq
                                    outVLanNameList
                                    outVLanTagList
                                    outVLanQPList} {

     set tmpNameTagQPList [split $inNameTagQPSeq ,]

     if {[llength $tmpNameTagQPList] == 0} {
        error &quot;FAILED: VLAN-Name, Tag, QP Tuple List is empty.&quot;
     }

     upvar $outVLanNameList tmpVLanNameList
     upvar $outVLanTagList  tmpVLanTagList
     upvar $outVLanQPList   tmpVLanQPList

     foreach currTuple $tmpNameTagQPList {

        set outVLanName ""
        set outVLanTag  ""
        set outVLanQP   ""

        validateVLanNameTagQPTuple $currTuple \
                                   outVLanName \
                                   outVLanTag \
                                   outVLanQP

        lappend tmpVLanNameList $outVLanName
        lappend tmpVLanTagList  $outVLanTag
        lappend tmpVLanQPList   $outVLanQP
     }
}

#########################################################################
# TCL Procedures for VLAN removal from EAPS Domain Ring Ports
# and subsequent deletion of the VLAN
#########################################################################
proc remProtectOneVLanFromOneDomain {inVLanName inDomainName} {

    if {[catch {
        config eaps $inDomainName delete protected $inVLanName
    } errMsgText]} {
        puts &quot;FAILED: Cannot delete protection of VLAN $inVLanName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

proc remProtectOneVLanFromAllDomain {inVLanName inDomainNameList} {

    foreach currDomainName $inDomainNameList {
       remProtectOneVLanFromOneDomain $inVLanName $currDomainName
    }
}

proc delPortsFromOneVLan {inVLanName inRingPortSeq} {

    if {[catch {
       config vlan $inVLanName delete ports $inRingPortSeq
    } errMsgText]} {
       puts &quot;FAILED: Could not delete Ports $inRingPortSeq from VLAN $inVLanName, $errMsgText&quot;
    }
}

proc delOneVLan {inVLanName} {

    if {[catch {
       delete vlan $inVLanName
    } errMsgText]} {
       puts &quot;FAILED: Could not delete VLAN $inVLanName, $errMsgText&quot;
    }
}

proc remProtectAllVLanFromAllDomain {inVLanNameList inDomainNameList} {

    foreach currVLanName $inVLanNameList {
       remProtectOneVLanFromAllDomain $currVLanName $inDomainNameList
    }
}

proc delPortsFromAllVLan {inVLanNameList inRingPortSeq} {

    foreach currVLanName $inVLanNameList {
       delPortsFromOneVLan $currVLanName $inRingPortSeq
    }
}

proc delAllVLan {inVLanNameList} {

    foreach currVLanName $inVLanNameList {
       delOneVLan $currVLanName
    }
}

##################################################################
# TCL Procedure for VLAN Creation and Protection by EAPS Domain
# after validating all Parameters
##################################################################
proc rollbackProtectedVLanCreate {inVLanNameTagQPSeq
                                  inDomainNameSeq
                                  inRingPortSeq} {
	
	global isExos
	
	if {[string match $isExos true]} {
    	create log entry &quot;START-Create-Rollback VLAN Protection from EAPS&quot;
	}
	
    validateVLanProtectParams $inVLanNameTagQPSeq \
                              $inDomainNameSeq \
                              $inRingPortSeq

    set outVLanNameList   [list]
    set outVLanTagList    [list]
    set outVLanQPList     [list]
    set outDomainNameList [split $inDomainNameSeq ,]

    validateVLanNameTagQPTupleSeq $inVLanNameTagQPSeq \
                                  outVLanNameList \
                                  outVLanTagList \
                                  outVLanQPList
    
    remProtectAllVLanFromAllDomain $outVLanNameList \
                                   $outDomainNameList
    
    delPortsFromAllVLan $outVLanNameList \
                        $inRingPortSeq
    
    delAllVLan $outVLanNameList

	if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Create-Rollback VLAN Protection from EAPS&quot;
	}
}

############################################################################
# CLI Configuration Starting
############################################################################
setCliErrorHandling $abortOnCliError

rollbackProtectedVLanCreate $eapsProtVLanNameTagQPSeq \
                            $eapsProtDomainNameSeq \
                            $eapsProtRingPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
