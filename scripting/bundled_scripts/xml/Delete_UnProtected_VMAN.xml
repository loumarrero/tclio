<!-- This file is generated by system. Do not edit this file. -->
<script name="Delete_UnProtected_VMAN">
<comments>This scripts deletes a list of unprotected 802.1ad VMANs after removing them from Ports</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Unprotected VMAN deletion after removing it from Ports
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Purpose:
#############################################################################
# 1. Delete the list of Non-Ring Ports from each VMAN in the List.
# 2. Delete the list of VMAN(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;This script deletes 802.1ad VMANs after removing from Ports&quot;
# @SectionStart (description = &quot;Unprotected VMAN Deletion Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

################################################################################
# VMAN Definition
################################################################################
# @VariableFieldLabel (description = &quot;Comma separated List of VMAN Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var unprotVManNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated List of VMAN Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVManPortSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

################################################################################
# Setup VMAN Deletion Parameters Validations
################################################################################
proc validateVManDeleteParams {inVManNameSeq inVManPortSeq} {

    global abort_on_error

    IF (![expr [string length $inVManNameSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name List empty.&quot;
    ENDIF

    IF (![expr [string length $inVManPortSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Port List empty.&quot;
    ENDIF
}

###########################################################################
# TCL Procedure to removal Ports from the VMAN
###########################################################################
proc delPortsFromOneVMan {inVManName inVManPortSeq} {

    global abort_on_error

    if {[catch {
       config vman $inVManName delete ports $inVManPortSeq
    } result]} {
       error &quot;FAILED: Could not delete Ports $inVManPortSeq from VMan $inVManName, $result&quot;
    }
}

proc delOneVMan {inVManName} {

    global abort_on_error

    if {[catch {
       delete vman $inVManName
    } result]} {
       error &quot;FAILED: Could not delete VMan $inVManName, $result&quot;
    }
}

proc delPortsFromAllVMan {inVManNameList inVManPortSeq} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       delPortsFromOneVMan $currVManName $inVManPortSeq
    }
}

proc delAllVMan {inVManNameList} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       delOneVMan $currVManName
    }
}

#########################################################################
# TCL Procedure to remove Ports from VMANs and also delete the VMANs
#########################################################################
proc delete8021adVMans {inVManNameSeq inVManPortSeq} {

    global abort_on_error

    set tmpVManNameList [split $inVManNameSeq ,]

    delPortsFromAllVMan $tmpVManNameList $inVManPortSeq

    delAllVMan $tmpVManNameList
}

#########################################################################
# TCL Procedure to validate a List of VMANs and also delete the VMANs
#########################################################################
proc deleteUnProtVMans {inVManNameSeq inVManPortSeq} {

    global abort_on_error
	global isExos
	
	if {[string match $isExos true]} {
    	create log entry &quot;Starting Unprotected VMAN Deletion on Switch&quot;
	}
	
    validateVManDeleteParams $inVManNameSeq \
                             $inVManPortSeq

    delete8021adVMans $inVManNameSeq \
                      $inVManPortSeq

	if {[string match $isExos true]} {
    	create log entry &quot;Finished Unprotected VMAN Deletion on Switch&quot;
	}
}

################################################################################
# CLI MODE Settings
################################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

deleteUnProtVMans $unprotVManNameSeq \
                  $unprotVManPortSeq

#################################################################################
## Now Sync VMAN and Topology on this device so that they are shown in the Client
#################################################################################
PerformSync -device $deviceIP -scope VLAN
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<menuScope>TOOLS</menuScope>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
