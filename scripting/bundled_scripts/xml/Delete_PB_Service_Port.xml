<!-- This file is generated by system. Do not edit this file. -->
<script name="Delete_PB_Service_Port">
<comments>This script deletes a Port based PB Service from a List of UNI Port(s)</comments>
<content>#@MetaDataStart
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Deletes a Port based PB Service for Customer
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:  This script deletes a Port based PB based Service
#           at a List of UNI Port(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;scripting.Script to delete a List of UNI Port(s) from an existing VMAN&quot;
# @SectionStart (description = &quot;VMAN&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;Switch-Platform&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes,
#   validValues = [MODEL_BD88KSSSF,MODEL_BD10K,MODEL_BD12K,MODEL_BD12804R,MODEL_BD20800])
set var ethServPlatformModel &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ad VMAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServVManName &quot;&quot;

# @VariableFieldLabel (description = &quot;List of comma separated UNI Ports&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var ethServUniPortSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+BWP_Name&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServUniPortBWPNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServOneRateBWParamsTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServTwoRateBWParamsTupleSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd
################################################################################

###########################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI_Port+BWP_Name'
###########################################################################
proc validateUniPortBWPTuple {inUniPortBWPName
                              outUniPortNum
                              outBWPName} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outBWPName    tmpBWPName

     set tmpUniBWPList [split $inUniPortBWPName '+']

     if {[llength $tmpUniBWPList] != 2} {
         error &quot;Invalid UNI-Port, BWP-Name Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniBWPList 0]
     set tmpBWPName    [lindex $tmpUniBWPList 1]
}

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple => 'BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum'
###########################################################################
proc validateOneRateBWParamsTuple {inBWPNameParamsTuple
                                   outBWPName
                                   outCOSMode
                                   outMeterName
                                   outACLName
                                   outQPNum} {
     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 4} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpACLName    [lindex $tmpBWPAttrList 2]
     set tmpQPNum      [lindex $tmpBWPAttrList 3]
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum'
###########################################################################
proc validateTwoRateBWParamsTuple {inBWPNameParamsTuple
                                   outBWPName
                                   outCOSMode
                                   outMeterName
                                   outACLName
                                   outQPNum} {
     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 4} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpACLName    [lindex $tmpBWPAttrList 2]
     set tmpQPNum      [lindex $tmpBWPAttrList 3]
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form 'UNI_Port+BWP_Name'
#############################################################################
proc validateUniPortToBWPNameTupleSeq {inUniPortToBWPNameSeq
                                       outUniPortList
                                       outBWPNameList} {
     global abort_on_error

     if {![string length $inUniPortToBWPNameSeq]} {
        return
     }

     set tmpUniPortBWPNameList [split $inUniPortToBWPNameSeq ,]

     if {![llength $tmpUniPortBWPNameList]} {
        error &quot;UNI-Port, BWP-Name Tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outBWPNameList tmpBWPNameList

     foreach currTuple $tmpUniPortBWPNameList {

        set outUniPortNum ""
        set outBWPName    ""

        validateUniPortBWPTuple $currTuple \
                                outUniPortNum \
                                outBWPName

        lappend tmpUniPortList $outUniPortNum
        lappend tmpBWPNameList $outBWPName
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Name:CIR_V+CIR_U+CBS_V+CBS_U+SCH_T'
###########################################################################
proc validateOneRateBWParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outACLName    ""
        set outQPNum      ""

        validateOneRateBWParamsTuple $currTuple \
                                     outBWPName \
                                     outCOSMode \
                                     outMeterName \
                                     outACLName \
                                     outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum'
###########################################################################
proc validateTwoRateBWParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outACLName    ""
        set outQPNum      ""

        validateTwoRateBWParamsTuple $currTuple \
                                     outBWPName \
                                     outCOSMode \
                                     outMeterName \
                                     outACLName \
                                     outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Objects (Meter,ACL)
##########################################################################
proc deleteOneBWPObj {inMeterName
                      inACLName} {
	if {[catch {
    	delete access-list $inACLName
    } errMsgText]} {
       puts &quot;FAILED: Could not delete access-list $inACLName, $errMsgText&quot;
    }
    if {[catch {
    	delete meter $inMeterName
    } errMsgText]} {
       puts &quot;FAILED: Could not delete meter $inMeterName, $errMsgText&quot;
    }

}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from one UNI Port
##########################################################################
proc deleteOneUniBWPAttachment {inUniPortNum
                                inACLName} {
	global abort_on_error
	if {[catch {
    	configure access-list delete $inACLName ports $inUniPortNum ingress
    } errMsgText]} {
       puts &quot;FAILED: Could not delete $inACLName from UNI port $inUniPortNum, $errMsgText&quot;
    }
}

############################################################################
# Cleanup QoS Objects (Meter, ACL etc.) for a List of BW-Profile(s)
############################################################################
proc deleteAllBWPObjs {inBWPNameList
                       inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currBWPName $inBWPNameList {

        set currMeterName $tmpBWPNameToParamsMap($currBWPName.MeterName)
        set currACLName   $tmpBWPNameToParamsMap($currBWPName.ACLName)

        deleteOneBWPObj $currMeterName $currACLName
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from all UNI Port(s)
##########################################################################
proc deleteAllUniBWPAttachment {inUniPortList
                                inBWPNameList
                                inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)

        deleteOneUniBWPAttachment $currUniPort $currACLName
     }
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD88KSSSF
############################################################################
proc unassignAllUniBWPOnBD88KSSSF {inUniPortList
                                   inBWPNameList
                                   inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     deleteAllUniBWPAttachment $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

     deleteAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD20800
############################################################################
proc unassignAllUniBWPOnBD20800 {inUniPortList
                                 inBWPNameList
                                 inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     deleteAllUniBWPAttachment $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

     deleteAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap
}

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# Define TCL Procedures for Service Parameter Validation
############################################################################
proc validateVManServiceParams {inVManName inUniPortSeq} {

    global abort_on_error
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF

    IF (![expr [string length $inVManName] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inUniPortSeq] &gt; 0]) THEN
       error &quot;FAILED: UNI Port List is empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure for VMAN Addition to UNI Ports for Service Creation
############################################################################
proc deleteVManServicePort {inVManName inUniPortSeq} {

    global abort_on_error

    if {[catch {
       configure vman $inVManName delete port $inUniPortSeq
    } result]} {
       error &quot;FAILED: Cannot delete Ports $inUniPortSeq from VMAN, $result&quot;
    }
}

############################################################################
# TCL Procedure for PB-Service Creation BD88K, SummitStack and Summit Family
############################################################################
proc runPBServiceDeleteOnBD88KSSSF {inVManName
                                    inUniPortSeq
                                    inUniPortList
                                    inBWPNameList
                                    inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    unassignAllUniBWPOnBD88KSSSF $inUniPortList \
                                 $inBWPNameList \
                                 tmpBWPNameToParamsMap

    deleteVManServicePort $inVManName \
                          $inUniPortSeq
}

############################################################################
# TCL Procedure for PB-Service Creation on BD10K Platform
############################################################################
proc runPBServiceDeleteOnBD10K {inVManName
                                inUniPortSeq} {

    deleteVManServicePort $inVManName \
                          $inUniPortSeq
}

############################################################################
# TCL Procedure for PB-Service Creation on BD12K Platform
############################################################################
proc runPBServiceDeleteOnBD12K {inVManName
                                inUniPortSeq} {

    deleteVManServicePort $inVManName \
                          $inUniPortSeq
}

############################################################################
# TCL Procedure for PB-Service Creation on BD12804R Platform
############################################################################
proc runPBServiceDeleteOnBD12804R {inVManName
                                   inUniPortSeq} {

    deleteVManServicePort $inVManName \
                          $inUniPortSeq

######################################################
### HQoS based B/W-Profile Deletion for Next Release
######################################################
##  unassignAllUniBWPOnBD12804R $inVManId \
##                              $inUniPortList \
##                              $inBWPNameList \
##                              tmpBWPNameToParamsMap
######################################################
}

############################################################################
# TCL Procedure for PB-Service Creation on BD20800 Platform
############################################################################
proc runPBServiceDeleteOnBD20800 {inVManName
                                  inUniPortSeq
                                  inUniPortList
                                  inBWPNameList
                                  inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    unassignAllUniBWPOnBD20800 $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap

    deleteVManServicePort $inVManName \
                          $inUniPortSeq
}

############################################################################
# TCL Procedure for PB based Service Creation
############################################################################
proc handlePBServiceDelete {inVManName
                            inPlatformModel
                            inUniPortSeq
                            inUniPortToBWPNameSeq
                            inOneRateBWParamsTupleSeq
                            inTwoRateBWParamsTupleSeq} {
    global abort_on_error
    global isExos

	if {[string match $isExos true]} {
    	create log entry &quot;START-Delete 802.1AD PB Service&quot;
	}

    validateVManServiceParams $inVManName \
                              $inUniPortSeq

    set outUniPortList [list]
    set outBWPNameList [list]
    set outBWPNameToParamsMap(VManName) $inVManName

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outUniPortList \
                                     outBWPNameList
    switch $inPlatformModel {
       MODEL_BD88KSSSF {

       validateOneRateBWParamsTupleSeq $inOneRateBWParamsTupleSeq \
                                       outBWPNameToParamsMap

       runPBServiceDeleteOnBD88KSSSF $inVManName \
                                     $inUniPortSeq \
                                     $outUniPortList \
                                     $outBWPNameList \
                                     outBWPNameToParamsMap
       }
       MODEL_BD10K {
       runPBServiceDeleteOnBD10K $inVManName \
                                 $inUniPortSeq
       }
       MODEL_BD12K {
       runPBServiceDeleteOnBD12K $inVManName \
                                 $inUniPortSeq
       }
       MODEL_BD12804R {
       runPBServiceDeleteOnBD12804R $inVManName \
                                    $inUniPortSeq
       }
       MODEL_BD20800 {

	   if (![expr [string length $inOneRateBWParamsTupleSeq] &gt; 0]) {
       		validateTwoRateBWParamsTupleSeq $inTwoRateBWParamsTupleSeq \
                                       outBWPNameToParamsMap
       } else {
       		validateOneRateBWParamsTupleSeq $inOneRateBWParamsTupleSeq \
                                       outBWPNameToParamsMap
       }

       runPBServiceDeleteOnBD20800 $inVManName \
                                   $inUniPortSeq \
                                   $outUniPortList \
                                   $outBWPNameList \
                                   outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }

	if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Delete 802.1AD PB Service&quot;
	}
}

############################################################################
# CLI Configuration Starting
############################################################################
setCliErrorHandling $abortOnCliError

handlePBServiceDelete $ethServVManName \
                      $ethServPlatformModel \
                      $ethServUniPortSeq \
                      $ethServUniPortBWPNameSeq \
                      $ethServOneRateBWParamsTupleSeq \
                      $ethServTwoRateBWParamsTupleSeq

PerformSync -device $deviceIP -scope VLAN -vlan $ethServVManName</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<menuScope>TOOLS</menuScope>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<scriptOwner>system</scriptOwner>

</script>
