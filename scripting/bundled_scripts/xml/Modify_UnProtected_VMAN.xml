<!-- This file is generated by system. Do not edit this file. -->
<script name="Modify_UnProtected_VMAN">
<comments>This scripts modifies a unprotected 802.1ad VMAN on NNI Ports</comments>
<content># @METADATASTART
#@DetailDescriptionStart
##################################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Unprotected 802.1ad VMAN modification on NNI Ports
##################################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
##################################################################################
# Author Name   : NMS Team
##################################################################################
# Purpose:
##################################################################################
# 1. Modify a unprotected 802.1ad VMAN via creation on a new Switch
# 2. Modify a unprotected 802.1ad VMAN via deletion from a Switch
# 3. Modify a unprotected 802.1ad VMAN via insertion to more NNI Ports on a Switch
# 4. Modify a unprotected 802.1ad VMAN via removal from some NNI Ports on a Switch
##################################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;This script modifies 802.1ad VMANs on NNI Ports&quot;
# @SectionStart (description = &quot;802.1ad VMAN Modification Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;Choose Modification Action-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [Modify_Create,Modify_Delete,Modify_Insert,Modify_Remove,Modify_INSREM,Modify_RENAME])
set var unprotVManModifyActionType Modify_Create

# @VariableFieldLabel (description = &quot;Comma Listed UnTagged UNI_Port to be removed from Default VLAN&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVManDelInDefVlanPortSeq &quot;&quot;

################################################################################
# 802.1ad VMAN modification Parameters Definition
################################################################################
# @VariableFieldLabel (description = &quot;802.1ad-VMAN Old Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotVManOldName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ad-VMAN New Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotVManNewName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ad VMAN Tag, Create-only&quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var unprotVManSTag &quot;&quot;

# @VariableFieldLabel (description = &quot;VMan EtherType&quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var unprotVManEtherType &quot;&quot;

# @VariableFieldLabel (description = &quot;VMan Protocol&quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var unprotVManProtocol &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ad VMAN QoS Profile, Create-only&quot;,
#   type        = String,
#   scope       = global,
#   required    = no,
#   validValues =[1,2,3,4,5,6,7,8])
set var unprotVManQPNum 8

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status of VMAN&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVManPortTagStsSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status of VMAN&quot;
#   type        = String,
#   scope       = device,
#   required    = no)
set var unprotVManIRPortTagStsSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

#############################################################
# Validation of Unprotected VMAN Creation Parameters
#############################################################
proc validateVManCreateParams {inVManOldName
                               inVManQPNum} {
    global abort_on_error

    IF (![expr [string length $inVManOldName] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inVManQPNum] &gt; 0]) THEN
       error &quot;FAILED: VMAN QoS-Profile Number is empty.&quot;
    ENDIF

}

#############################################################
# Validation of Unprotected VMAN Update(Insert/Remove/Delete)
#############################################################
proc validateVManUpdateParams {inVManOldName} {

    global abort_on_error

    IF (![expr [string length $inVManOldName] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name is empty.&quot;
    ENDIF

}

############################################################################
# Validation of Unprotected VMAN Insert and Remove
############################################################################
proc validateVManInsRemParams {inVManOldName} {
    global abort_on_error

    IF (![expr [string length $inVManOldName] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name is empty.&quot;
    ENDIF

}

############################################################################
# Validation of Unprotected VMAN renaming Parameters
############################################################################
proc validateVManRenameParams {inVManOldName
                               inVManNewName} {
    global abort_on_error

    IF (![expr [string length $inVManOldName] &gt; 0]) THEN
       error &quot;FAILED: VMAN Old Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inVManNewName] &gt; 0]) THEN
       error &quot;FAILED: VMAN New Name is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTuple {inUniPortTagStatus
                                    inVManType
                                    outUniPortNum
                                    outTagStatus} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagStatus  tmpTagStatus

     set tmpUniTagList [split $inUniPortTagStatus '+']

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI-Port Tagging-Status, Tuple=>$inUniPortTagStatus&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagStatus  [lindex $tmpUniTagList 1]

     if {[string equal $inVManType "UNTAGGED_VMAN"]} {
         if {[string equal $outTagStatus "tagged"]} {
            error &quot;Invalid UNI-Port Tagging-Status($outTagStatus), tagged port can not be added to untagged VMAN.&quot;
         }
     }
}

################################################################################
# Procedure to Validate List of Tuples of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTupleSeq {inUniPortTagStatusSeq
                                       inVManType
                                       outUniPortList
                                       outTagStatusList} {
     global abort_on_error

     if {[string length $inUniPortTagStatusSeq] == 0} {
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     }

     set tmpUniPortTagStatusList [split $inUniPortTagStatusSeq ,]

     if {[llength $tmpUniPortTagStatusList] == 0} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList   tmpUniPortList
     upvar $outTagStatusList tmpTagStatusList

     foreach currTuple $tmpUniPortTagStatusList {

        set outUniPortNum ""
        set outTagStatus  ""

        validateUniPortTagStatusTuple $currTuple \
                                      $inVManType \
                                      outUniPortNum \
                                      outTagStatus

        lappend tmpUniPortList    $outUniPortNum
        lappend tmpTagStatusList  $outTagStatus
     }
}

############################################################################
# Creation of a Unprotected VMAN and add Ports to it
############################################################################
proc createUnProtVMan {inVManOldName
                       inVManSTag
                       inVManQPNum
                       inUniPortList
                       inTagStatusList
                       inVManEtherType
                       inVManProtocol
                       inDelInDefVlanPortSeq} {

    global abort_on_error

    if {[catch {
       create vman $inVManOldName
    } result]} {
       error &quot;FAILED: Could not create VMan $inVManOldName, $result&quot;
    }

    IF ([expr [string length $inVManSTag] &gt; 0]) THEN
        if {[catch {
           config vman $inVManOldName tag $inVManSTag
        } result]} {
           delete vman $inVManOldName
           error &quot;FAILED: Invalid Tag $inVManSTag for VMan $inVManOldName, $result&quot;
        }
    ENDIF
    
    if {[catch {
       config vman ethertype $inVManEtherType
    } result]} {
       delete vman $inVManOldName
       error &quot;FAILED: Invalid Ether-Type for VMan $inVManOldName, $result&quot;
    }
    
    if {![string equal $inVManProtocol "ANY"]} {
     if {[catch {
        config vman $inVManOldName protocol $inVManProtocol
     } errMsgText]} {
        delete vman $inVManOldName
        error &quot;FAILED: Invalid protocol for VMAN $inVManOldName, $errMsgText&quot;
     }
    }

    ## if {[catch {
    ##    config vman $inVManOldName qosprofile qp$inVManQPNum
    ## } result]} {
    ##    delete vman $inVManOldName
    ##    error &quot;FAILED: Invalid QoS-Profile for VMan $inVManOldName, $result&quot;
    ## }

    if {[catch {
       addVManToAllUnis $inVManOldName \
                          $inUniPortList \
                          $inTagStatusList \
                          $inDelInDefVlanPortSeq
    } result]} {
       delete vman $inVManOldName
       error "FAILED: Could not add port to vman $inVManOldName, $result"
    }
}

###########################################################################
# Procedure to add the VMAN to one UNI Port on the switch
##########################################################################
proc addVManToOneUni {inVManName
                           inUniPortNum
                           inTagStatus} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       configure vman $inVManName add port $inUniPortNum $inTagStatus

       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI    $permitRingPortsAsUni
       ENDIF
    } result]} {
       error &quot;FAILED: Cannot add UNI-Port $inUniPortNum to VMAN $inVManName, $result&quot;
    }
}

###########################################################################
# Procedure to Add the VMAN to all the UNI Ports on the switch
###########################################################################
proc addVManToAllUnis {inVManName
                            inUniPortList
                            inTagStatusList
                            inDelInDefVlanPortSeq} {
    global abort_on_error

    set delInDefVlanPortList [split $inDelInDefVlanPortSeq ,]
    foreach delInDefVlanPort $delInDefVlanPortList {
        if {[catch {
            configure vlan Default del port $delInDefVlanPort
        } result]} {
            error &quot;FAILED: Cannot delete Port $delInDefVlanPort from default VLAN, $result&quot;
        }
    }
    if {[catch {
        foreach currUniPort   $inUniPortList \
                currTagStatus $inTagStatusList {

           addVManToOneUni $inVManName \
                                $currUniPort \
                                $currTagStatus
        }
     } result]} {
        foreach currUniPort   $inUniPortList \
                currTagStatus $inTagStatusList {

           remVManFromOneUni $inVManName \
                                  $currUniPort \
                                  $currTagStatus
        }
                                      
        foreach delInDefVlanPort $delInDefVlanPortList {
            if {[catch {
                configure vlan Default add port $delInDefVlanPort untagged
            } result]} {
                error &quot;FAILED: Cannot add Port $delInDefVlanPort to default VLAN, $result&quot;
            }
        }
        error "FAILED: Could not add port to vman $inVManName, $result"
    }
}

############################################################################
# Modifying Unprotected VMAN via Deletion from a Switch
############################################################################
proc modifyUnProtVManDelete {inVManOldName inVManType inVManPortTagStsSeq} {

    global abort_on_error
    global isExos

    set outUniPortList [list]
    set outTagStatusList   [list]

    if {[string match $isExos true]} {
        create log entry &quot;Starting unprotected VMAN Deletion on Switch&quot;
    }

    validateVManUpdateParams $inVManOldName

    validateUniPortTagStatusTupleSeq $inVManPortTagStsSeq \
                                     $inVManType \
                                     outUniPortList \
                                     outTagStatusList

    delete8021adVMans $inVManOldName \
                      $outUniPortList \
                      $outTagStatusList

    if {[string match $isExos true]} {
        create log entry &quot;Finished unprotected VMAN Deletion on Switch&quot;
    }
}

#########################################################################
# TCL Procedure to remove Ports from VMANs and also delete the VMANs
#########################################################################
proc delete8021adVMans {inVManName
                        inUniPortList
                        inTagStatusList} {

    global abort_on_error

    remVManFromAllUnis $inVManName \
                              $inUniPortList \
                              $inTagStatusList

    if {[catch {
       delete vman $inVManName
    } errMsgText]} {
       error &quot;FAILED: Could not delete VMAN $inVManName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to remove the VMAN from one UNI Port on the switch
##########################################################################
proc remVManFromOneUni {inVManName
                             inUniPortNum
                             inTagStatus} {
    if {[catch {
       configure vman $inVManName delete port $inUniPortNum
    } result]} {
       error &quot;FAILED: Cannot delete Port $inUniPortNum from VMAN, $result&quot;
    }
}

###########################################################################
# Procedure to Remove the VMAN from all the UNI Ports on the switch
###########################################################################
proc remVManFromAllUnis {inVManName
                              inUniPortList
                              inTagStatusList} {
    set inDelInDefVlanPortSeq ""
    if {[catch {
        foreach currUniPort   $inUniPortList \
                currTagStatus $inTagStatusList {

           remVManFromOneUni $inVManName \
                                  $currUniPort \
                                  $currTagStatus
        }
    } result]} {
        foreach currUniPort   $inUniPortList \
                currTagStatus $inTagStatusList {

           addVManToOneUni $inVManName \
                                $currUniPort \
                                $currTagStatus
        }                              
       error "FAILED: Could not delete ports from vman $inVManName, $result"
    }
}


############################################################################
# Insertion of a List of Ports to a Unprotected VMAN
############################################################################
proc insertUnProtVMan {inVManOldName
                       inUniPortList
                       inTagStatusList
                       inDelInDefVlanPortSeq} {

    global abort_on_error

    addVManToAllUnis $inVManOldName \
                          $inUniPortList \
                          $inTagStatusList \
                          $inDelInDefVlanPortSeq
}

############################################################################
# Removal of a List of Ports from a Unprotected VMAN
############################################################################
proc removeUnProtVMan {inVManOldName
                       inUniPortList
                       inTagStatusList} {

    global abort_on_error

    remVManFromAllUnis $inVManOldName \
                              $inUniPortList \
                              $inTagStatusList
}

############################################################################
# Renaming of a Unprotected VMAN
############################################################################
proc renameUnProtVMan {inVManOldName
                       inVManNewName} {

    global abort_on_error

    if {[catch {
       config vman $inVManOldName name $inVManNewName
    } result]} {
       error &quot;FAILED: Could not rename VMan $inVManOldName, $result&quot;
    }
}

############################################################################
# Modifying Unprotected VMAN via Creation on a new Switch
############################################################################
proc modifyUnProtVManCreate {inVManOldName
                             inVManSTag
                             inVManQPNum
                             inVManType
                             inVManPortTagStsSeq
                             inVManEtherType
                             inVManProtocol
                             inDelInDefVlanPortSeq} {
    global abort_on_error
    set outUniPortList [list]
    set outTagStatusList   [list]

    validateVManCreateParams $inVManOldName \
                             $inVManQPNum

    validateUniPortTagStatusTupleSeq $inVManPortTagStsSeq \
                                     $inVManType \
                                     outUniPortList \
                                     outTagStatusList

    createUnProtVMan $inVManOldName \
                     $inVManSTag \
                     $inVManQPNum \
                     $outUniPortList \
                     $outTagStatusList \
                     $inVManEtherType \
                     $inVManProtocol \
                     $inDelInDefVlanPortSeq
}

############################################################################
# Modifying Unprotected VMAN via Insertion on a Switch
############################################################################
proc modifyUnProtVManInsert {inVManOldName inVManType inVManPortTagStsSeq inDelInDefVlanPortSeq} {

    global abort_on_error
    set outUniPortList [list]
    set outTagStatusList   [list]

    validateVManUpdateParams $inVManOldName

    validateUniPortTagStatusTupleSeq $inVManPortTagStsSeq \
                                     $inVManType \
                                     outUniPortList \
                                     outTagStatusList

    insertUnProtVMan $inVManOldName \
                     $outUniPortList \
                     $outTagStatusList \
                     $inDelInDefVlanPortSeq
}

############################################################################
# Modifying Unprotected VMAN via Removal from a Switch
############################################################################
proc modifyUnProtVManRemove {inVManOldName inVManType inVManPortTagStsSeq} {

    global abort_on_error

    set outUniPortList [list]
    set outTagStatusList   [list]

    validateVManUpdateParams $inVManOldName

    validateUniPortTagStatusTupleSeq $inVManPortTagStsSeq \
                                     $inVManType \
                                     outUniPortList \
                                     outTagStatusList

    removeUnProtVMan $inVManOldName \
                     $outUniPortList \
                     $outTagStatusList
}

############################################################################
# Modifying Unprotected VMAN via Insert-Removal from a Switch
############################################################################
proc modifyUnProtVManInsRem {inVManOldName
                             inVManType
                             inInsUniPortTagStsSeq
                             inRemUniPortTagStsSeq
                             inDelInDefVlanPortSeq} {
    global abort_on_error

    set outInsUniPortList [list]
    set outInsTagStatusList   [list]
    set outRemUniPortList [list]
    set outRemTagStatusList   [list]

    validateVManInsRemParams $inVManOldName

    validateUniPortTagStatusTupleSeq $inInsUniPortTagStsSeq \
                                     $inVManType \
                                     outInsUniPortList \
                                     outInsTagStatusList

    validateUniPortTagStatusTupleSeq $inRemUniPortTagStsSeq \
                                     $inVManType \
                                     outRemUniPortList \
                                     outRemTagStatusList

    insertUnProtVMan $inVManOldName \
                     $outInsUniPortList \
                     $outInsTagStatusList \
                     $inDelInDefVlanPortSeq

    removeUnProtVMan $inVManOldName \
                     $outRemUniPortList \
                     $outRemTagStatusList
}

############################################################################
# Modifying Unprotected VMAN by renaming the VMAN Name on the Switch
############################################################################
proc modifyUnProtVManRename {inVManOldName
                             inVManNewName} {

    validateVManRenameParams $inVManOldName \
                             $inVManNewName

    renameUnProtVMan $inVManOldName \
                     $inVManNewName
}

############################################################################
# TCL Procedure to modify a unprotected 802.1ad VMAN on NNI ports of a Switch
############################################################################
proc modifyUnProt8021adVMan {inModifyActionType
                             inVManOldName
                             inVManNewName
                             inVManSTag
                             inVManQPNum
                             inVManPortTagStsSeq
                             inVManIRPortTagStsSeq
                             inVManEtherType
                             inVManProtocol
                             inDelInDefVlanPortSeq} {
    global abort_on_error
    global isExos
    set outVManType "TAGGED_VMAN"

    if {[string match $isExos true]} {
        create log entry &quot;Starting protected/unprotected 802.1ad VMAN modification on Switch&quot;
    }

    if {[string length $inVManSTag] == 0} {
        set outVManType "UNTAGGED_VMAN"
    }

    switch $inModifyActionType {
       Modify_Create {
       modifyUnProtVManCreate $inVManOldName \
                              $inVManSTag \
                              $inVManQPNum \
                              $outVManType \
                              $inVManPortTagStsSeq \
                              $inVManEtherType \
                              $inVManProtocol \
                              $inDelInDefVlanPortSeq
       }
       Modify_Delete {
       modifyUnProtVManDelete $inVManOldName \
                                 $outVManType \
                              $inVManPortTagStsSeq
       }
       Modify_Insert {
       modifyUnProtVManInsert $inVManOldName \
                                 $outVManType \
                              $inVManPortTagStsSeq \
                              $inDelInDefVlanPortSeq
       }
       Modify_Remove {
       modifyUnProtVManRemove $inVManOldName \
                                 $outVManType \
                              $inVManPortTagStsSeq
       }
       Modify_INSREM {
       modifyUnProtVManInsRem $inVManOldName \
                                 $outVManType \
                              $inVManPortTagStsSeq \
                              $inVManIRPortTagStsSeq \
                              $inDelInDefVlanPortSeq
       }
       Modify_RENAME {
       modifyUnProtVManRename $inVManOldName \
                              $inVManNewName
       }
       default {
        error &quot;FAILED: Invalid Service Modify Action Type&quot;
       }
    }

    if {[string match $isExos true]} {
        create log entry &quot;Finished protected/unprotected 802.1ad VMAN modification on Switch&quot;
    }
}

#########################################################################
# CLI MODE Settings
#########################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

modifyUnProt8021adVMan $unprotVManModifyActionType \
                       $unprotVManOldName \
                       $unprotVManNewName \
                       $unprotVManSTag \
                       $unprotVManQPNum \
                       $unprotVManPortTagStsSeq \
                       $unprotVManIRPortTagStsSeq \ 
                       $unprotVManEtherType \
                       $unprotVManProtocol \
                       $unprotVManDelInDefVlanPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_MOD_UnProtected_VMAN</rollbackScript>
<postprocessScript>Sync_MOD_UnProtected_VMAN</postprocessScript>
<scriptOwner>system</scriptOwner>

</script>

 
