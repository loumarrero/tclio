<!-- This file is generated by system. Do not edit this file. -->
<script name="Rollback_CRE_EAPSProtected_VMAN">
<comments>This script rollsback protected VMANs from EAPS Domains</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Rollback of protected VMAN creation from EAPS Domain
#############################################################################
# Revision      : 1.0
# Last Updated  : 09-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create VMAN
# 2.  Assign the VMAN to a QoS Profile
# 3.  Add the VMAN to a EAPS domain
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Rollsback protected VMANs from EAPS Domains&quot;
# @SectionStart (description = &quot;Protected VMAN Create-Rollback Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

#############################################################################
# VMAN Protection Parameters definitions
#############################################################################

# @VariableFieldLabel (description = &quot;Comma Listed VMAN_Name+VMAN_Tag+VMAN_QP&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtVManNameTagQPSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed Protecting Ring Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtRingPortSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# TCL Procedure for VMAN Protection Parameter Validation
############################################################################
proc validateVManProtectParams {inVManNameTagQPSeq
                                inDomainNameSeq
                                inProtectPortSeq} {
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
    
    IF (![expr [string length $inVManNameTagQPSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name Tag QP List is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inProtectPortSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Protect Port List is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 3-Tuple of the form 'VMAN-Name+Tag+QP-Num'
################################################################################
proc validateVManNameTagQPTuple {inNameTagQP
                                 outVManName
                                 outVManTag
                                 outVManQP} {

     upvar $outVManName tmpVManName
     upvar $outVManTag  tmpVManTag
     upvar $outVManQP   tmpVManQP

     set tmpNameTagQPList [split $inNameTagQP '+']

     if {[llength $tmpNameTagQPList] != 3} {
         error &quot;Invalid VMAN-Name,Tag,QP-Num Tuple=>$inNameTagQP&quot;
     }
     set tmpVManName [lindex $tmpNameTagQPList 0]
     set tmpVManTag  [lindex $tmpNameTagQPList 1]
     set tmpVManQP   [lindex $tmpNameTagQPList 2]
}

################################################################################
# Procedure to Validate List of 3-Tuples of the form 'VMAN-Name+Tag+QP-Num'
################################################################################
proc validateVManNameTagQPTupleSeq {inNameTagQPSeq
                                    outVManNameList
                                    outVManTagList
                                    outVManQPList} {

     set tmpNameTagQPList [split $inNameTagQPSeq ,]

     if {[llength $tmpNameTagQPList] == 0} {
        error &quot;FAILED: VMAN-Name, Tag, QP Tuple List is empty.&quot;
     }

     upvar $outVManNameList tmpVManNameList
     upvar $outVManTagList  tmpVManTagList
     upvar $outVManQPList   tmpVManQPList

     foreach currTuple $tmpNameTagQPList {

        set outVManName ""
        set outVManTag  ""
        set outVManQP   ""

        validateVManNameTagQPTuple $currTuple \
                                   outVManName \
                                   outVManTag \
                                   outVManQP

        lappend tmpVManNameList $outVManName
        lappend tmpVManTagList  $outVManTag
        lappend tmpVManQPList   $outVManQP
     }
}

###############################################################################
# TCL Procedures for VMAN removal from EAPS Domain Ring Ports
# and subsequent deletion of the VMAN
###############################################################################
proc remProtectOneVManFromOneDomain {inVManName inDomainName} {

    if {[catch {
        config eaps $inDomainName delete protected $inVManName
    } errMsgText]} { 
        puts &quot;FAILED: Cannot delete protection of VMAN $inVManName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

proc remProtectOneVManFromAllDomain {inVManName inDomainNameList} {

    foreach currDomainName $inDomainNameList {
       remProtectOneVManFromOneDomain $inVManName $currDomainName
    }
}

proc delPortsFromOneVMan {inVManName inRingPortSeq} {

    if {[catch {
       config vman $inVManName delete ports $inRingPortSeq
    } errMsgText]} { 
       puts &quot;FAILED: Could not delete Ports $inRingPortSeq from VMAN $inVManName, $errMsgText&quot;
    }
}

proc delOneVMan {inVManName} {

    if {[catch {
       delete vman $inVManName
    } errMsgText]} { 
       puts &quot;FAILED: Could not delete VMAN $inVManName, $errMsgText&quot;
    }
}

proc remProtectAllVManFromAllDomain {inVManNameList inDomainNameList} {

    foreach currVManName $inVManNameList {
       remProtectOneVManFromAllDomain $currVManName $inDomainNameList
    }
}

proc delPortsFromAllVMan {inVManNameList inRingPortSeq} {

    foreach currVManName $inVManNameList {
       delPortsFromOneVMan $currVManName $inRingPortSeq
    }
}

proc delAllVMan {inVManNameList} {

    foreach currVManName $inVManNameList {
       delOneVMan $currVManName
    }
}

##################################################################
# TCL Procedure for Rollback of VMAN protection from EAPS Domain
# after validating all parameters
##################################################################
proc rollbackProtectedVManCreate {inVManNameTagQPSeq
                                  inDomainNameSeq
                                  inProtectPortSeq} {

	global isExos
	
    if {[string match $isExos true]} {
    	create log entry &quot;START-Create-Rollback VMAN Protection from EAPS&quot;
	}
	
    validateVManProtectParams $inVManNameTagQPSeq \
                              $inDomainNameSeq \
                              $inProtectPortSeq

    set outVManNameList   [list]
    set outVManTagList    [list]
    set outVManQPList     [list]
    set outDomainNameList [split $inDomainNameSeq ,]

    validateVManNameTagQPTupleSeq $inVManNameTagQPSeq \
                                  outVManNameList \
                                  outVManTagList \
                                  outVManQPList
    
    remProtectAllVManFromAllDomain $outVManNameList \
                                   $outDomainNameList
    
    delPortsFromAllVMan $outVManNameList \
                        $inProtectPortSeq
    
    delAllVMan $outVManNameList

	if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Create-Rollback VMAN Protection from EAPS&quot;
	}
}

############################################################################
# CLI Configuration Starting
############################################################################
setCliErrorHandling $abortOnCliError

rollbackProtectedVManCreate $eapsProtVManNameTagQPSeq \
                            $eapsProtDomainNameSeq \
                            $eapsProtRingPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
