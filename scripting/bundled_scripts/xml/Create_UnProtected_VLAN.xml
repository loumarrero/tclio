<!-- This file is generated by system. Do not edit this file. -->
<script name="Create_UnProtected_VLAN">
<comments>This scripts creates a unprotected VLAN and adds it to Ports</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : VLAN creation and adding it to a list of Ports (default STP)
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create VLAN
# 2.  Assign the VLAN to a QoS Profile
# 3.  Add a List of Ports to the VLAN
#####################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;This script creates a VLAN and adds a List of Ports&quot;
# @SectionStart (description = &quot;Unprotected VLAN Create Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

################################################################################
# VLAN Definition
################################################################################

# @VariableFieldLabel (description = &quot;802.1Q-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1Q VLAN Tag&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var unprotVLanCTag &quot;&quot;

# @VariableFieldLabel (description = &quot;VLAN QoS Profile Number&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues =[1,2,3,4,5,6,7,8])
set var unprotVLanQPNum 8

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVLanPortTagStsSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UnTagged UNI_Port to be removed from Default VLAN&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVLanDelInDefVlanPortSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd

################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

############################################################################
# TCL Procedure for VLAN Create Parameters Validation
############################################################################
proc validateVLanCreateParams {inVLanName
                               inVLanQPNum} {
    global abort_on_error

    IF (![expr [string length $inVLanName] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name empty.&quot;
    ENDIF

    IF (![expr [string length $inVLanQPNum] &gt; 0]) THEN
       error &quot;FAILED: VLAN QoS Profile empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure to Create the VLAN and add Ports to it
############################################################################
proc create8021QVLan {inVLanName
                      inVLanCTag
                      inVLanQPNum
                      inUniPortList
                      inTagStatusList
                      inDelInDefVlanPortSeq} {

    global abort_on_error

    if {[catch {
       create vlan $inVLanName
    } result]} {
       error &quot;FAILED: Could not create vlan $inVLanName, $result&quot;
    }

    IF ([expr [string length $inVLanCTag] &gt; 0]) THEN
        if {[catch {
           config vlan $inVLanName tag $inVLanCTag
        } result]} {
           delete vlan $inVLanName
           error &quot;FAILED: Invalid Tag $inVLanCTag for vlan $inVLanName, $result&quot;
        }
    ENDIF

    ## if {[catch {
    ##   config vlan $inVLanName qosprofile qp$inVLanQPNum
    ## } result]} {
    ## delete vlan $inVLanName
    ## error &quot;FAILED: Invalid QoS-Profile for vlan $inVLanName, $result&quot;
    ## }

    if {[catch {
       addDot1qVLanToAllUnis $inVLanName \
                          $inUniPortList \
                          $inTagStatusList \
                          $inDelInDefVlanPortSeq
    } result]} {
       delete vlan $inVLanName
       error "FAILED: Could not add port to vlan $inVLanName, $result"
    }
}

################################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTuple {inUniPortTagStatus
                                    inVLanType
                                    outUniPortNum
                                    outTagStatus} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagStatus  tmpTagStatus

     set tmpUniTagList [split $inUniPortTagStatus '+']

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI-Port Tagging-Status, Tuple=>$inUniPortTagStatus&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagStatus  [lindex $tmpUniTagList 1]

     if {[string equal $inVLanType "UNTAGGED_VLAN"]} {
         if {[string equal $outTagStatus "tagged"]} {
            error &quot;Invalid UNI-Port Tagging-Status($outTagStatus), tagged port can not be added to untagged VLAN.&quot;
         }
     }

}

################################################################################
# Procedure to Validate List of Tuples of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTupleSeq {inUniPortTagStatusSeq
                                       inVLanType
                                       outUniPortList
                                       outTagStatusList} {
     global abort_on_error

     if {[string length $inUniPortTagStatusSeq] == 0} {
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     }

     set tmpUniPortTagStatusList [split $inUniPortTagStatusSeq ,]

     if {[llength $tmpUniPortTagStatusList] == 0} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList   tmpUniPortList
     upvar $outTagStatusList tmpTagStatusList

     foreach currTuple $tmpUniPortTagStatusList {

        set outUniPortNum ""
        set outTagStatus  ""

        validateUniPortTagStatusTuple $currTuple \
                                      $inVLanType \
                                      outUniPortNum \
                                      outTagStatus

        lappend tmpUniPortList    $outUniPortNum
        lappend tmpTagStatusList  $outTagStatus
     }
}

###########################################################################
# Procedure to add the 802.1q VLAN to one UNI Port on the switch
##########################################################################
proc addDot1qVLanToOneUni {inVLanName
                           inUniPortNum
                           inTagStatus} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       configure vlan $inVLanName add port $inUniPortNum $inTagStatus

       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI   $permitRingPortsAsUni
       ENDIF
    } result]} {
       error &quot;FAILED: Cannot add UNI-Port $inUniPortNum to VLAN $inVLanName, $result&quot;
    }
}

###########################################################################
# Procedure to Add the VLAN to all the UNI Ports on the switch
###########################################################################
proc addDot1qVLanToAllUnis {inVLanName
                            inUniPortList
                            inTagStatusList
                            inDelInDefVlanPortSeq} {
    global abort_on_error

    set delInDefVlanPortList [split $inDelInDefVlanPortSeq ,]
    foreach delInDefVlanPort $delInDefVlanPortList {
        if {[catch {
            configure vlan Default del port $delInDefVlanPort
        } result]} {
            error &quot;FAILED: Cannot delete Port $delInDefVlanPort from default VLAN, $result&quot;
        }
    }

    foreach currUniPort   $inUniPortList \
            currTagStatus $inTagStatusList {

       addDot1qVLanToOneUni $inVLanName \
                            $currUniPort \
                            $currTagStatus
    }
}

############################################################################
# TCL Procedure to validate and Create the 802.1Q VLAN and add Ports to it
############################################################################
proc createUnProtectedVLan {inVLanName
                            inVLanCTag
                            inVLanQPNum
                            inUniPortTagStsSeq
                            inDelInDefVlanPortSeq} {
    global abort_on_error
    global isExos
    set outUniPortList [list]
    set outTagStatusList   [list]
    set outVLanType "TAGGED_VLAN"

    if {[string match $isExos true]} {
        create log entry &quot;Starting Unprotected VLAN Creation on Switch&quot;
       }

    validateVLanCreateParams $inVLanName \
                             $inVLanQPNum

    if {[string length $inVLanCTag] == 0} {
        set outVLanType "UNTAGGED_VLAN"
    }

    validateUniPortTagStatusTupleSeq $inUniPortTagStsSeq \
                                     $outVLanType \
                                     outUniPortList \
                                     outTagStatusList


    create8021QVLan $inVLanName \
                    $inVLanCTag \
                    $inVLanQPNum \
                    $outUniPortList \
                    $outTagStatusList \
                    $inDelInDefVlanPortSeq

    if {[string match $isExos true]} {
        create log entry &quot;Finished Unprotected VLAN Creation on Switch&quot;
       }
}

###########################################################################
# CLI MODE Settings
###########################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

createUnProtectedVLan $unprotVLanName \
                      $unprotVLanCTag \
                      $unprotVLanQPNum \
                      $unprotVLanPortTagStsSeq \
                      $unprotVLanDelInDefVlanPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_CRE_UnProtected_VLAN</rollbackScript>
<postprocessScript>Sync_CRE_UnProtected_VLAN</postprocessScript>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
