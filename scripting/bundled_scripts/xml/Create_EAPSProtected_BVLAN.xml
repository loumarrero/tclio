<!-- This file is generated by system. Do not edit this file. -->
<script name="Create_EAPSProtected_BVLAN">
<comments>This scripts creates B-VLANs and adds to EAPS domains as protected</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : B-VLAN creation and protection via EAPS domain
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create B-VLAN
# 2.  Assign the B-VLAN to a QoS Profile
# 3.  Add the B-VLAN to a EAPS domain
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Creates B-VLANs and adds to EAPS domains as protected&quot;
# @SectionStart (description = &quot;Protected B-VLAN Create Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

#############################################################################
# B-VLAN Protection Parameters definitions
#############################################################################

# @VariableFieldLabel (description = &quot;Comma Listed BVLAN_Name+BVLAN_Tag+BVLAN_QP&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtBVLanNameTagQPSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed Protecting Ring Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtRingPortSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd

################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

    global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# TCL Procedure for B-VLAN Protection Parameter Validation
############################################################################
proc validateBVLanProtectParams {inBVLanNameTagQPSeq
                                 inDomainNameSeq
                                 inProtectPortSeq} {
    global abort_on_error
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF

    IF (![expr [string length $inBVLanNameTagQPSeq] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name Tag QP List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inProtectPortSeq] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Protect Port List is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 3-Tuple of the form 'B-VLAN-Name+Tag+QP-Num'
################################################################################
proc validateBVLanNameTagQPTuple {inNameTagQP
                                  outBVLanName
                                  outBVLanTag
                                  outBVLanQP} {
     global abort_on_error

     upvar $outBVLanName tmpBVLanName
     upvar $outBVLanTag  tmpBVLanTag
     upvar $outBVLanQP   tmpBVLanQP

     set tmpNameTagQPList [split $inNameTagQP '+']

     if {[llength $tmpNameTagQPList] != 3} {
         error &quot;Invalid BVLAN-Name,Tag,QP-Num Tuple=>$inNameTagQP&quot;
     }
     set tmpBVLanName [lindex $tmpNameTagQPList 0]
     set tmpBVLanTag  [lindex $tmpNameTagQPList 1]
     set tmpBVLanQP   [lindex $tmpNameTagQPList 2]
}

################################################################################
# Procedure to Validate List of 3-Tuples of the form 'B-VLAN-Name+Tag+QP-Num'
################################################################################
proc validateBVLanNameTagQPTupleSeq {inNameTagQPSeq
                                     outBVLanNameList
                                     outBVLanTagList
                                     outBVLanQPList} {
     global abort_on_error

     set tmpNameTagQPList [split $inNameTagQPSeq ,]

     if {[llength $tmpNameTagQPList] == 0} {
        error &quot;FAILED: BVLAN-Name, Tag, QP Tuple List is empty.&quot;
     }

     upvar $outBVLanNameList tmpBVLanNameList
     upvar $outBVLanTagList  tmpBVLanTagList
     upvar $outBVLanQPList   tmpBVLanQPList

     foreach currTuple $tmpNameTagQPList {

        set outBVLanName ""
        set outBVLanTag  ""
        set outBVLanQP   ""

        validateBVLanNameTagQPTuple $currTuple \
                                    outBVLanName \
                                    outBVLanTag \
                                    outBVLanQP

        lappend tmpBVLanNameList $outBVLanName
        lappend tmpBVLanTagList  $outBVLanTag
        lappend tmpBVLanQPList   $outBVLanQP
     }
}

###########################################################################
# Procedure to Clean-up a List of B-VLANs on the switch
###########################################################################
proc cleanUpBVLanList {inBVLanNameList} {

    global abort_on_error

    foreach currBVLanName $inBVLanNameList {
       delete bvlan $currBVLanName
    }
}

##########################################################################
# Procedure to Create one 802.1ah B-VLAN and add to Protect-Port List
##########################################################################
proc createOneBVLanAddPorts {inBVLanName
                             inBVLanTag
                             inBVLanQPNum
                             inProtectPortList} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       create bvlan $inBVLanName
    } errMsgText]} {
       error &quot;FAILED: Could not create B-VLAN $inBVLanName, $errMsgText&quot;
    }

    if {[catch {
       config bvlan $inBVLanName tag $inBVLanTag
    } errMsgText]} {
       delete bvlan $inBVLanName
       error &quot;FAILED: Invalid Tag $inBVLanTag for B-VLAN $inBVLanName, $errMsgText&quot;
    }

##  if {[catch {
##     config bvlan $inBVLanName qosprofile qp$inBVLanQPNum
##  } errMsgText]} {
##     delete bvlan $inBVLanName
##     error &quot;FAILED: Invalid QoS-Profile for B-VLAN $inBVLanName, $errMsgText&quot;
##  }
##
##  if {[catch {
##     config bvlan ethertype 0x8100
##  } errMsgText]} {
##     delete bvlan $inBVLanName
##     error &quot;FAILED: Invalid Ether-Type for B-VLAN $inBVLanName, $errMsgText&quot;
##  }

    if {[catch {
       config bvlan $inBVLanName add ports $inProtectPortList tagged
       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI $permitRingPortsAsUni
       ENDIF
    } errMsgText]} {
       delete bvlan $inBVLanName
       error &quot;FAILED: Could not add Ports $inProtectPortList to B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Create all 802.1ah B-VLANs and add to Protect-Port List
##########################################################################
proc createAllBVLansAddPorts {inBVLanNameList
                              inBVLanTagList
                              inBVLanQPList
                              inProtectPortList} {
    global abort_on_error

    set finishedBVLanNameList [list]

    foreach currBVLanName  $inBVLanNameList \
            currBVLanTag   $inBVLanTagList \
            currBVLanQPNum $inBVLanQPList {

        if {[catch {
           createOneBVLanAddPorts $currBVLanName \
                                  $currBVLanTag \
                                  $currBVLanQPNum \
                                  $inProtectPortList
        } errMsgText]} {
           cleanUpBVLanList $finishedBVLanNameList
           error &quot;FAILED: Could not add Ports $inProtectPortList to B-VLAN $currBVLanName, $errMsgText&quot;
        }

        lappend finishedBVLanNameList $currBVLanName
    }
}

####################################################################
# Procedure to protect one 802.1ah B-VLAN by one EAPS Domain
####################################################################
proc protectOneBVLanByOneDomain {inBVLanName
                                 inDomainName} {
   global abort_on_error

   if {[catch {
      config eaps $inDomainName add protect $inBVLanName
   } errMsgText]} {
      error &quot;FAILED: EAPS-Domain $inDomainName cannot protect B-VLAN $inBVLanName, $errMsgText&quot;
   }
}

####################################################################
# Procedure to Protect one 802.1ah B-VLAN by all EAPS Domain(s)
####################################################################
proc protectOneBVLanByAllDomains {inBVLanName
                                  inDomainNameSeq} {
   global abort_on_error

   set tmpDomainNameList [split $inDomainNameSeq ,]

   foreach currDomainName $tmpDomainNameList {

       protectOneBVLanByOneDomain $inBVLanName \
                                  $currDomainName
   }
}

####################################################################
# Procedure to Protect all 802.1ah B-VLANs by all EAPS Domain(s)
####################################################################
proc protectAllBVLansByAllDomains {inBVLanNameList
                                   inDomainNameSeq} {
    global abort_on_error

    foreach currBVLanName $inBVLanNameList {

        if {[catch {
           protectOneBVLanByAllDomains $currBVLanName \
                                       $inDomainNameSeq
        } errMsgText]} {
           cleanUpBVLanList $inBVLanNameList
           error &quot;FAILED: B-VLAN Protection, $errMsgText&quot;
        }
    }
}

##################################################################
# TCL Procedure for B-VLAN creation and protection by EAPS Domain
# after validating all parameters
##################################################################
proc handleProtectedBVLanCreate {inBVLanNameTagQPSeq
                                 inDomainNameSeq
                                 inProtectPortSeq} {
    global abort_on_error
    global isExos

	if {[string match $isExos true]} {
    	create log entry &quot;Starting B-VLAN protection via EAPS on Switch&quot;
   	}

    validateBVLanProtectParams $inBVLanNameTagQPSeq \
                               $inDomainNameSeq \
                               $inProtectPortSeq

    set outBVLanNameList [list]
    set outBVLanTagList  [list]
    set outBVLanQPList   [list]

    validateBVLanNameTagQPTupleSeq $inBVLanNameTagQPSeq \
                                   outBVLanNameList \
                                   outBVLanTagList \
                                   outBVLanQPList

    createAllBVLansAddPorts $outBVLanNameList \
                            $outBVLanTagList \
                            $outBVLanQPList \
                            $inProtectPortSeq

    protectAllBVLansByAllDomains $outBVLanNameList \
                                 $inDomainNameSeq

	if {[string match $isExos true]} {
    	create log entry &quot;Finished B-VLAN protection via EAPS on Switch&quot;
   	}
}

############################################################################
# CLI Configuration Starting
############################################################################
setCliErrorHandling $abortOnCliError

handleProtectedBVLanCreate $eapsProtBVLanNameTagQPSeq \
                           $eapsProtDomainNameSeq \
                           $eapsProtRingPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_CRE_EAPSProtected_BVLAN</rollbackScript>
<postprocessScript>Sync_CRE_EAPSProtected_BVLAN</postprocessScript>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
