<!-- This file is generated by system. Do not edit this file. -->
<script name="Identity Management - Configuration">
  <comments>Factory script for enabling identity management configuration</comments>
<content>#@MetaDataStart
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
#
# scripting.Script        : Identity Management Configuration
# Revision      : 3.2
# Last Updated  : November 10, 2015
#
#####################################################################
#@DetailDescriptionEnd
#############################################################################################
# Define identity management configuration parameters in this section.
#############################################################################################
# @SectionStart (description = Identity Management configuration properties)

# @VariableFieldLabel (description     = "Stop on error?"
#     type            = String,
#     scope           = global,
#     required      = yes,
#     validValues=[yes,no])
set var abort_when_error yes

# @VariableFieldLabel ( description = "Target Server IP Address",
#    type      = String,
#   scope      = global,
#   required   = yes,
#   readonly   = no
#)
set var targetServerIpAddress $serverIP

# @VariableFieldLabel (description     = "Target Server Type"
#      type            = String, validValues=[netsight, nac],
#     scope           = global
#    )
set var targetServerType netsight

# @VariableFieldLabel (description     = "Target Server Username"
#    type      = String,
#   scope      = global,
#   required   = yes,
#   readonly   = no
#    )
set var targetServerUsername ""

# @VariableFieldLabel (description     = "Target Server Password"
#    type      = String,
#   scope      = global,
#   required   = yes,
#   readonly   = no
#    )
set var targetServerPassword ""

# @VariableFieldLabel (description     = "Target Server HTTPs Port"
#    type      = String,
#   scope      = global,
#   required   = yes,
#   readonly   = no
#    )
set var targetServerHttpsPort "8443"

# @VariableFieldLabel ( description = "XML Target Name",
#    type      = String,
#   scope      = global,
#   required   = yes,
#   readonly   = no
#)
set var xmlTargetName ${targetServerType}-target_${targetServerIpAddress}

# @VariableFieldLabel (description = "Choose Action"
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [Enable_Id_Monitoring, Manage_Ports,Edit_Notification])
set var identityActionType Enable_Id_Monitoring


# @SectionEnd

# @SectionStart    (description = "Configure ports" )
# @VariableFieldLabel (description = "Enabled Ports",
#      type        = String
#     scope       = device
#    )
set var enabledPorts  ""

# @VariableFieldLabel (description = "Disabled Ports",
#      type        = String,
#     scope       = device,
#    )
set var disabledPorts  ""


# @VariableFieldLabel (description     = "VR name",
#      type            = String,
#     scope           = device,
#    )
set var vrName "n/a"

# @SectionEnd

# @MetaDataEnd


proc handleIdentityConfig {
               identityActionType
               connectionType
               targetServerIpAddress
               targetServerHttpsPort
               targetServerUsername
               targetServerPassword
                           xmlTargetName
                           enabledPorts
                           disabledPorts
                           vrName} {
switch $identityActionType {
       Enable_Id_Monitoring {
         handleIdentityEventMonitorConfig $connectionType $targetServerIpAddress $targetServerHttpsPort $targetServerUsername $targetServerPassword $xmlTargetName $vrName "false"
         handleIdentityEnableOrDisableOnPorts $enabledPorts $disabledPorts
       }
       Manage_Ports {
         handleIdentityEnableOrDisableOnPorts $enabledPorts $disabledPorts
       }
       
       Edit_Notification
       {
         handleIdentityEventMonitorConfig $connectionType $targetServerIpAddress $targetServerHttpsPort $targetServerUsername $targetServerPassword $xmlTargetName $vrName "true"
       }
    }
}


##################################################################
# TCL Procedure for Manage ports
##################################################################
proc handleIdentityEventMonitorConfig {
                       connectionType
                       targetServerIpAddress
                       targetServerHttpsPort
                       targetServerUsername
                       targetServerPassword
                       xmlTargetName
                       vrName
                       isEdit} {
  enable identity-management
  set var abort_on_error 0
  
  #Look to see if the target already exists, if so remove it
  show xml-notification configuration
  regexp  "Error:  No targets configured" ${CLI.OUT} noTargets
  IF ([info exists noTargets]) THEN
    IF ([string equal $isEdit true]) THEN
      # There must be targets if this an edit.
      error "No targets exist on this device. Unable to edit."
    ELSE
      echo "No targets exist on this device, continuing with configuration."
    ENDIF
  ENDIF
  
  regexp  "${xmlTargetName}" ${CLI.OUT} foundTarget
  IF ([info exists foundTarget]) THEN
    # Do not delete existing entries when this is an edit. 
    IF ([string equal $isEdit false]) THEN
      echo "Deleting existing target: ${xmlTargetName}"
      delete xml-notification target ${xmlTargetName}
    ENDIF
  ELSE
    # The entry has to exist if this is an edit.
    IF ([string equal $isEdit true]) THEN
      error "${xmlTargetName} does not exist. Unable to edit."
    ENDIF
  ENDIF

  set var abort_on_error 1
    IF ([string equal $connectionType https]) THEN
      show ssl
      regexp {.*SSL Module: Not Installed.*} ${CLI.OUT} isSSLInstalled
      IF ([info exists isSSLInstalled]) THEN
        error "SSL Module: Not Installed"
      ENDIF
      # Do not create a new target if we are only editting.
      IF ([string equal $isEdit false]) THEN
        IF ([string equal $vrName n/a]) THEN
          create xml-notification target ${xmlTargetName} url https://${targetServerIpAddress}:${targetServerHttpsPort}/axis/services/event
        ELSE
          create xml-notification target ${xmlTargetName} url https://${targetServerIpAddress}:${targetServerHttpsPort}/axis/services/event vr ${vrName}
        ENDIF
      ENDIF
    ELSE
      error "Http access to the target server is not supported"
    ENDIF

   configure xml-notification target "${xmlTargetName}" user ${targetServerUsername}
   regexp {.*password:.*} ${CLI.OUT} foundit
   IF ([info exists foundit]) THEN
      CLI ${targetServerPassword}
   ENDIF
   regexp {.*Reenter password:.*} ${CLI.OUT} foundit2
   IF ([info exists foundit2]) THEN
      CLI ${targetServerPassword}
   ENDIF
   regexp {.*do not match.*} ${CLI.OUT} nomatchpass
   IF ([info exists nomatchpass]) THEN
      error "Error entering password."
   ELSE
     # Only add the idMgr module if it doesn't already exist.
     show xml-notification configuration ${xmlTargetName}
     regexp {.*onfigured Modules .*idMgr.*} ${CLI.OUT} foundIdMgrModule
     IF (![info exists foundIdMgrModule]) THEN
       configure xml-notification target "${xmlTargetName}" add "idMgr"
     ENDIF
     enable xml-notification "${xmlTargetName}"
   ENDIF
}

##################################################################
# TCL Procedure for Manage ports
##################################################################
proc handleIdentityEnableOrDisableOnPorts {enabledPorts
                       disabledPorts} {
    IF ([expr [string length $enabledPorts] > 0]) THEN
        configure identity-management add ports $enabledPorts
    ENDIF
    IF ([expr [string length $disabledPorts] > 0]) THEN
        configure identity-management delete ports $disabledPorts
    ENDIF

    #show xml-notification configuration
}

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_when_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

setCliErrorHandling $abort_when_error
set var connectionType "https"
handleIdentityConfig $identityActionType $connectionType $targetServerIpAddress $targetServerHttpsPort $targetServerUsername $targetServerPassword $xmlTargetName $enabledPorts $disabledPorts $vrName

</content>
  <contexts>,Device</contexts>
  <supprotedGroups></supprotedGroups>
  <roles>,NetSight Administrator,</roles>
  <auditLogEnabled>false</auditLogEnabled>
  <saveConfigOnExit>false</saveConfigOnExit>
  <menuScope>NONE</menuScope>
  <scriptTimeout>60</scriptTimeout>
  <creator>system</creator>
  <scriptOwner>admin</scriptOwner>
  <defaultCategory>Identity and Access</defaultCategory>
</script>
