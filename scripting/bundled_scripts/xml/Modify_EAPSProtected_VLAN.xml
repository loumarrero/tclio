<!-- This file is generated by system. Do not edit this file. -->
<script name="Modify_EAPSProtected_VLAN">
<comments>This scripts modifies VLANs protected by EAPS domains</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Modification of VLAN protection via EAPS domain
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create VLAN
# 2.  Assign the VLAN to a QoS Profile
# 3.  Add the VLAN to a EAPS domain
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Modifies VLANs via addition or removal to EAPS domains&quot;
# @SectionStart ( description = &quot;VLAN EAPS Protection Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

#############################################################################
# VLAN Protection Parameters definitions
#############################################################################

# @VariableFieldLabel (description = &quot;Choose Modification Action-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [Modify_Create,Modify_Delete,Modify_Insert,Modify_Remove,Modify_InsRem])
set var eapsProtModifyActionType Modify_Create

# @VariableFieldLabel (description = &quot;Comma separated 3-Tuples of VLAN-Name+VLAN-Tag+VLAN-QPNum, Create-only&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var eapsProtVLanNameTagQPSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated VLAN Names, INS,REM,DEL-only&quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var eapsProtVLanNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated protecting Ring Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtRingPortSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated EAPS Domain Names, this is set when EAPS is inserted and removed on same device&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtIRDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated protecting Ring Ports, this is set when EAPS is inserted and removed on same device&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtIRRingPortSeq &quot;&quot;


set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd

################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;FAILED: This script is only supported for Extreme switches.&quot;
    ENDIF
}

##############################################################
# VLAN Protection Creation Parameter Validation
##############################################################
proc validateVLanCreateParams {inVLanNameTagQPSeq
                               inDomainNameSeq
                               inRingPortSeq} {
    global abort_on_error

    IF (![expr [string length $inVLanNameTagQPSeq] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name Tag QP List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inRingPortSeq] &gt; 0]) THEN
       error &quot;FAILED: VLAN Protect Port List is empty.&quot;
    ENDIF
}

##############################################################
# VLAN Protection Update Parameter Validation
##############################################################
proc validateVLanUpdateParams {inVLanNameSeq
                               inDomainNameSeq
                               inRingPortSeq} {
    global abort_on_error

    IF (![expr [string length $inVLanNameSeq] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inRingPortSeq] &gt; 0]) THEN
       error &quot;FAILED: VLAN Protect Port List is empty.&quot;
    ENDIF
}

##############################################################
# VLAN Protection Update Parameter Validation for shared links
##############################################################
proc validateVLanUpdateSharedLinkParams {inVLanNameSeq
                               inDomainNameSeq} {
    global abort_on_error

    IF (![expr [string length $inVLanNameSeq] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name List is empty.&quot;
    ENDIF

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 3-Tuple of the form 'VLAN-Name+Tag+QP-Num'
################################################################################
proc validateOneVLanNameTagQPTuple {inNameTagQP
                                    outVLanName
                                    outVLanTag
                                    outVLanQP} {
     global abort_on_error

     upvar $outVLanName tmpVLanName
     upvar $outVLanTag  tmpVLanTag
     upvar $outVLanQP   tmpVLanQP

     set tmpNameTagQPList [split $inNameTagQP '+']

     if {[llength $tmpNameTagQPList] != 3} {
         error &quot;Invalid VLAN-Name,Tag,QP-Num Tuple=>$inNameTagQP&quot;
     }
     set tmpVLanName [lindex $tmpNameTagQPList 0]
     set tmpVLanTag  [lindex $tmpNameTagQPList 1]
     set tmpVLanQP   [lindex $tmpNameTagQPList 2]
}

################################################################################
# Procedure to Validate List of 3-Tuples of the form 'VLAN-Name+Tag+QP-Num'
################################################################################
proc validateAllVLanNameTagQPTuples {inNameTagQPSeq
                                     outVLanNameList
                                     outVLanTagList
                                     outVLanQPList} {
     global abort_on_error

     set tmpNameTagQPList [split $inNameTagQPSeq ,]

     if {[llength $tmpNameTagQPList] == 0} {
        error &quot;FAILED: VLAN-Name, Tag, QP Tuple List is empty.&quot;
     }

     upvar $outVLanNameList tmpVLanNameList
     upvar $outVLanTagList  tmpVLanTagList
     upvar $outVLanQPList   tmpVLanQPList

     foreach currTuple $tmpNameTagQPList {

        set outVLanName ""
        set outVLanTag  ""
        set outVLanQP   ""

        validateOneVLanNameTagQPTuple $currTuple \
                                      outVLanName \
                                      outVLanTag \
                                      outVLanQP

        lappend tmpVLanNameList $outVLanName
        lappend tmpVLanTagList  $outVLanTag
        lappend tmpVLanQPList   $outVLanQP
     }
}

###########################################################################
# Procedure to Clean-up a List of VLANs on the switch
###########################################################################
proc cleanUpVLanList {inVLanNameList} {

    global abort_on_error

    foreach currVLanName $inVLanNameList {
       delete vlan $currVLanName
    }
}

##########################################################################
# TCL Procedure to Create one VLAN
##########################################################################
proc createOneVLan {inVLanName inVLanTag inVLanQPNum} {

    global abort_on_error

    if {[catch {
       create vlan $inVLanName
    } errMsgText]} {
       error &quot;FAILED: Could not create VLAN $inVLanName, $errMsgText&quot;
    }

    if {[catch {
       config vlan $inVLanName tag $inVLanTag
    } errMsgText]} {
       delete vlan $inVLanName
       error &quot;FAILED: Invalid Tag $inVLanTag for VLAN $inVLanName, $errMsgText&quot;
    }

    ## if {[catch {
    ##   config vlan $inVLanName qosprofile qp$inVLanQPNum
    ## } errMsgText]} {
    ##   delete vlan $inVLanName
    ##   error &quot;FAILED: Invalid QoS-Profile for VLAN $inVLanName, $errMsgText&quot;
    ## }
}

##########################################################################
# Procedure to Create all VLANs
##########################################################################
proc createAllVLans {inVLanNameList
                     inVLanTagList
                     inVLanQPList} {

    global abort_on_error

    set finishedVLanNameList [list]

    foreach currVLanName $inVLanNameList \
            currVLanTag  $inVLanTagList \
            currVLanQPNum $inVLanQPList {

        if {[catch {
           createOneVLan $currVLanName $currVLanTag $currVLanQPNum
        } errMsgText]} {
           cleanUpVLanList $finishedVLanNameList
           error &quot;FAILED: Could not create VLANs, $errMsgText&quot;
        }

        lappend finishedVLanNameList $currVLanName
    }
}

################################################################
# TCL Procedure to delete one VLAN
################################################################
proc delOneVLan {inVLanName} {

    global abort_on_error

    if {[catch {
       delete vlan $inVLanName
    } errMsgText]} {
       puts &quot;FAILED: Could not delete VLAN $inVLanName, $errMsgText&quot;
    }
}

################################################################
# TCL Procedure to delete all VLANs
################################################################
proc delAllVLans {inVLanNameList} {

    global abort_on_error

    foreach currVLanName $inVLanNameList {
       delOneVLan $currVLanName
    }
}

##########################################################################
# Procedure to add a List of Ring-Port(s) to one VLAN
##########################################################################
proc addPortsToOneVLan {inVLanName
                        inRingPortList} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       config vlan $inVLanName add ports $inRingPortList tagged
       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI   $permitRingPortsAsUni
       ENDIF
    } errMsgText]} {
       error &quot;FAILED: Could not add Ports $inRingPortList to VLAN $inVLanName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to add a List of Ring-Port(s) to all VLAN
##########################################################################
proc addPortsToAllVLans {inVLanNameList
                         inRingPortList} {
    global abort_on_error

    set finishedVLanNameList [list]

    foreach currVLanName $inVLanNameList {

        if {[catch {
           addPortsToOneVLan $currVLanName $inRingPortList
        } errMsgText]} {
           cleanUpVLanList $finishedVLanNameList
           error &quot;FAILED: Could not add Ring-Ports to VLAN, $errMsgText&quot;
        }

        lappend finishedVLanNameList $currVLanName
    }
}

################################################################
# TCL Procedure to remove EAPS Ring Ports from one VLAN
################################################################
proc delPortsFromOneVLan {inVLanName
                          inRingPortSeq} {
    global abort_on_error

    IF ([expr [string length $inRingPortSeq] &gt; 0]) THEN
       if {[catch {
           config vlan $inVLanName delete ports $inRingPortSeq
       } errMsgText]} {
           puts &quot;FAILED: Could not delete Ports $inRingPortSeq from VLAN $inVLanName, $errMsgText&quot;
       }
    ENDIF
}

################################################################
# TCL Procedure to remove EAPS Ring Ports from all VLANs
################################################################
proc delPortsFromAllVLans {inVLanNameList
                           inRingPortSeq} {
    global abort_on_error

    foreach currVLanName $inVLanNameList {
       delPortsFromOneVLan $currVLanName $inRingPortSeq
    }
}

####################################################################
# Procedure to Add Protection of one VLAN by one EAPS Domain
####################################################################
proc addOneVLanProtectByOneDomain {inVLanName
                                   inDomainName} {
   global abort_on_error

   if {[catch {
      config eaps $inDomainName add protect $inVLanName
   } errMsgText]} {
      error &quot;FAILED: EAPS-Domain $inDomainName cannot protect VLAN $inVLanName, $errMsgText&quot;
   }
}

####################################################################
# Procedure to Add Protection of one VLAN by all EAPS Domain(s)
####################################################################
proc addOneVLanProtectByAllDomains {inVLanName
                                    inDomainNameSeq} {
   global abort_on_error

   set tmpDomainNameList [split $inDomainNameSeq ,]

   foreach currDomainName $tmpDomainNameList {

       addOneVLanProtectByOneDomain $inVLanName $currDomainName
   }
}

####################################################################
# Procedure to Add Protection of all VLANs by all EAPS Domain(s)
####################################################################
proc addAllVLansProtectByAllDomains {inVLanNameList
                                     inDomainNameSeq} {
    global abort_on_error

    foreach currVLanName $inVLanNameList {

        if {[catch {
           addOneVLanProtectByAllDomains $currVLanName $inDomainNameSeq
        } errMsgText]} {
           cleanUpVLanList $inVLanNameList
           error &quot;FAILED: VLAN Protection, $errMsgText&quot;
        }
    }
}

####################################################################
# Procedure to Remove Protection of one VLAN by one EAPS Domain
####################################################################
proc remOneVLanProtectByOneDomain {inVLanName
                                   inDomainName} {
    global abort_on_error
    global permitRingPortsAsUni
    
    if {[catch {
        config eaps $inDomainName delete protect $inVLanName
          regexp {.*deleting.* from the EAPS domain could cause a loop .*} ${CLI.OUT} addWarningMsg
        IF ([info exists addWarningMsg]) THEN
        CLI $permitRingPortsAsUni
        ENDIF
    } errMsgText]} {
        puts &quot;FAILED: Cannot delete protection of VLAN $inVLanName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

####################################################################
# Procedure to Remove Protection of one VLAN by all EAPS Domain(s)
####################################################################
proc remOneVLanProtectByAllDomains {inVLanName
                                    inDomainNameList} {
    global abort_on_error

    foreach currDomainName $inDomainNameList {
       remOneVLanProtectByOneDomain $inVLanName \
                                    $currDomainName
    }
}

####################################################################
# Procedure to Remove Protection of all VLANs by all EAPS Domain(s)
####################################################################
proc remAllVLansProtectByAllDomains {inVLanNameList
                                     inDomainNameList} {
    global abort_on_error

    foreach currVLanName $inVLanNameList {
       remOneVLanProtectByAllDomains $currVLanName \
                                     $inDomainNameList
    }
}

##################################################################
# Protected VLAN Modification : Creation of VLAN and Protection
##################################################################
proc modifyProtectedVLanCreate {inVLanNameTagQPSeq
                                inDomainNameSeq
                                inRingPortSeq} {
    global abort_on_error

    validateVLanCreateParams $inVLanNameTagQPSeq \
                             $inDomainNameSeq \
                             $inRingPortSeq

    set outVLanNameList [list]
    set outVLanTagList  [list]
    set outVLanQPList   [list]

    validateAllVLanNameTagQPTuples $inVLanNameTagQPSeq \
                                   outVLanNameList \
                                   outVLanTagList \
                                   outVLanQPList

    createAllVLans $outVLanNameList \
                   $outVLanTagList \
                   $outVLanQPList

    addAllVLansProtectByAllDomains $outVLanNameList \
                                   $inDomainNameSeq

    addPortsToAllVLans $outVLanNameList \
                       $inRingPortSeq
}

##################################################################
# Protected VLAN Modification : Deletion of Protection and VLAN
##################################################################
proc modifyProtectedVLanDelete {inVLanNameSeq
                                inDomainNameSeq
                                inRingPortSeq} {
    global abort_on_error

    validateVLanUpdateParams $inVLanNameSeq \
                             $inDomainNameSeq \
                             $inRingPortSeq

    set tmpVLanNameList   [split $inVLanNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]
    
    delPortsFromAllVLans $tmpVLanNameList \
                         $inRingPortSeq

    remAllVLansProtectByAllDomains $tmpVLanNameList \
                                   $tmpDomainNameList
    delAllVLans $tmpVLanNameList
}

##################################################################
# Protected VLAN Modification : Insertion of Protection
##################################################################
proc modifyProtectedVLanInsert {inVLanNameSeq
                                inDomainNameSeq
                                inRingPortSeq} {
    global abort_on_error

    validateVLanUpdateParams $inVLanNameSeq \
                             $inDomainNameSeq \
                             $inRingPortSeq

    set tmpVLanNameList   [split $inVLanNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]

    addAllVLansProtectByAllDomains $tmpVLanNameList \
                                   $inDomainNameSeq

    addPortsToAllVLans $tmpVLanNameList \
                       $inRingPortSeq
}

##################################################################
# Protected VLAN Modification : Removal of Protection
##################################################################
proc modifyProtectedVLanRemove {inVLanNameSeq
                                inDomainNameSeq
                                inRingPortSeq} {
    global abort_on_error

    validateVLanUpdateSharedLinkParams $inVLanNameSeq \
                                       $inDomainNameSeq

    set tmpVLanNameList   [split $inVLanNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]
    
    delPortsFromAllVLans $tmpVLanNameList \
                         $inRingPortSeq

    remAllVLansProtectByAllDomains $tmpVLanNameList \
                                   $tmpDomainNameList

    
}

##################################################################
# Protected VLAN Modification : Insert and Removal of Protection
##################################################################
proc modifyProtectedVLanInsertRemove {inVLanNameSeq
                                inDomainNameSeq
                                inRingPortSeq
                                inIRDomainNameSeq
                                inIRRingPortSeq} {
    global abort_on_error

    modifyProtectedVLanRemove $inVLanNameSeq \
                              $inIRDomainNameSeq \
                              $inIRRingPortSeq

    modifyProtectedVLanInsert $inVLanNameSeq \
                              $inDomainNameSeq \
                              $inRingPortSeq

}

####################################################################
# Modification of 802.1Q VLAN(s) on protecting EAPS Domains
####################################################################
proc modifyEapsProtectedVLan {inModifyActionType
                              inVLanNameTagQPSeq
                              inVLanNameSeq
                              inDomainNameSeq
                              inRingPortSeq
                              inIRDomainNameSeq
                              inIRRingPortSeq} {
    global abort_on_error
    global isExos

    if {[string match $isExos true]} {
        create log entry &quot;Starting VLAN EAPS-Protection Modification on Switch&quot;
    }

    switch $inModifyActionType {
      "Modify_Create" {
       modifyProtectedVLanCreate $inVLanNameTagQPSeq \
                                 $inDomainNameSeq \
                                 $inRingPortSeq
      }
      "Modify_Delete" {
       modifyProtectedVLanDelete $inVLanNameSeq \
                                 $inDomainNameSeq \
                                 $inRingPortSeq
      }
      "Modify_Insert" {
       modifyProtectedVLanInsert $inVLanNameSeq \
                                 $inDomainNameSeq \
                                 $inRingPortSeq
      }
      "Modify_Remove" {
       modifyProtectedVLanRemove $inVLanNameSeq \
                                 $inDomainNameSeq \
                                 $inRingPortSeq
      }
      "Modify_InsRem" {
      modifyProtectedVLanInsertRemove $inVLanNameSeq \
                                      $inDomainNameSeq \
                                      $inRingPortSeq \
                                      $inIRDomainNameSeq \
                                      $inIRRingPortSeq
      }
      default {
       error &quot;FAILED: Unknown Modify Action ($inModifyActionType)&quot;
      }
    }

    if {[string match $isExos true]} {
        create log entry &quot;Finished VLAN EAPS-Protection Modification on Switch&quot;
    }
}

############################################################################
# CLI Configuration Starting for VLAN Service Modification
############################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

modifyEapsProtectedVLan $eapsProtModifyActionType \
                        $eapsProtVLanNameTagQPSeq \
                        $eapsProtVLanNameSeq \
                        $eapsProtDomainNameSeq \
                        $eapsProtRingPortSeq \
                        $eapsProtIRDomainNameSeq \
                        $eapsProtIRRingPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_MOD_EAPSProtected_VLAN</rollbackScript>
<postprocessScript>Sync_MOD_EAPSProtected_VLAN</postprocessScript>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
