<!-- This file is generated by system. Do not edit this file. -->
<script name="Create_PB_HQoS_Profile">
<comments>This script Creates HQoS Bandwidth Profile for PB Service</comments>
<content>#@METADATASTART
#@DetailDescriptionStart

#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Create a PB Service specific HQoS Bandwidth Profile
#############################################################################
# Revision      : 1.0
# Last Updated  : 01-FEB-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:  This script creates a Bandwidth Profile
#############################################################################
#@DetailDescriptionEnd
#############################################################################
# @ScriptDescription &quot;Creates HQoS BW Profile for a PB Service&quot;
# @MetaDataEnd
#############################################################################

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple => 'BWP_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T'
###########################################################################
proc validateHQoSBWPNameParamsTuple {inBWPNameParamsTuple
                                     outBWPName
                                     outMeterName
                                     outCIRValue
                                     outCIRUnit
                                     outCBSValue
                                     outCBSUnit
                                     outEIRValue
                                     outEIRUnit
                                     outEBSValue
                                     outEBSUnit
                                     outSchedType
                                     outLowPriACLName
                                     outMedPriACLName
                                     outHigPriACLName
                                     outLowPriCCoSNum
                                     outMedPriCCoSNum
                                     outHigPriCCoSNum
                                     outTrafficQueueName
                                     outLowPriQPNum
                                     outMedPriQPNum
                                     outHigPriQPNum} {
     global abort_on_error

     upvar $outBWPName          tmpBWPName
     upvar $outMeterName        tmpMeterName
     upvar $outCIRValue         tmpCIRValue
     upvar $outCIRUnit          tmpCIRUnit
     upvar $outCBSValue         tmpCBSValue
     upvar $outCBSUnit          tmpCBSUnit
     upvar $outEIRValue         tmpEIRValue
     upvar $outEIRUnit          tmpEIRUnit
     upvar $outEBSValue         tmpEBSValue
     upvar $outEBSUnit          tmpEBSUnit
     upvar $outSchedType        tmpSchedType
     upvar $outLowPriACLName    tmpLowPriACLName
     upvar $outMedPriACLName    tmpMedPriACLName
     upvar $outHigPriACLName    tmpHigPriACLName
     upvar $outLowPriCCoSNum    tmpLowPriCCoSNum
     upvar $outMedPriCCoSNum    tmpMedPriCCoSNum
     upvar $outHigPriCCoSNum    tmpHigPriCCoSNum
     upvar $outTrafficQueueName tmpTrafficQueueName
     upvar $outLowPriQPNum      tmpLowPriQPNum
     upvar $outMedPriQPNum      tmpMedPriQPNum
     upvar $outHigPriQPNum      tmpHigPriQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $inBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 20} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpMeterName        [lindex $tmpBWPAttrList 0]
     set tmpCIRValue         [lindex $tmpBWPAttrList 1]
     set tmpCIRUnit          [lindex $tmpBWPAttrList 2]
     set tmpCBSValue         [lindex $tmpBWPAttrList 3]
     set tmpCBSUnit          [lindex $tmpBWPAttrList 4]
     set tmpEIRValue         [lindex $tmpBWPAttrList 5]
     set tmpEIRUnit          [lindex $tmpBWPAttrList 6]
     set tmpEBSValue         [lindex $tmpBWPAttrList 7]
     set tmpEBSUnit          [lindex $tmpBWPAttrList 8]
     set tmpSchedType        [lindex $tmpBWPAttrList 9]
     set tmpLowPriACLName    [lindex $tmpBWPAttrList 10]
     set tmpMedPriACLName    [lindex $tmpBWPAttrList 11]
     set tmpHigPriACLName    [lindex $tmpBWPAttrList 12]
     set tmpLowPriCCoSNum    [lindex $tmpBWPAttrList 13]
     set tmpMedPriCCoSNum    [lindex $tmpBWPAttrList 14]
     set tmpHigPriCCoSNum    [lindex $tmpBWPAttrList 15]
     set tmpTrafficQueueName [lindex $tmpBWPAttrList 16]
     set tmpLowPriQPNum      [lindex $tmpBWPAttrList 17]
     set tmpMedPriQPNum      [lindex $tmpBWPAttrList 18]
     set tmpHigPriQPNum      [lindex $tmpBWPAttrList 19]

     set cnvSwCIRUnit   ""
     set cnvSwCBSUnit   ""
     set cnvSwEIRUnit   ""
     set cnvSwEBSUnit   ""
     set cnvSwOOPAction ""
 
     validateBWProfOneRateCreateParams $tmpMeterName \
                                       $tmpCIRValue \
                                       $tmpCIRUnit \
                                       $tmpCBSValue \
                                       $tmpCBSUnit
 
     validateBWLowerLimitUnits $tmpCIRUnit \
                               $tmpCBSUnit \
                               cnvSwCIRUnit \
                               cnvSwCBSUnit
 
     validateOOPActionOnBD88KSSSF $tmpOOPAction \
                                  cnvSwOOPAction

     validateBWProfTwoRateCreateParams $tmpEIRValue \
                                       $tmpEIRUnit \
                                       $tmpEBSValue \
                                       $tmpEBSUnit

     validateBWUpperLimitUnits $tmpEIRUnit \
                               $tmpEBSUnit \
                               cnvSwEIRUnit \
                               cnvSwEBSUnit

     set tmpCIRUnit   $cnvSwCIRUnit
     set tmpCBSUnit   $cnvSwCBSUnit
     set tmpEIRUnit   $cnvSwEIRUnit
     set tmpEBSUnit   $cnvSwEBSUnit
     set tmpSchedType $cnvSwOOPAction
}

###########################################################################
# Procedure to Validate Comma Listed 10-Tuple(s) of the form
# Tuple => 'BWP_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T'
###########################################################################
proc validateHQoSBWPNameToParamsTupleSeq {inBWPNameToParamsSeq
                                          outBWPNameToParamsMap} {
     global abort_on_error

     if {![expr [string length $inBWPNameToParamsSeq] &gt; 0]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![expr [llength $tmpBWPNameParamsList] &gt; 0]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName          ""
        set outMeterName        ""
        set outCIRValue         ""
        set outCIRUnit          ""
        set outCBSValue         ""
        set outCBSUnit          ""
        set outEIRValue         ""
        set outEIRUnit          ""
        set outEBSValue         ""
        set outEBSUnit          ""
        set outSchedType        ""
        set outLowPriACLName    ""
        set outMedPriACLName    ""
        set outHigPriACLName    ""
        set outLowPriCCoSNum    ""
        set outMedPriCCoSNum    ""
        set outHigPriCCoSNum    ""
        set outTrafficQueueName ""
        set outLowPriQPNum      ""
        set outMedPriQPNum      ""
        set outHigPriQPNum      ""

        validateHQoSBWPNameParamsTuple $currTuple \
                                       outBWPName \
                                       outMeterName \
                                       outCIRValue \
                                       outCIRUnit \
                                       outCBSValue \
                                       outCBSUnit \
                                       outEIRValue \
                                       outEIRUnit \
                                       outEBSValue \
                                       outEBSUnit \
                                       outSchedType \
                                       outLowPriACLName \
                                       outMedPriACLName \
                                       outHigPriACLName \
                                       outLowPriCCoSNum \
                                       outMedPriCCoSNum \
                                       outHigPriCCoSNum \
                                       outTrafficQueueName \
                                       outLowPriQPNum \
                                       outMedPriQPNum \
                                       outHigPriQPNum

        set tmpBWPNameParamsMap($outBWPName.MeterName)        $outMeterName
        set tmpBWPNameParamsMap($outBWPName.CIRValue)         $outCIRValue
        set tmpBWPNameParamsMap($outBWPName.CIRUnit)          $outCIRUnit
        set tmpBWPNameParamsMap($outBWPName.CBSValue)         $outCBSValue
        set tmpBWPNameParamsMap($outBWPName.CBSUnit)          $outCBSUnit
        set tmpBWPNameParamsMap($outBWPName.EIRValue)         $outEIRValue
        set tmpBWPNameParamsMap($outBWPName.EIRUnit)          $outEIRUnit
        set tmpBWPNameParamsMap($outBWPName.EBSValue)         $outEBSValue
        set tmpBWPNameParamsMap($outBWPName.EBSUnit)          $outEBSUnit
        set tmpBWPNameParamsMap($outBWPName.SchedType)        $outSchedType
        set tmpBWPNameParamsMap($outBWPName.LowPriACLName)    $outLowPriACLName
        set tmpBWPNameParamsMap($outBWPName.MedPriACLName)    $outMedPriACLName
        set tmpBWPNameParamsMap($outBWPName.HigPriACLName)    $outHigPriACLName
        set tmpBWPNameParamsMap($outBWPName.LowPriCCoSNum)    $outLowPriCCoSNum
        set tmpBWPNameParamsMap($outBWPName.MedPriCCoSNum)    $outMedPriCCoSNum
        set tmpBWPNameParamsMap($outBWPName.HigPriCCoSNum)    $outHigPriCCoSNum
        set tmpBWPNameParamsMap($outBWPName.TrafficQueueName) $outTrafficQueueName
        set tmpBWPNameParamsMap($outBWPName.LowPriQPNum)      $outLowPriQPNum
        set tmpBWPNameParamsMap($outBWPName.MedPriQPNum)      $outMedPriQPNum
        set tmpBWPNameParamsMap($outBWPName.HigPriQPNum)      $outHigPriQPNum
     }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD12804R
###########################################################################
proc setMeterParamsOnBD12804R {inMeterName
                               inCIRValue
                               inCIRUnit
                               inCBSValue
                               inCBSUnit} {
    global abort_on_error

    if {[catch {
       config meter $inMeterName \
              max-burst-size $inCBSValue $inCBSUnit \
              committed-rate $inCIRValue $inCIRUnit
    } errMsgText]} {
      delete meter $inMeterName
      error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

######################################################################
# Procedure to Create the Traffic Queue on BD12804R Platform
######################################################################
proc createSPMTrafficQueueOnBD12804R {inTrafficQueueName} {

    global abort_on_error

    if {[catch {
       create traffic queue $inTrafficQueueName ingress-only strict-priority
    } errMsgText]} {
       error &quot;FAILED: Could not create Traffic-Queue $inTrafficQueueName, $errMsgText&quot;
    }
}

######################################################################
# Procedure to attach Traffic Queue Params on BD12804R
######################################################################
proc setSPMTrafficQueueParamsOnBD12804R {inTrafficQueueName
                                         inMeterName} {
    global abort_on_error

    if {[catch {
       config traffic queue $inTrafficQueueName aggregate-meter $inMeterName
    } errMsgText]} {
      delete traffic queue $inTrafficQueueName
      error &quot;FAILED: Can't set Meter to Traffic-Queue $inTrafficQueueName, $errMsgText&quot;
    }
}

######################################################################
# Procedure to Create the Traffic Queue on BD20800 Platform
######################################################################
proc createSPMTrafficQueueOnBD20800 {inTrafficQueueName} {

    global abort_on_error

    if {[catch {
       create traffic queue $inTrafficQueueName strict-priority
    } errMsgText]} {
       error &quot;FAILED: Could not create Traffic-Queue $inTrafficQueueName, $errMsgText&quot;
    }
}

######################################################################
# Procedure to attach Traffic Queue Params on BD20800
######################################################################
proc setSPMTrafficQueueParamsOnBD20800 {inTrafficQueueName
                                        inMeterName} {
    global abort_on_error

    if {[catch {
       config traffic queue $inTrafficQueueName aggregate-meter $inMeterName
    } errMsgText]} {
      delete traffic queue $inTrafficQueueName
      error &quot;FAILED: Can't set Meter to Traffic-Queue $inTrafficQueueName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Create ACL Policy to Classify one Priority ingress Traffic
##########################################################################
proc createSPMOnePriTraffClsfrACL {inVManId
                                   inACLName
                                   inCCoSNum
                                   inTrafficQueueName
                                   inQPNum} {
    global abort_on_error

    set aclMatchCond  "svid $inVManId;ccos $inCCoSNum"
    set aclRuleAction "permit;traffic-queue $inTrafficQueueName;qosprofile qp$inQPNum"

    if {[catch {
       create access-list $inACLName $aclMatchCond $aclRuleAction
    } errMsgText]} {
       error &quot;FAILED: Could not create ACL $inACLName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Create ACL Policy to Classify all Priority ingress Traffic
##########################################################################
proc createSPMAllPriTraffClsfrACL {inVManId
                                   inLowPriACLName
                                   inMedPriACLName
                                   inHigPriACLName
                                   inLowPriCCoSNum
                                   inMedPriCCoSNum
                                   inHigPriCCoSNum
                                   inTrafficQueueName
                                   inLowPriQPNum
                                   inMedPriQPNum
                                   inHigPriQPNum} {

    createSPMOnePriTraffClsfrACL $inVManId \
                                 $inLowPriACLName \
                                 $inLowPriCCoSNum \
                                 $inTrafficQueueName \
                                 $inLowPriQPNum

    createSPMOnePriTraffClsfrACL $inVManId \
                                 $inMedPriACLName \
                                 $inMedPriCCoSNum \
                                 $inTrafficQueueName \
                                 $inMedPriQPNum

    createSPMOnePriTraffClsfrACL $inVManId \
                                 $inHigPriACLName \
                                 $inHigPriCCoSNum \
                                 $inTrafficQueueName \
                                 $inHigPriQPNum
}

############################################################################
# Bandwidth Profile Creation on BD12804R
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
# 3) Create Traffic Queue
# 4) Configure Traffic Queue with Meter
############################################################################
############################################################################
proc createOneBWPObjsOnBD12804R {inVManId
                                 inMeterName
                                 inCIRValue
                                 inCIRUnit
                                 inCBSValue
                                 inCBSUnit
                                 inLowPriACLName
                                 inMedPriACLName
                                 inHigPriACLName
                                 inLowPriCCoSNum
                                 inMedPriCCoSNum
                                 inHigPriCCoSNum
                                 inTrafficQueueName
                                 inLowPriQPNum
                                 inMedPriQPNum
                                 inHigPriQPNum} {
    global abort_on_error

    createMeter $inMeterName

    setMeterParamsOnBD12804R $inMeterName \
                             $inCIRValue \
                             $inCIRUnit \
                             $inCBSValue \
                             $inCBSUnit

    createSPMTrafficQueueOnBD12804 $inTrafficQueueName

    setSPMTrafficQueueParamsOnBD12804R $inTrafficQueueName \
                                       $inMeterName

    createSPMAllPriTraffClsfrACL $inVManId \
                                 $inLowPriACLName \
                                 $inMedPriACLName \
                                 $inHigPriACLName \
                                 $inLowPriCCoSNum \
                                 $inMedPriCCoSNum \
                                 $inHigPriCCoSNum \
                                 $inTrafficQueueName \
                                 $inLowPriQPNum \
                                 $inMedPriQPNum \
                                 $inHigPriQPNum
}

############################################################################
# Bandwidth Profile attachment on BD12804R
############################################################################
# 1) Configure all priority ACLs on a UNI-Port
############################################################################
proc attachOneUniBWPOnBD12804R {inUniPortNum
                                inLowPriACLName
                                inMedPriACLName
                                inHigPriACLName} {
    global abort_on_error

    if {[catch {
       configure access-list add $inHigPriACLName first ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not attach HIG-ACL $inHigPriACLName, $errMsgText&quot;
    }

    if {[catch {
       configure access-list add $inMedPriACLName after $inHigPriACLName ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not attach MED-ACL $inMedPriACLName, $errMsgText&quot;
    }

    if {[catch {
       configure access-list add $inLowPriACLName after $inMedPriACLName ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not attach LOW-ACL $inLowPriACLName, $errMsgText&quot;
    }
}

############################################################################
# All Bandwidth Profile Creation on BD12804R
############################################################################
proc createAllBWPObjsOnBD12804R {inVManId
                                 inBWPNameList
                                 inBWPNameParamsMap} {

     foreach currBWPName $inBWPNameList {

        createOneBWPObjsOnBD12804R \
              inVManId \
              $inBWPNameParamsMap($currBWPName.MeterName) \
              $inBWPNameParamsMap($currBWPName.CIRValue) \
              $inBWPNameParamsMap($currBWPName.CIRUnit) \
              $inBWPNameParamsMap($currBWPName.CBSValue) \
              $inBWPNameParamsMap($currBWPName.CBSUnit) \
              $inBWPNameParamsMap($currBWPName.LowPriACLName) \
              $inBWPNameParamsMap($currBWPName.MedPriACLName) \
              $inBWPNameParamsMap($currBWPName.HigPriACLName) \
              $inBWPNameParamsMap($currBWPName.LowPriCCoSNum) \
              $inBWPNameParamsMap($currBWPName.MedPriCCoSNum) \
              $inBWPNameParamsMap($currBWPName.HigPriCCoSNum) \
              $inBWPNameParamsMap($currBWPName.TrafficQueueName) \
              $inBWPNameParamsMap($currBWPName.LowPriQPNum) \
              $inBWPNameParamsMap($currBWPName.MedPriQPNum) \
              $inBWPNameParamsMap($currBWPName.HigPriQPNum)
     }
}

############################################################################
# All Bandwidth Profile attachment on BD12804R
############################################################################
proc attachAllUniBWPOnBD12804R {inUniPortList
                                inBWPNameList
                                inBWPNameParamsMap} {

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        attachOneUniBWPOnBD12804R \
              $currUniPort \
              $inBWPNameParamsMap($currBWPName.LowPriACLName) \
              $inBWPNameParamsMap($currBWPName.MedPriACLName) \
              $inBWPNameParamsMap($currBWPName.HigPriACLName)
     }
}
</content>
<creator>system</creator>
<contexts></contexts>
<supprotedGroups>,ALL,</supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<scriptOwner>system</scriptOwner>

</script>
