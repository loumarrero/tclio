<!-- This file is generated by system. Do not edit this file. -->
<script name="Delete_EAPSProtected_VMAN">
<comments>This scripts deletes a list of VMANs after removing them from EAPS domain protection</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : VMAN deletion after removing from EAPS domain's protection
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1. Delete the list of VMAN from protection of a list of EAPS domains.
# 1. Delete the list of Ring Ports from each VMAN in the List.
# 2. Delete the list of VMAN(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;This script deletes VMANs after removing from EAPS domain's protection&quot;
# @SectionStart (description = &quot;VMAN Protection Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

################################################################################
# VMAN Definition
################################################################################

# @VariableFieldLabel (description = &quot;List of comma separated VMAN Names&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtVManNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;List of comma separated EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var eapsProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;List of comma separated protecting Ring Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var eapsProtRingPortSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# TCL Procedure for VMAN Protection Parameter Validation
############################################################################
proc validateVManProtectParams {inVManNameSeq inDomainNameSeq inRingPortSeq} {

    global abort_on_error
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
    
    IF (![expr [string length $inVManNameSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Name List is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
    
    IF (![expr [string length $inRingPortSeq] &gt; 0]) THEN
       error &quot;FAILED: VMAN Protect Port List is empty.&quot;
    ENDIF
}

#################################################################################
# Define TCL procedures for VMAN removal from EAPS Domain Ring Ports
# and subsequent deletion of the VMAN
################################################################################
proc remProtectOneVManFromOneDomain {inVManName inDomainName} {

    global abort_on_error

    if {[catch {
        config eaps $inDomainName delete protected $inVManName
    } errMsgText]} { 
        puts &quot;FAILED: Cannot delete protection of VMAN $inVManName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

proc remProtectOneVManFromAllDomain {inVManName inDomainNameList} {

    global abort_on_error

    foreach currDomainName $inDomainNameList {
       remProtectOneVManFromOneDomain $inVManName $currDomainName
    }
}

proc delPortsFromOneVMan {inVManName inRingPortSeq} {

    global abort_on_error

    if {[catch {
       config vman $inVManName delete ports $inRingPortSeq
    } errMsgText]} { 
       puts &quot;FAILED: Could not delete Ports $inRingPortSeq from VMAN $inVManName, $errMsgText&quot;
    }
}

proc delOneVMan {inVManName} {

    global abort_on_error

    if {[catch {
       delete vman $inVManName
    } errMsgText]} { 
       puts &quot;FAILED: Could not delete VMAN $inVManName, $errMsgText&quot;
    }
}

proc remProtectAllVManFromAllDomain {inVManNameList inDomainNameList} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       remProtectOneVManFromAllDomain $currVManName \
                                      $inDomainNameList
    }
}

proc delPortsFromAllVMan {inVManNameList inRingPortSeq} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       delPortsFromOneVMan $currVManName \
                           $inRingPortSeq
    }
}

proc delAllVMan {inVManNameList} {

    global abort_on_error

    foreach currVManName $inVManNameList {
       delOneVMan $currVManName
    }
}

#############################################################################
# TCL Procedure for VMAN deletion after protection removal from EAPS Domain
# after validating all parameters
#############################################################################
proc handleProtectedVManDelete {inVManNameSeq inDomainNameSeq inRingPortSeq} {

    global abort_on_error
	global isExos
	
	if {[string match $isExos true]} {
    	create log entry &quot;Starting VMAN protection removal from EAPS on Switch&quot;
   	}

    validateVManProtectParams $inVManNameSeq \
                              $inDomainNameSeq \
                              $inRingPortSeq

    set tmpVManNameList   [split $inVManNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]
    
    remProtectAllVManFromAllDomain $tmpVManNameList \
                                   $tmpDomainNameList
    
    delPortsFromAllVMan $tmpVManNameList \
                        $inRingPortSeq
    
    delAllVMan $tmpVManNameList

	if {[string match $isExos true]} {
    	create log entry &quot;Finished VMAN protection removal from EAPS on Switch&quot;
   	}
}

############################################################################
# CLI Configuration Starting
############################################################################
setCliErrorHandling $abortOnCliError

handleProtectedVManDelete $eapsProtVManNameSeq \
                          $eapsProtDomainNameSeq \
                          $eapsProtRingPortSeq

#################################################################################
## Now Sync VMAN and Topology on this device so that they are shown in the Client
#################################################################################
PerformSync -device $deviceIP -scope VLAN
PerformSync -device $deviceIP -scope EapsDomain -type protected -name $eapsProtDomainNameSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<menuScope>TOOLS</menuScope>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
