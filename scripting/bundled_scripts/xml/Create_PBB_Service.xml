<!-- This file is generated by system. Do not edit this file. -->
<script name="Create_PBB_Service">
<comments>This script creates a PBB S/C-Tag Service at a List of UNI Port(s)</comments>
<content>#@MetaDataStart
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Create a PBB Service for Customer
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:  This script creates a PBB S/C-Tagged or Port-based Service
#           at a List of UNI Port(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;scripting.Script to create a S/C-VLAN and add a List of UNI Port(s) and stitch with a B-VLAN&quot;

# @SectionStart (description = &quot;PBB Service Create Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;PBB Service-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [PBB_STAG,PBB_CTAG,PBB_PORT])
set var ethServPbbType PBB_STAG

# @VariableFieldLabel (description = &quot;Switch-Platform&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes,
#   validValues = [MODEL_BD10K,MODEL_BD12K,MODEL_BD12804R,MODEL_BD20800])
set var ethServPlatformModel &quot;&quot;

# @VariableFieldLabel (description = &quot;B-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServBVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;S/C-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServSorCVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;S/C-VLAN Tag&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var ethServSorCVLanTag &quot;&quot;

# @VariableFieldLabel (description = &quot;I-SID Name on BD20K&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = no,
#   readonly    = no)
set var ethServISidName &quot;&quot;

# @VariableFieldLabel (description = &quot;I-SID Value&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var ethServISidValue &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var ethServUniPortTagStsSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+BWP_Name&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServUniPortBWPNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServOneRateBWParamsTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServTwoRateBWParamsTupleSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd
################################################################################

############################################################################
#        Configuration Validate and Programming on the Switch
############################################################################

proc validateBWProfOneRateCREParams {inMeterName
                                     inCIRValue
                                     inCIRUnit
                                     inCBSValue
                                     inCBSUnit} {
    global abort_on_error

    IF (![expr [string length $inMeterName] &gt; 0]) THEN
       error &quot;FAILED: Meter Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inCIRValue] &gt; 0]) THEN
       error &quot;FAILED: CIR value is empty.&quot;
    ENDIF

    IF (![expr [string length $inCIRUnit] &gt; 0]) THEN
       error &quot;FAILED: CIR unit is empty.&quot;
    ENDIF

    IF (![expr [string length $inCBSValue] &gt; 0]) THEN
       error &quot;FAILED: CBS value is empty.&quot;
    ENDIF

    IF (![expr [string length $inCBSUnit] &gt; 0]) THEN
       error &quot;FAILED: CBS unit is empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure To Validate Bandwidth-Profile Two-Rate Create Parameters
############################################################################
proc validateBWProfTwoRateCREParams {inMeterName
                                     inCIRValue
                                     inCIRUnit
                                     inCBSValue
                                     inCBSUnit
                                     inEIRValue
                                     inEIRUnit
                                     inEBSValue
                                     inEBSUnit} {
    global abort_on_error

    validateBWProfOneRateCREParams $inMeterName \
                                   $inCIRValue \
                                   $inCIRUnit \
                                   $inCBSValue \
                                   $inCBSUnit

    IF (![expr [string length $inEIRValue] &gt; 0]) THEN
       error &quot;FAILED: EIR value is empty.&quot;
    ENDIF

    IF (![expr [string length $inEIRUnit] &gt; 0]) THEN
       error &quot;FAILED: EIR unit is empty.&quot;
    ENDIF

    IF (![expr [string length $inEBSValue] &gt; 0]) THEN
       error &quot;FAILED: EBS value is empty.&quot;
    ENDIF

    IF (![expr [string length $inEBSUnit] &gt; 0]) THEN
       error &quot;FAILED: EBS unit is empty.&quot;
    ENDIF
}

###########################################################################
# Procedure to validate Bandwidth Lower-Limit Units
###########################################################################
proc validateBWLowerLimitUnits {inCIRUnit
                                inCBSUnit
                                outSwCIRUnit
                                outSwCBSUnit} {
    global abort_on_error
    upvar  $outSwCIRUnit tmpSwCIRUnit
    upvar  $outSwCBSUnit tmpSwCBSUnit

    switch $inCIRUnit {
       "CIRU_KBPS" {set tmpSwCIRUnit "Kbps"}
       "CIRU_MBPS" {set tmpSwCIRUnit "Mbps"}
       "CIRU_GBPS" {set tmpSwCIRUnit "Gbps"}
       default {
        error &quot;FAILED: Invalid CIR Unit_Type=>$inCIRUnit&quot;
       }
    }
    switch $inCBSUnit {
       "CBSU_KB" {set tmpSwCBSUnit "Kb"}
       "CBSU_MB" {set tmpSwCBSUnit "Mb"}
       "CBSU_GB" {set tmpSwCBSUnit "Gb"}
       default {
        error &quot;FAILED: Invalid CBS Unit_Type=>$inCBSUnit&quot;
       }
    }
}

###########################################################################
# Procedure to validate Bandwidth Upper-Limit Units
###########################################################################
proc validateBWUpperLimitUnits {inEIRUnit
                                inEBSUnit
                                outSwEIRUnit
                                outSwEBSUnit} {
    global abort_on_error
    upvar  $outSwEIRUnit tmpSwEIRUnit
    upvar  $outSwEBSUnit tmpSwEBSUnit

    switch $inEIRUnit {
       "EIRU_KBPS" {set tmpSwEIRUnit "Kbps"}
       "EIRU_MBPS" {set tmpSwEIRUnit "Mbps"}
       "EIRU_GBPS" {set tmpSwEIRUnit "Gbps"}
       default {
        error &quot;FAILED: Invalid EIR Unit_Type=>$inEIRUnit&quot;
       }
    }
    switch $inEBSUnit {
       "EBSU_KB" {set tmpSwEBSUnit "Kb"}
       "EBSU_MB" {set tmpSwEBSUnit "Mb"}
       "EBSU_GB" {set tmpSwEBSUnit "Gb"}
       default {
        error &quot;FAILED: Invalid EBS Unit_Type=>$inEBSUnit&quot;
       }
    }
}

######################################################################
# Procedure to Validate Out-Of-Profile Action types for Platforms
# BD8800, SummitStack and Summit-Family
######################################################################
proc validateOneRateOOPAction {inOOPAction
                               outSwOOPAction} {
    global abort_on_error
    upvar  $outSwOOPAction tmpSwOOPAction

    switch $inOOPAction {
       "OOPACT_DROP"    {set tmpSwOOPAction "drop"}
       "OOPACT_SETPRCD" {set tmpSwOOPAction "set-drop-precedence"}
       default {
        error &quot;FAILED: Invalid Out-Of-Profile Action=>$inOOPAction&quot;
       }
    }
}

######################################################################
# Procedure to Validate Scheduling types
######################################################################
proc validateLQoSSchedType {inSchedType
                            outSwSchedType} {
    global abort_on_error
    upvar  $outSwSchedType tmpSwSchedType

    switch $inSchedType {
       "SCHEDT_SPR" {set tmpSwSchedType "strict-priority"}
       "SCHEDT_WRR" {set tmpSwSchedType "wrr"}
       default {
        error &quot;FAILED: Invalid Scheduling_Type=>$inSchedType&quot;
       }
    }
}

###########################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI_Port+BWP_Name'
###########################################################################
proc validateUniPortBWPTuple {inUniPortBWPName
                              outUniPortNum
                              outBWPName} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outBWPName    tmpBWPName

     set tmpUniBWPList [split $inUniPortBWPName '+']

     if {[llength $tmpUniBWPList] != 2} {
         error &quot;Invalid UNI-Port, BWP-Name Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniBWPList 0]
     set tmpBWPName    [lindex $tmpUniBWPList 1]
}

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple => 'BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum'
###########################################################################
proc validateOneRateBWParamsTuple {inBWPNameParamsTuple
                                   outBWPName
                                   outCOSMode
                                   outMeterName
                                   outCIRValue
                                   outCIRUnit
                                   outCBSValue
                                   outCBSUnit
                                   outOOPAction
                                   outSchedType
                                   outACLName
                                   outQPNum} {
     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outCIRValue   tmpCIRValue
     upvar $outCIRUnit    tmpCIRUnit
     upvar $outCBSValue   tmpCBSValue
     upvar $outCBSUnit    tmpCBSUnit
     upvar $outOOPAction  tmpOOPAction
     upvar $outSchedType  tmpSchedType
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 10} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpCIRValue   [lindex $tmpBWPAttrList 2]
     set tmpCIRUnit    [lindex $tmpBWPAttrList 3]
     set tmpCBSValue   [lindex $tmpBWPAttrList 4]
     set tmpCBSUnit    [lindex $tmpBWPAttrList 5]
     set tmpOOPAction  [lindex $tmpBWPAttrList 6]
     set tmpSchedType  [lindex $tmpBWPAttrList 7]
     set tmpACLName    [lindex $tmpBWPAttrList 8]
     set tmpQPNum      [lindex $tmpBWPAttrList 9]

     set cnvSwCIRUnit   ""
     set cnvSwCBSUnit   ""
     set cnvSwOOPAction ""

     validateBWProfOneRateCREParams $tmpMeterName \
                                    $tmpCIRValue \
                                    $tmpCIRUnit \
                                    $tmpCBSValue \
                                    $tmpCBSUnit

     validateBWLowerLimitUnits $tmpCIRUnit $tmpCBSUnit cnvSwCIRUnit cnvSwCBSUnit

     validateOneRateOOPAction $tmpOOPAction cnvSwOOPAction

     validateLQoSSchedType $tmpSchedType cnvSwSchedType

     set tmpCIRUnit   $cnvSwCIRUnit
     set tmpCBSUnit   $cnvSwCBSUnit
     set tmpOOPAction $cnvSwOOPAction
     set tmpSchedType $cnvSwSchedType
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum'
###########################################################################
proc validateTwoRateBWParamsTuple {inBWPNameParamsTuple
                                   outBWPName
                                   outCOSMode
                                   outMeterName
                                   outCIRValue
                                   outCIRUnit
                                   outCBSValue
                                   outCBSUnit
                                   outEIRValue
                                   outEIRUnit
                                   outEBSValue
                                   outEBSUnit
                                   outSchedType
                                   outACLName
                                   outQPNum} {
     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outCIRValue   tmpCIRValue
     upvar $outCIRUnit    tmpCIRUnit
     upvar $outCBSValue   tmpCBSValue
     upvar $outCBSUnit    tmpCBSUnit
     upvar $outEIRValue   tmpEIRValue
     upvar $outEIRUnit    tmpEIRUnit
     upvar $outEBSValue   tmpEBSValue
     upvar $outEBSUnit    tmpEBSUnit
     upvar $outSchedType  tmpSchedType
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 13} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpCIRValue   [lindex $tmpBWPAttrList 2]
     set tmpCIRUnit    [lindex $tmpBWPAttrList 3]
     set tmpCBSValue   [lindex $tmpBWPAttrList 4]
     set tmpCBSUnit    [lindex $tmpBWPAttrList 5]
     set tmpEIRValue   [lindex $tmpBWPAttrList 6]
     set tmpEIRUnit    [lindex $tmpBWPAttrList 7]
     set tmpEBSValue   [lindex $tmpBWPAttrList 8]
     set tmpEBSUnit    [lindex $tmpBWPAttrList 9]
     set tmpSchedType  [lindex $tmpBWPAttrList 10]
     set tmpACLName    [lindex $tmpBWPAttrList 11]
     set tmpQPNum      [lindex $tmpBWPAttrList 12]

     set cnvSwCIRUnit   ""
     set cnvSwCBSUnit   ""
     set cnvSwEIRUnit   ""
     set cnvSwEBSUnit   ""
     set cnvSwSchedType ""

     validateBWProfTwoRateCREParams $tmpMeterName \
                                    $tmpCIRValue \
                                    $tmpCIRUnit \
                                    $tmpCBSValue \
                                    $tmpCBSUnit \
                                    $tmpEIRValue \
                                    $tmpEIRUnit \
                                    $tmpEBSValue \
                                    $tmpEBSUnit

     validateBWLowerLimitUnits $tmpCIRUnit $tmpCBSUnit cnvSwCIRUnit cnvSwCBSUnit

     validateBWUpperLimitUnits $tmpEIRUnit $tmpEBSUnit cnvSwEIRUnit cnvSwEBSUnit

     validateLQoSSchedType $tmpSchedType cnvSwSchedType

     set tmpCIRUnit   $cnvSwCIRUnit
     set tmpCBSUnit   $cnvSwCBSUnit
     set tmpEIRUnit   $cnvSwEIRUnit
     set tmpEBSUnit   $cnvSwEBSUnit
     set tmpSchedType $cnvSwSchedType
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form 'UNI_Port+BWP_Name'
#############################################################################
proc validateUniPortToBWPNameTupleSeq {inUniPortToBWPNameSeq
                                       outUniPortList
                                       outBWPNameList} {
     global abort_on_error

     if {![string length $inUniPortToBWPNameSeq]} {
        return
     }

     set tmpUniPortBWPNameList [split $inUniPortToBWPNameSeq ,]

     if {![llength $tmpUniPortBWPNameList]} {
        error &quot;UNI-Port, BWP-Name Tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outBWPNameList tmpBWPNameList

     foreach currTuple $tmpUniPortBWPNameList {

        set outUniPortNum ""
        set outBWPName    ""

        validateUniPortBWPTuple $currTuple \
                                outUniPortNum \
                                outBWPName

        lappend tmpUniPortList $outUniPortNum
        lappend tmpBWPNameList $outBWPName
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Name:CIR_V+CIR_U+CBS_V+CBS_U+SCH_T'
###########################################################################
proc validateOneRateBWParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outCIRValue   ""
        set outCIRUnit    ""
        set outCBSValue   ""
        set outCBSUnit    ""
        set outOOPAction  ""
        set outSchedType  ""
        set outACLName    ""
        set outQPNum      ""

        validateOneRateBWParamsTuple $currTuple \
                                     outBWPName \
                                     outCOSMode \
                                     outMeterName \
                                     outCIRValue \
                                     outCIRUnit \
                                     outCBSValue \
                                     outCBSUnit \
                                     outOOPAction \
                                     outSchedType \
                                     outACLName \
                                     outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.CIRValue)   $outCIRValue
        set tmpBWPNameToParamsMap($outBWPName.CIRUnit)    $outCIRUnit
        set tmpBWPNameToParamsMap($outBWPName.CBSValue)   $outCBSValue
        set tmpBWPNameToParamsMap($outBWPName.CBSUnit)    $outCBSUnit
        set tmpBWPNameToParamsMap($outBWPName.OOPAction)  $outOOPAction
        set tmpBWPNameToParamsMap($outBWPName.SchedType)  $outSchedType
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum'
###########################################################################
proc validateTwoRateBWParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outCIRValue   ""
        set outCIRUnit    ""
        set outCBSValue   ""
        set outCBSUnit    ""
        set outEIRValue   ""
        set outEIRUnit    ""
        set outEBSValue   ""
        set outEBSUnit    ""
        set outSchedType  ""
        set outACLName    ""
        set outQPNum      ""

        validateTwoRateBWParamsTuple $currTuple \
                                     outBWPName \
                                     outCOSMode \
                                     outMeterName \
                                     outCIRValue \
                                     outCIRUnit \
                                     outCBSValue \
                                     outCBSUnit \
                                     outEIRValue \
                                     outEIRUnit \
                                     outEBSValue \
                                     outEBSUnit \
                                     outSchedType \
                                     outACLName \
                                     outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.CIRValue)   $outCIRValue
        set tmpBWPNameToParamsMap($outBWPName.CIRUnit)    $outCIRUnit
        set tmpBWPNameToParamsMap($outBWPName.CBSValue)   $outCBSValue
        set tmpBWPNameToParamsMap($outBWPName.CBSUnit)    $outCBSUnit
        set tmpBWPNameToParamsMap($outBWPName.EIRValue)   $outEIRValue
        set tmpBWPNameToParamsMap($outBWPName.EIRUnit)    $outEIRUnit
        set tmpBWPNameToParamsMap($outBWPName.EBSValue)   $outEBSValue
        set tmpBWPNameToParamsMap($outBWPName.EBSUnit)    $outEBSUnit
        set tmpBWPNameToParamsMap($outBWPName.SchedType)  $outSchedType
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

######################################################################
# Procedure to Create the Meter on the Switch
######################################################################
proc createMeter {inMeterName} {

    global abort_on_error

    if {[catch {
       create meter $inMeterName
    } errMsgText]} {
       error &quot;FAILED: Could not create Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD20K
###########################################################################
proc setMeterParamsOnBD20800 {inMeterName
                              inCIRValue
                              inCIRUnit
                              inCBSValue
                              inCBSUnit
                              inEIRValue
                              inEIRUnit
                              inEBSValue
                              inEBSUnit} {
    global abort_on_error

    if {[catch {
       set tmpCIRArg "committed-rate        $inCIRValue $inCIRUnit"
       set tmpCBSArg "committed-burst-size  $inCBSValue $inCBSUnit"
       set tmpEIRArg "peak-rate $inEIRValue $inEIRUnit"
       set tmpEBSArg "peak-burst-size $inEBSValue $inEBSUnit"

       config meter $inMeterName $tmpCIRArg $tmpCBSArg $tmpEIRArg $tmpEBSArg
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Create ACL Policy to classify and meter ingress traffic
##########################################################################
proc createMeteringTraffClsfrACL {inPbbType
                                  inSorCVLanTag
                                  inCOSMode
                                  inACLName
                                  inMeterName
                                  inQPNum} {
    global abort_on_error

    if {![string compare $inCOSMode "PORT"]} {
       set aclMatchCond  "\" \""
       set aclRuleAction "\"permit;meter $inMeterName;qosprofile qp$inQPNum\""
    } else {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          set aclMatchCond  "\"vlan-id $inSorCVLanTag\""
          set aclRuleAction "\"permit;meter $inMeterName;qosprofile qp$inQPNum\""
       } else {
          set aclMatchCond  "\"svid $inSorCVLanTag\""
          set aclRuleAction "\"permit;meter $inMeterName;qosprofile qp$inQPNum\""
       }
    }

    if {[catch {
       create access-list $inACLName $aclMatchCond $aclRuleAction
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Could not create ACL $inACLName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Cleanup BW-Profile Objects (Meter,ACL)
##########################################################################
proc cleanOneBWPObj {inMeterName
                     inACLName} {

    delete access-list $inACLName
    delete meter $inMeterName
}

############################################################################
# Bandwidth Profile Creation on BD20800
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
############################################################################
proc createOneBWPObjsOnBD20800 {inPbbType
                                inSorCVLanTag
                                inCOSMode
                                inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inEIRValue
                                inEIRUnit
                                inEBSValue
                                inEBSUnit
                                inACLName
                                inQPNum} {
    createMeter $inMeterName

    setMeterParamsOnBD20800 $inMeterName \
                            $inCIRValue \
                            $inCIRUnit \
                            $inCBSValue \
                            $inCBSUnit \
                            $inEIRValue \
                            $inEIRUnit \
                            $inEBSValue \
                            $inEBSUnit

    createMeteringTraffClsfrACL $inPbbType \
                                $inSorCVLanTag \
                                $inCOSMode \
                                $inACLName \
                                $inMeterName \
                                $inQPNum
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from one UNI Port
##########################################################################
proc cleanOneUniBWPAttachment {inUniPortNum
                               inACLName} {

    global abort_on_error
	configure access-list delete $inACLName ports $inUniPortNum ingress
}

############################################################################
# Bandwidth Profile attachment on BD20800
############################################################################
# 1) Configure ACL on a UNI-Port
############################################################################
proc attachOneUniBWPOnBD20800 {inSorCVLanTag
                               inUniPortNum
                               inACLName} {
    global abort_on_error

    if {[catch {
       configure access-list add $inACLName first ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not Add $inUniPortNum to $inACLName, $errMsgText&quot;
    }
}

############################################################################
# Cleanup QoS Objects (Meter, ACL etc.) for a List of BW-Profile(s)
############################################################################
proc cleanAllBWPObjs {inBWPNameList
                      inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currBWPName $inBWPNameList {

        cleanOneBWPObj $tmpBWPNameToParamsMap($currBWPName.MeterName) \
                       $tmpBWPNameToParamsMap($currBWPName.ACLName)
     }
}

############################################################################
# All Bandwidth Profile Creation on BD20800
############################################################################
proc createAllBWPObjsOnBD20800 {inPbbType
                                inSorCVLanTag
                                inBWPNameList
                                inRateLimitType
                                inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedBWPNameList [list]

     foreach currBWPName $inBWPNameList {

        if {[catch {
           if {![string equal $inRateLimitType "DUAL_RATE"]} {
                createOneSingleRateBWPObjsOnBD20800 \
                      $inPbbType \
                      $inSorCVLanTag \
                      $tmpBWPNameToParamsMap($currBWPName.COSMode) \
                      $tmpBWPNameToParamsMap($currBWPName.MeterName) \
                      $tmpBWPNameToParamsMap($currBWPName.CIRValue) \
                      $tmpBWPNameToParamsMap($currBWPName.CIRUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.CBSValue) \
                      $tmpBWPNameToParamsMap($currBWPName.CBSUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.ACLName) \
                      $tmpBWPNameToParamsMap($currBWPName.QPNum)
            } else {
                createOneDualRateBWPObjsOnBD20800 \
                      $inPbbType \
                      $inSorCVLanTag \
                      $tmpBWPNameToParamsMap($currBWPName.COSMode) \
                      $tmpBWPNameToParamsMap($currBWPName.MeterName) \
                      $tmpBWPNameToParamsMap($currBWPName.CIRValue) \
                      $tmpBWPNameToParamsMap($currBWPName.CIRUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.CBSValue) \
                      $tmpBWPNameToParamsMap($currBWPName.CBSUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.EIRValue) \
                      $tmpBWPNameToParamsMap($currBWPName.EIRUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.EBSValue) \
                      $tmpBWPNameToParamsMap($currBWPName.EBSUnit) \
                      $tmpBWPNameToParamsMap($currBWPName.ACLName) \
                      $tmpBWPNameToParamsMap($currBWPName.QPNum)
            }
        } errMsgText]} {

           cleanAllBWPObjs $finishedBWPNameList tmpBWPNameToParamsMap

           error &quot;FAILED: Could not create BW-Profile($currBWPName), $errMsgText&quot;
        }

        lappend finishedBWPNameList $currBWPName
     }
}

############################################################################
# Bandwidth Profile Creation on BD20800
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
############################################################################
proc createOneSingleRateBWPObjsOnBD20800 {inPbbType
                                inSorCVLanTag
                                inCOSMode
                                inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inACLName
                                inQPNum} {
    createMeter $inMeterName

    setSingleRateMeterParamsOnBD20800 $inMeterName \
                            $inCIRValue \
                            $inCIRUnit \
                            $inCBSValue \
                            $inCBSUnit

    createMeteringTraffClsfrACL $inPbbType \
                                $inSorCVLanTag \
                                $inCOSMode \
                                $inACLName \
                                $inMeterName \
                                $inQPNum
}

############################################################################
# Bandwidth Profile Creation on BD20800
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
############################################################################
proc createOneDualRateBWPObjsOnBD20800 {inPbbType
                                inSorCVLanTag
                                inCOSMode
                                inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inEIRValue
                                inEIRUnit
                                inEBSValue
                                inEBSUnit
                                inACLName
                                inQPNum} {
    createMeter $inMeterName

    setDualRateMeterParamsOnBD20800 $inMeterName \
                            $inCIRValue \
                            $inCIRUnit \
                            $inCBSValue \
                            $inCBSUnit \
                            $inEIRValue \
                            $inEIRUnit \
                            $inEBSValue \
                            $inEBSUnit

    createMeteringTraffClsfrACL $inPbbType \
                                $inSorCVLanTag \
                                $inCOSMode \
                                $inACLName \
                                $inMeterName \
                                $inQPNum
}

###########################################################################
# Procedure to attach Bandwidth Params on BD20K
###########################################################################
proc setDualRateMeterParamsOnBD20800 {inMeterName
                              inCIRValue
                              inCIRUnit
                              inCBSValue
                              inCBSUnit
                              inEIRValue
                              inEIRUnit
                              inEBSValue
                              inEBSUnit} {
    global abort_on_error

    if {[catch {
       set tmpCIRArg &quot;committed-rate        $inCIRValue $inCIRUnit&quot;
       set tmpCBSArg &quot;committed-burst-size  $inCBSValue $inCBSUnit&quot;
       set tmpEIRArg &quot;peak-rate $inEIRValue $inEIRUnit&quot;
       set tmpEBSArg &quot;peak-burst-size $inEBSValue $inEBSUnit&quot;

       config meter $inMeterName $tmpCIRArg $tmpCBSArg $tmpEIRArg $tmpEBSArg
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can&apos;t set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD20K
###########################################################################
proc setSingleRateMeterParamsOnBD20800 {inMeterName
                              inCIRValue
                              inCIRUnit
                              inCBSValue
                              inCBSUnit} {
    global abort_on_error

    if {[catch {
       set tmpCIRArg &quot;committed-rate        $inCIRValue $inCIRUnit&quot;
       set tmpCBSArg &quot;committed-burst-size  $inCBSValue $inCBSUnit&quot;

       config meter $inMeterName $tmpCIRArg $tmpCBSArg
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can&apos;t set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from all UNI Port(s)
##########################################################################
proc cleanAllUniBWPAttachment {inUniPortList
                               inACLNameList} {

     foreach currUniPort $inUniPortList \
             currACLName $inACLNameList {

        cleanOneUniBWPAttachment $currUniPort \
                                 $currACLName
     }
}

############################################################################
# All Bandwidth Profile attachment on BD20800
############################################################################
proc attachAllUniBWPOnBD20800 {inSorCVLanTag
                               inUniPortList
                               inBWPNameList
                               inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedUniPortList [list]
     set finishedACLNameList [list]

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)

        if {[catch {
            attachOneUniBWPOnBD20800 $inSorCVLanTag \
                                     $currUniPort \
                                     $currACLName
        } errMsgText]} {

           cleanAllUniBWPAttachment $finishedUniPortList \
                                    $finishedACLNameList

           error &quot;FAILED: Can't Attach BW-PROF($currBWPName) on UNI($currUniPort), $errMsgText&quot;
        }

        lappend finishedUniPortList $currUniPort
        lappend finishedACLNameList $currACLName
     }
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD20800
############################################################################
proc assignAllUniBWPOnBD20800 {inPbbType
                               inSorCVLanTag
                               inUniPortList
                               inBWPNameList
                               inRateLimitType
                               inBWPNameToParamsMap} {
     global abort_on_error

     if {![llength $inBWPNameList]} {
         return
     }

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     createAllBWPObjsOnBD20800 $inPbbType \
                               $inSorCVLanTag \
                               $inBWPNameList \
                               $inRateLimitType \
                               tmpBWPNameToParamsMap
     if {[catch {
        attachAllUniBWPOnBD20800 $inSorCVLanTag \
                                 $inUniPortList \
                                 $inBWPNameList \
                                 tmpBWPNameToParamsMap
     } errMsgText]} {

       cleanAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap

       error &quot;FAILED: Can't Assign BW-Profiles on UNIs, $errMsgText&quot;
     }
}

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

############################################################################
# TCL Procedure To Validate PBB Service-Type and Platform Model combination
############################################################################
proc validatePbbServiceType {inPbbType} {

    global abort_on_error

    switch $inPbbType {
       PBB_CTAG {}
       PBB_STAG {}
       PBB_PORT {}
       default {
        error &quot;FAILED: Invalid PBB Service-Type => $inPbbType&quot;
       }
    }
}

proc validatePbbTypePlatformModel {inPbbType
                                   inPlatformModel} {

    global abort_on_error

    validatePbbServiceType $inPbbType

    switch $inPlatformModel {
       MODEL_BD10K {
         if {![string compare $inPbbType "PBB_CTAG"]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD10K.&quot;
         }
       }
       MODEL_BD12K {
         if {![string compare $inPbbType "PBB_CTAG"]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD12K.&quot;
         }
       }
       MODEL_BD12804R {
         if {![string compare $inPbbType "PBB_CTAG"]} {
            error &quot;FAILED: PBB C-Tag Service is not supported on BD12K.&quot;
         }
       }
       MODEL_BD20800 {
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }
}

############################################################################
# TCL Procedure To Validate B-VLAN based Service Creation Parameters
############################################################################
proc validateServiceCreateParams {inBVLanName
                                  inSorCVLanName
                                  inSorCVLanTag} {
    global abort_on_error

    IF (![expr [string length $inBVLanName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inSorCVLanName] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inSorCVLanTag] &gt; 0]) THEN
       error &quot;FAILED: S/C-VLAN Tag is empty.&quot;
    ENDIF
}

#############################################################
# TCL Procedure To Validate I-SID Name
#############################################################
proc validateISidName {inISidName} {

    global abort_on_error

    IF (![expr [string length $inISidName] &gt; 0]) THEN
       error &quot;FAILED: I-SID Name is empty.&quot;
    ENDIF
}

#############################################################
# TCL Procedure To Validate I-SID Value
#############################################################
proc validateISidValue {inISidValue} {

    global abort_on_error

    IF (![expr [string length $inISidValue] &gt; 0]) THEN
       error &quot;FAILED: I-SID Value is empty.&quot;
    ENDIF
}

###########################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI_Port+Tag_Status'
###########################################################################
proc validateUniPortTagStsTuple {inUniPortTagSts
                                 outUniPortNum
                                 outTagSts} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagSts     tmpTagSts

     set tmpUniTagList [split $inUniPortTagSts '+']

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI-Port, Tagging-Status Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagSts     [lindex $tmpUniTagList 1]
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form 'UNI_Port+Tag_Status'
#############################################################################
proc validateUniPortTagStsTupleSeq {inUniPortTagStsSeq
                                    outUniPortList
                                    outTagStsList} {
     global abort_on_error

     IF (![expr [string length $inUniPortTagStsSeq] &gt; 0]) THEN
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     ENDIF

     set tmpUniPortTagStsList [split $inUniPortTagStsSeq ,]

     if {![llength $tmpUniPortTagStsList]} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outTagStsList  tmpTagStsList

     foreach currTuple $tmpUniPortTagStsList {

        set outUniPortNum ""
        set outTagSts     ""

        validateUniPortTagStsTuple $currTuple \
                                   outUniPortNum \
                                   outTagSts

        lappend tmpUniPortList $outUniPortNum
        lappend tmpTagStsList  $outTagSts
     }
}

##########################################################################
# Procedure to add one UNI_Port to the S/C-VLAN on the Switch
##########################################################################
proc addOneUniToSorCVLan {inPbbType
                          inSorCVLanName
                          inUniPortNum
                          inTagSts} {
    global abort_on_error
    global permitRingPortsAsUni

	if {[string equal $inTagSts "untagged"]} {
		if {[catch {
	       configure vlan Default del port $inUniPortNum
	    } errMsgText]} {
	       error &quot;FAILED: Cannot delete Port $inUniPortNum from default VLAN, $errMsgText&quot;
	    }
	}

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config cvlan $inSorCVLanName add ports $inUniPortNum $inTagSts
       } else {
          config svlan $inSorCVLanName add ports $inUniPortNum $inTagSts
       }
       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI   $permitRingPortsAsUni
       ENDIF
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
         delete cvlan $inSorCVLanName
       } else {
         delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Cannot add UNI-Port $inUniPortNum to S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to add all UNI-Port(s) to the S/C-VLAN on the switch
##########################################################################
proc addAllUnisToSorCVLan {inPbbType
                           inSorCVLanName
                           inUniPortList
                           inTagStsList} {
    global abort_on_error

    foreach currUniPort $inUniPortList \
            currTagSts  $inTagStsList {

       addOneUniToSorCVLan $inPbbType \
                           $inSorCVLanName \
                           $currUniPort \
                           $currTagSts
    }
}

###########################################################################
# Procedure to Create the S/C-VLAN on the switch
###########################################################################
proc createSorCVLAN {inPbbType
                     inSorCVLanName
                     inSorCVLanTag} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          create cvlan $inSorCVLanName
       } else {
          create svlan $inSorCVLanName
       }
    } errMsgText]} {
       error &quot;FAILED: Could not create S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config cvlan $inSorCVLanName tag $inSorCVLanTag
       } else {
          config svlan $inSorCVLanName tag $inSorCVLanTag
       }
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can't set Tag $inSorCVLanTag on S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to assign I-SID value to the S/C-VLAN on BD10K/BD12K Platforms
###########################################################################
proc addISidToSorCVLanOnBD1XK {inPbbType
                               inSorCVLanName
                               inISidValue} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config cvlan $inSorCVLanName isid $inISidValue
       } else {
          config svlan $inSorCVLanName isid $inISidValue
       }
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Invalid I-SID for S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to create I-SID and add S/C-VLAN on BD20K Platforms
###########################################################################
proc createISidAddSorCVLanOnBD2XK {inPbbType
                                   inSorCVLanName
                                   inISidName
                                   inISidValue} {
    global abort_on_error

    if {[catch {
       create isid $inISidName $inISidValue
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can't create I-SID $inISidName:$inISidValue $errMsgText&quot;
    }

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config isid $inISidName add cvlan $inSorCVLanName
       } else {
          config isid $inISidName add svlan $inSorCVLanName
       }
    } errMsgText]} {
       delete isid  $inISidName
       if {![string compare $inPbbType "PBB_CTAG"]} {
         delete cvlan $inSorCVLanName
       } else {
         delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can't add S/C-VLAN $inSorCVLanName to I-SID $inISidName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to add the S/C-VLAN to the B-VLAN on BD10K/BD12K Platforms
###########################################################################
proc addSorCVLanToBVLanOnBD1XK {inPbbType
                                inBVLanName
                                inSorCVLanName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          config bvlan $inBVLanName add cvlan $inSorCVLanName
       } else {
          config bvlan $inBVLanName add svlan $inSorCVLanName
       }
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can't add S/C-VLAN $inSorCVLanName to B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to add I-SID to the B-VLAN on BD20K Platforms
###########################################################################
proc addISidToBVLanOnBD2XK {inPbbType
                            inBVLanName
                            inSorCVLanName
                            inISidName} {
    global abort_on_error

    if {[catch {
       config bvlan $inBVLanName add isid $inISidName
    } errMsgText]} {
       if {![string compare $inPbbType "PBB_CTAG"]} {
         config isid  $inISidName delete cvlan $inSorCVLanName
         delete isid  $inISidName
         delete cvlan $inSorCVLanName
       } else {
         config isid  $inISidName delete svlan $inSorCVLanName
         delete isid  $inISidName
         delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can't add I-SID $inISidName to B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

############################################################################
# S/C-TAGGED PBB Service Creation on BD10K/BD12K Platforms
############################################################################
# 1) Create S/C-VLAN
# 2) Add UNI Ports to S/C-VLAN
# 3) Assign I-SID  to S/C-VLAN
# 4) Add    S/C-VLAN to B-VLAN
############################################################################
proc createPBBServiceSorCTagOnBD1XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inSorCVLanTag
                                     inISidValue
                                     inUniPortList
                                     inTagStsList} {
    global abort_on_error

    createSorCVLAN $inPbbType \
                   $inSorCVLanName \
                   $inSorCVLanTag

    addAllUnisToSorCVLan $inPbbType \
                         $inSorCVLanName \
                         $inUniPortList \
                         $inTagStsList

    addISidToSorCVLanOnBD1XK $inPbbType \
                             $inSorCVLanName \
                             $inISidValue

    addSorCVLanToBVLanOnBD1XK $inPbbType \
                              $inBVLanName \
                              $inSorCVLanName
}

############################################################################
# S/C-TAGGED PBB Service Creation on BD20K Platforms
############################################################################
# 1) Create S/C-VLAN
# 2) Add UNI Ports to S/C-VLAN
# 3) Create I-SID and S/C-VLAN to I-SID
# 4) Add I-SID to B-VLAN
############################################################################
proc createPBBServiceSorCTagOnBD2XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inSorCVLanTag
                                     inISidName
                                     inISidValue
                                     inUniPortList
                                     inTagStsList} {
    global abort_on_error

    createSorCVLAN $inPbbType \
                   $inSorCVLanName \
                   $inSorCVLanTag

    addAllUnisToSorCVLan $inPbbType \
                         $inSorCVLanName \
                         $inUniPortList \
                         $inTagStsList

    createISidAddSorCVLanOnBD2XK $inPbbType \
                                 $inSorCVLanName \
                                 $inISidName \
                                 $inISidValue

    addISidToBVLanOnBD2XK $inPbbType \
    					  $inBVLanName \
                          $inSorCVLanName \
                          $inISidName
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on BD1XK Platforms
############################################################################
proc runPBBServiceSorCTagCreateOnBD1XK {inPbbType
                                        inBVLanName
                                        inSorCVLanName
                                        inSorCVLanTag
                                        inISidValue
                                        inUniPortTagStsSeq} {
    global abort_on_error

    validateServiceCreateParams $inBVLanName \
                                $inSorCVLanName \
                                $inSorCVLanTag

    validateISidValue $inISidValue

    set outUniPortList [list]
    set outTagStsList  [list]

    validateUniPortTagStsTupleSeq $inUniPortTagStsSeq \
                                  outUniPortList \
                                  outTagStsList

    createPBBServiceSorCTagOnBD1XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inSorCVLanTag \
                                   $inISidValue \
                                   $outUniPortList \
                                   $outTagStsList
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on BD2XK Platforms
############################################################################
proc runPBBServiceSorCTagCreateOnBD2XK {inPbbType
                                        inBVLanName
                                        inSorCVLanName
                                        inSorCVLanTag
                                        inISidName
                                        inISidValue
                                        inUniPortTagStsSeq
                                        inBWPNameList
                                        inRateLimitType
                                        inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    validateServiceCreateParams $inBVLanName \
                                $inSorCVLanName \
                                $inSorCVLanTag

    validateISidName  $inISidName
    validateISidValue $inISidValue

    set outUniPortList [list]
    set outTagStsList  [list]

    validateUniPortTagStsTupleSeq $inUniPortTagStsSeq \
                                  outUniPortList \
                                  outTagStsList

    createPBBServiceSorCTagOnBD2XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inSorCVLanTag \
                                   $inISidName \
                                   $inISidValue \
                                   $outUniPortList \
                                   $outTagStsList

    if {[catch {
    assignAllUniBWPOnBD20800 $inPbbType \
                             $inSorCVLanTag \
                             $outUniPortList \
                             $inBWPNameList \
                             $inRateLimitType \
                             tmpBWPNameToParamsMap
	} result]} {
		deletePBBServiceSorCTagOnBD2XK $inPbbType \
                                   $inBVLanName \
                                   $inSorCVLanName \
                                   $inISidName \
                                   $outUniPortList \
                                   $outTagStsList

		error "FAILED: Could not create Bandwidth profile, $result"
	}
}

############################################################################
# S-TAGGED PBB Service Deletion on BD20K Platforms
############################################################################
# 1) Remove I-SID from B-VLAN
# 2) Remove S/C-VLAN from I-SID and then delete I-SID
# 3) Remove UNI Ports from S/C-VLAN
# 4) Delete S/C-VLAN
############################################################################
proc deletePBBServiceSorCTagOnBD2XK {inPbbType
                                     inBVLanName
                                     inSorCVLanName
                                     inISidName
                                     inUniPortList
                           			 inTagStatusList} {
    global abort_on_error

    remISidFromBVLanOnBD2XK $inBVLanName $inISidName

    remSorCVLanDeleteISidOnBD2XK $inPbbType \
                                 $inSorCVLanName \
                                 $inISidName

    remSorCVLanFromAllUnis $inPbbType \
                           $inSorCVLanName \
                           $inUniPortList \
                           $inTagStatusList

    deleteSorCVLan $inPbbType \
                   $inSorCVLanName
}

###########################################################################
# Procedure to remove I-SID from B-VLAN on BD20K Platforms
###########################################################################
proc remISidFromBVLanOnBD2XK {inBVLanName
                              inISidName} {
    global abort_on_error

    if {[catch {
       config bvlan $inBVLanName delete isid $inISidName
    } errMsgText]} {
       error &quot;FAILED: Can&apos;t remove I-SID $inISidName from B-VLAN $inBVLanName, $errMsgText&quot;
    }
}

##############################################################################
# Procedure to remove S/C-VLAN from I-SID and delete I-SID on BD20K Platforms
##############################################################################
proc remSorCVLanDeleteISidOnBD2XK {inPbbType
                                   inSorCVLanName
                                   inISidName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          config isid $inISidName delete cvlan $inSorCVLanName
       } else {
          config isid $inISidName delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       error &quot;FAILED: Can&apos;t remove S/C-VLAN $inSorCVLanName from I-SID $inISidName, $errMsgText&quot;
    }

    if {[catch {
       delete isid $inISidName
    } errMsgText]} {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
       error &quot;FAILED: Can&apos;t delete I-SID $inISidName:$inISidValue $errMsgText&quot;
    }
}

##########################################################################
# Procedure to remove UNI-Port(s) from S/C-VLAN on the switch
##########################################################################
proc remSorCVLanFromOneUni {inPbbType
                             inSorCVLanName
                             inUniPortNum
                             inTagStatus} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          configure cvlan $inSorCVLanName delete port $inUniPortNum
       } else {
          configure svlan $inSorCVLanName delete port $inUniPortNum
       }
    } errMsgText]} {
       error &quot;FAILED: Cannot delete Port $inUniPortNum from S/C-VLAN, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to Remove the CVLAN/SVLAN from all the UNI Ports on the switch
###########################################################################
proc remSorCVLanFromAllUnis {inPbbType
                             inSorCVLanName
                             inUniPortList
                             inTagStatusList} {
    foreach currUniPort   $inUniPortList \
            currTagStatus $inTagStatusList {

       remSorCVLanFromOneUni $inPbbType \
                             $inSorCVLanName \
                             $currUniPort \
                             $currTagStatus
    }

}

###########################################################################
# Procedure to Delete the S/C-VLAN on the switch
###########################################################################
proc deleteSorCVLan {inPbbType
                     inSorCVLanName} {
    global abort_on_error

    if {[catch {
       if {![string compare $inPbbType &quot;PBB_CTAG&quot;]} {
          delete cvlan $inSorCVLanName
       } else {
          delete svlan $inSorCVLanName
       }
    } errMsgText]} {
       error &quot;FAILED: Could not delete S/C-VLAN $inSorCVLanName, $errMsgText&quot;
    }
}

############################################################################
# TCL Procedure for PBB S-Tagged Service Creation on UNI Ports
############################################################################
proc handlePBBServiceSorCTagCreate {inPbbType
                                    inPlatformModel
                                    inBVLanName
                                    inSorCVLanName
                                    inSorCVLanTag
                                    inISidName
                                    inISidValue
                                    inUniPortTagStsSeq
                                    inUniPortToBWPNameSeq
                                    inOneRateBWParamsTupleSeq
                                    inTwoRateBWParamsTupleSeq} {
    global abort_on_error
	global isExos

	if {[string match $isExos true]} {
    	create log entry &quot;START-Create PBB S/C-TAG Service&quot;
   	}

    validatePbbTypePlatformModel $inPbbType \
                                 $inPlatformModel

    set outRateLimitType &quot;SINGLE_RATE&quot;
    set outUniPortList [list]
    set outBWPNameList [list]
    set outBWPNameToParamsMap(SorCVLanName) $inSorCVLanName

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outUniPortList \
                                     outBWPNameList
    switch $inPlatformModel {
       MODEL_BD10K {
       runPBBServiceSorCTagCreateOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inSorCVLanTag \
                                         $inISidValue \
                                         $inUniPortTagStsSeq
       }
       MODEL_BD12K {
       runPBBServiceSorCTagCreateOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inSorCVLanTag \
                                         $inISidValue \
                                         $inUniPortTagStsSeq
       }
       MODEL_BD12804R {
       runPBBServiceSorCTagCreateOnBD1XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inSorCVLanTag \
                                         $inISidValue \
                                         $inUniPortTagStsSeq
       }
       MODEL_BD20800 {
       if (![expr [string length $inOneRateBWParamsTupleSeq] &gt; 0]) {
            validateTwoRateBWParamsTupleSeq $inTwoRateBWParamsTupleSeq \
                                       outBWPNameToParamsMap
            set outRateLimitType "DUAL_RATE"
       } else {
            validateOneRateBWParamsTupleSeq $inOneRateBWParamsTupleSeq \
                                       outBWPNameToParamsMap
       }

       runPBBServiceSorCTagCreateOnBD2XK $inPbbType \
                                         $inBVLanName \
                                         $inSorCVLanName \
                                         $inSorCVLanTag \
                                         $inISidName \
                                         $inISidValue \
                                         $inUniPortTagStsSeq \
                                         $outBWPNameList \
                                         $outRateLimitType \
                                         outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }

	if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Create PBB S/C-TAG Service&quot;
   	}
}

############################################################################
# CLI Configuration Scripts Execution STARTING
############################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

handlePBBServiceSorCTagCreate $ethServPbbType \
                              $ethServPlatformModel \
                              $ethServBVLanName \
                              $ethServSorCVLanName \
                              $ethServSorCVLanTag \
                              $ethServISidName \
                              $ethServISidValue \
                              $ethServUniPortTagStsSeq \
                              $ethServUniPortBWPNameSeq \
                              $ethServOneRateBWParamsTupleSeq \
                              $ethServTwoRateBWParamsTupleSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_CRE_PBB_Service</rollbackScript>
<postprocessScript>Sync_CRE_PBB_Service</postprocessScript>
<scriptOwner>system</scriptOwner>

</script>
