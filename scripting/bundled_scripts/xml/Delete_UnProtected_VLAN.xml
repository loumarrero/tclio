<!-- This file is generated by system. Do not edit this file. -->
<script name="Delete_UnProtected_VLAN">
<comments>This scripts deletes a list of 802.1Q VLANs after removing them from non-Ring Ports</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Unprotected VLAN deletion after removing it from non-Ring Ports
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1. Delete the list of Non-Ring Ports from each VLAN in the List.
# 2. Delete the list of VLAN(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;This script deletes 802.1Q VLANs after removing from Ports&quot;
# @SectionStart (description = &quot;VLAN&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

################################################################################
# VLAN Definition
################################################################################
# @VariableFieldLabel (description = &quot;Comma separated List of VLAN Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var unprotVLanNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated List of VLAN Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVLanPortSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

################################################################################
# Setup VLAN Deletion Parameters Validations
################################################################################
proc validateVLanDeleteParams {inVLanNameSeq inVLanPortSeq} {

    global abort_on_error

    IF (![expr [string length $inVLanNameSeq] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name List empty.&quot;
    ENDIF
    
    IF (![expr [string length $inVLanPortSeq] &gt; 0]) THEN
       error &quot;FAILED: VLAN Port List empty.&quot;
    ENDIF
}

###########################################################################
# TCL Procedure to removal Ports from the VLAN
###########################################################################
proc delPortsFromOneVLan {inVLanName inVLanPortList} {

    global abort_on_error

    if {[catch {
       config vlan $inVLanName delete ports $inVLanPortList
    } result]} {
       error &quot;FAILED: Could not delete Ports $inVLanPortList from vlan $inVLanName, $result&quot;
    }
}

proc delOneVLan {inVLanName} {

    global abort_on_error

    if {[catch {
       delete vlan $inVLanName
    } result]} {
       error &quot;FAILED: Could not delete vlan $inVLanName, $result&quot;
    }
}

proc delPortsFromAllVLan {inVLanNameList
                          inVLanPortSeq} {
    global abort_on_error

    foreach currVLanName $inVLanNameList {
       delPortsFromOneVLan $currVLanName $inVLanPortSeq
    }
}

proc delAllVLan {inVLanNameList} {

    global abort_on_error

    foreach currVLanName $inVLanNameList {
       delOneVLan $currVLanName
    }
}

#########################################################################
# TCL Procedure to remove Ports from VLANs and also delete the VLANs
#########################################################################
proc delete8021QVLans {inVLanNameSeq
                       inVLanPortSeq} {
    global abort_on_error

    set tmpVLanNameList [split $inVLanNameSeq ,]
    
    delPortsFromAllVLan $tmpVLanNameList $inVLanPortSeq
    
    delAllVLan $tmpVLanNameList
}

#########################################################################
# TCL Procedure to validate a List of VLANs and also delete the VLANs
#########################################################################
proc deleteUnProtVLans {inVLanNameSeq inVLanPortSeq} {

    global abort_on_error
    global isExos

	if {[string match $isExos true]} {
    	create log entry &quot;Starting Unprotected VLAN Deletion on Switch&quot;
	}
	
    validateVLanDeleteParams $inVLanNameSeq \
                             $inVLanPortSeq

    delete8021QVLans $inVLanNameSeq \
                     $inVLanPortSeq

	if {[string match $isExos true]} {
    	create log entry &quot;Finished Unprotected VLAN Deletion on Switch&quot;
	}
}

################################################################################
# CLI MODE Settings
################################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

deleteUnProtVLans $unprotVLanNameSeq \
                  $unprotVLanPortSeq

#################################################################################
## Now Sync VLAN and Topology on this device so that they are shown in the Client
#################################################################################
PerformSync -device $deviceIP -scope VLAN
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<menuScope>TOOLS</menuScope>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
