<!-- This file is generated by system. Do not edit this file. -->
<script name="Create_EAPSProtected_VLAN">
<comments>This scripts creates VLANs and adds to EAPS domains as protected</comments>
    <content># @METADATASTART
        #@DetailDescriptionStart
        #############################################################################
        # Extreme Networks(R) CLI Scripting Library
        # scripting.Script : VLAN creation and protection via EAPS domain
        #############################################################################
        # Revision : 1.0
        # Last Updated : 26-DEC-2009
        #############################################################################
        # Author Name : NMS Team
        #############################################################################
        # Purpose:
        #############################################################################
        # 1. Create VLAN
        # 2. Assign the VLAN to a QoS Profile
        # 3. Add the VLAN to a EAPS domain
        #############################################################################
        #@DetailDescriptionEnd

# @ScriptDescription &quot;Creates VLANs and adds to EAPS domains as protected&quot;
# @SectionStart (description = &quot;Protected VLAN Create Params&quot;)

        # @VariableFieldLabel (description = &quot;Abort on error?&quot;,
        # type = String,
        # scope = global,
        # required = yes,
        # validValues = [yes,no])
        set var abortOnCliError yes

        #############################################################################
        # VLAN Protection Parameters definitions
        #############################################################################

# @VariableFieldLabel (description = &quot;Comma Listed VLAN_Name+VLAN_Tag+VLAN_QP&quot;,
        # type = String,
        # scope = device,
        # required = yes)
        set var eapsProtVLanNameTagQPSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed EAPS Domain Names&quot;
        # type = String,
        # scope = global,
        # required = yes)
        set var eapsProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed Protecting Ring Ports&quot;
        # type = String,
        # scope = device,
        # required = yes)
        set var eapsProtRingPortSeq &quot;&quot;

        set var permitRingPortsAsUni Yes

        # @SectionEnd
        # @MetaDataEnd

        ################################################################################
        ################################################################################
        # CONFIGURATION DETAIL
        ################################################################################

        ############################################################################
        # TCL Procedure for CLI scripting.Script Execution Mode setting
        ############################################################################
        proc setCliErrorHandling {inAbortStatus} {

        global abort_on_error

        if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
        } else {
        configure cli mode scripting ignore-error
        }
        }

        ############################################################################
        # TCL Procedure for VLAN Protection Parameter Validation
        ############################################################################
        proc validateVLanProtectParams {inVLanNameTagQPSeq
        inDomainNameSeq
        inRingPortSeq} {
        global abort_on_error
        global vendor

        IF (![string equal $vendor &quot;Extreme&quot;]) THEN
        error &quot;This script is only supported for Extreme switches.&quot;
        ENDIF

        IF (![expr [string length $inVLanNameTagQPSeq] &gt; 0]) THEN
        error &quot;FAILED: VLAN Name Tag QP List is empty.&quot;
        ENDIF

        IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
        error &quot;FAILED: EAPS Domain Name List is empty.&quot;
        ENDIF

        IF (![expr [string length $inRingPortSeq] &gt; 0]) THEN
        error &quot;FAILED: VLAN Protect Port List is empty.&quot;
        ENDIF
        }

        ################################################################################
# Procedure to Validate a single 3-Tuple of the form 'VLAN-Name+Tag+QP-Num'
        ################################################################################
        proc validateVLanNameTagQPTuple {inNameTagQP
        outVLanName
        outVLanTag
        outVLanQP} {
        global abort_on_error

        upvar $outVLanName tmpVLanName
        upvar $outVLanTag tmpVLanTag
        upvar $outVLanQP tmpVLanQP

        set tmpNameTagQPList [split $inNameTagQP '+']

        if {[llength $tmpNameTagQPList] != 3} {
        error &quot;Invalid VLAN-Name,Tag,QP-Num Tuple=>$inNameTagQP&quot;
        }
        set tmpVLanName [lindex $tmpNameTagQPList 0]
        set tmpVLanTag [lindex $tmpNameTagQPList 1]
        set tmpVLanQP [lindex $tmpNameTagQPList 2]
        }

        ################################################################################
# Procedure to Validate List of 3-Tuples of the form 'VLAN-Name+Tag+QP-Num'
        ################################################################################
        proc validateVLanNameTagQPTupleSeq {inNameTagQPSeq
        outVLanNameList
        outVLanTagList
        outVLanQPList} {
        global abort_on_error

        set tmpNameTagQPList [split $inNameTagQPSeq ,]

        if {[llength $tmpNameTagQPList] == 0} {
        error &quot;FAILED: VLAN-Name, Tag, QP Tuple List is empty.&quot;
        }

        upvar $outVLanNameList tmpVLanNameList
        upvar $outVLanTagList tmpVLanTagList
        upvar $outVLanQPList tmpVLanQPList

        foreach currTuple $tmpNameTagQPList {

        set outVLanName ""
        set outVLanTag ""
        set outVLanQP ""

        validateVLanNameTagQPTuple $currTuple \
        outVLanName \
        outVLanTag \
        outVLanQP

        lappend tmpVLanNameList $outVLanName
        lappend tmpVLanTagList $outVLanTag
        lappend tmpVLanQPList $outVLanQP
        }
        }

        ###########################################################################
        # Procedure to Clean-up a List of VLANs on the switch
        ###########################################################################
        proc cleanUpVLanList {inVLanNameList} {

        global abort_on_error

        foreach currVLanName $inVLanNameList {
        delete vlan $currVLanName
        }
        }

        ##########################################################################
        # Procedure to Create one 802.1q VLAN and add to Protect-Port List
        ##########################################################################
        proc createOneVLan {inVLanName
        inVLanTag
        inVLanQPNum} {
        global abort_on_error
        global permitRingPortsAsUni

        if {[catch {
        create vlan $inVLanName
        } errMsgText]} {
        error &quot;FAILED: Could not create VLAN $inVLanName, $errMsgText&quot;
        }

        if {[catch {
        config vlan $inVLanName tag $inVLanTag
        } errMsgText]} {
        delete vlan $inVLanName
       error &quot;FAILED: Invalid Tag $inVLanTag for VLAN $inVLanName, $errMsgText&quot;
        }

        ## if {[catch {
        ## config vlan $inVLanName qosprofile qp$inVLanQPNum
        ## } errMsgText]} {
        ## delete vlan $inVLanName
    ##   error &quot;FAILED: Invalid QoS-Profile for VLAN $inVLanName, $errMsgText&quot;
        ## }


        }

        ##########################################################################
        # Procedure to Create all 802.1q VLANs and add to Protect-Port List
        ##########################################################################
        proc createAllVLans {inVLanNameList
        inVLanTagList
        inVLanQPList} {
        global abort_on_error

        set finishedVLanNameList [list]

        foreach currVLanName $inVLanNameList \
        currVLanTag $inVLanTagList \
        currVLanQPNum $inVLanQPList {

        if {[catch {
        createOneVLan $currVLanName \
        $currVLanTag \
        $currVLanQPNum
        } errMsgText]} {
        cleanUpVLanList $finishedVLanNameList
        error &quot;FAILED: Could not create vlan $currVLanName, $errMsgText&quot;
        }

        lappend finishedVLanNameList $currVLanName
        }
        }

        ####################################################################
        # Procedure to protect one 802.1q VLAN by one EAPS Domain
        ####################################################################
        proc protectOneVLanByOneDomain {inVLanName
        inDomainName} {
        global abort_on_error

        if {[catch {
        config eaps $inDomainName add protect $inVLanName
        } errMsgText]} {
      error &quot;FAILED: EAPS-Domain $inDomainName cannot protect VLAN $inVLanName, $errMsgText&quot;
        }
        }

        ####################################################################
        # Procedure to Protect one 802.1q VLAN by all EAPS Domain(s)
        ####################################################################
        proc protectOneVLanByAllDomains {inVLanName
        inDomainNameSeq} {

        global abort_on_error

        set tmpDomainNameList [split $inDomainNameSeq ,]

        foreach currDomainName $tmpDomainNameList {

        protectOneVLanByOneDomain $inVLanName $currDomainName
        }
        }

        ####################################################################
        # Procedure to Protect all 802.1q VLANs by all EAPS Domain(s)
        ####################################################################
        proc protectAllVLansByAllDomains {inVLanNameList
        inDomainNameSeq
        inRingPortSeq} {
        global abort_on_error
        global permitRingPortsAsUni

        foreach currVLanName $inVLanNameList {

        if {[catch {
        protectOneVLanByAllDomains $currVLanName $inDomainNameSeq
        } errMsgText]} {
        cleanUpVLanList $inVLanNameList
        error &quot;FAILED: VLAN Protection, $errMsgText&quot;
        }
        if {[catch {
        config vlan $currVLanName add ports $inRingPortSeq tagged
        regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
        IF ([info exists addWarningMsg]) THEN
        CLI $permitRingPortsAsUni
        ENDIF
        } errMsgText]} {
        delete vlan $currVLanName
        error &quot;FAILED: Could not add Ports $inRingPortSeq to VLAN $currVLanName, $errMsgText&quot;
        }
        }
        }

        ##################################################################
        # TCL Procedure for VLAN creation and protection by EAPS Domain
        # after validating all parameters
        ##################################################################
        proc handleProtectedVLanCreate {inVLanNameTagQPSeq
        inDomainNameSeq
        inRingPortSeq} {
        global abort_on_error
        global isExos

        if {[string match $isExos true]} {
        create log entry &quot;Starting VLAN protection via EAPS on Switch&quot;
        }

        validateVLanProtectParams $inVLanNameTagQPSeq \
        $inDomainNameSeq \
        $inRingPortSeq

        set outVLanNameList [list]
        set outVLanTagList [list]
        set outVLanQPList [list]

        validateVLanNameTagQPTupleSeq $inVLanNameTagQPSeq \
        outVLanNameList \
        outVLanTagList \
        outVLanQPList

        createAllVLans $outVLanNameList \
        $outVLanTagList \
        $outVLanQPList

        protectAllVLansByAllDomains $outVLanNameList \
        $inDomainNameSeq \
        $inRingPortSeq

        if {[string match $isExos true]} {
        create log entry &quot;Finished VLAN protection via EAPS on Switch&quot;
        }
        }

        ############################################################################
        # CLI Configuration Starting
        ############################################################################
        setCliErrorHandling $abortOnCliError

        handleProtectedVLanCreate $eapsProtVLanNameTagQPSeq \
        $eapsProtDomainNameSeq \
        $eapsProtRingPortSeq
</content>
    <contexts></contexts>
    <supprotedGroups></supprotedGroups>
    <roles>,Administrator,</roles>
    <auditLogEnabled>false</auditLogEnabled>
    <scriptTimeout>120</scriptTimeout>
    <defaultCategory>Provisioning</defaultCategory>
    <rollbackScript>Rollback_CRE_EAPSProtected_VLAN</rollbackScript>
    <postprocessScript>Sync_CRE_EAPSProtected_VLAN</postprocessScript>
    <creator>system</creator>
    <scriptOwner>system</scriptOwner>

</script>
