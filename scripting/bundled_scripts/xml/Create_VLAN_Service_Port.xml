<!-- This file is generated by system. Do not edit this file. -->
<script name="Create_VLAN_Service_Port">
<comments>This script creates a 802.1Q VLAN Service at a List of UNI Port(s)</comments>
<content>#@MetaDataStart
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Create a 802.1Q VLAN Service for Customer
#############################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:  This script enables a 802.1Q VLAN based Service at a List of
#           UNI Port(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;scripting.Script to add a List of UNI Port(s) to an existing VLAN&quot;
# @SectionStart (description = &quot;VLAN Service Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;Switch-Platform&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes,
#   validValues = [MODEL_BD88KSSSF,MODEL_BD10K,MODEL_BD12K,MODEL_BD12804R,MODEL_BD20800])
set var ethServPlatformModel &quot;&quot;

# @VariableFieldLabel (description = &quot;VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var ethServVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1Q VLAN Tag&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var ethServVLanCTag &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var ethServUniPortTagStsSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+BWP_Name&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServUniPortBWPNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServOneRateBWParamsTupleSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum&quot;,
#   type        = String,
#   scope       = device,
#   required    = no)
set var ethServTwoRateBWParamsTupleSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd
################################################################################

proc validateBWProfOneRateCREParams {inMeterName
                                     inCIRValue
                                     inCIRUnit
                                     inCBSValue
                                     inCBSUnit} {
    global abort_on_error

    IF (![expr [string length $inMeterName] &gt; 0]) THEN
       error &quot;FAILED: Meter Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inCIRValue] &gt; 0]) THEN
       error &quot;FAILED: CIR value is empty.&quot;
    ENDIF

    IF (![expr [string length $inCIRUnit] &gt; 0]) THEN
       error &quot;FAILED: CIR unit is empty.&quot;
    ENDIF

    IF (![expr [string length $inCBSValue] &gt; 0]) THEN
       error &quot;FAILED: CBS value is empty.&quot;
    ENDIF

    IF (![expr [string length $inCBSUnit] &gt; 0]) THEN
       error &quot;FAILED: CBS unit is empty.&quot;
    ENDIF
}

############################################################################
# TCL Procedure To Validate Bandwidth-Profile Two-Rate Create Parameters
############################################################################
proc validateBWProfTwoRateCREParams {inMeterName
                                     inCIRValue
                                     inCIRUnit
                                     inCBSValue
                                     inCBSUnit
                                     inEIRValue
                                     inEIRUnit
                                     inEBSValue
                                     inEBSUnit} {
    global abort_on_error

    validateBWProfOneRateCREParams $inMeterName \
                                   $inCIRValue \
                                   $inCIRUnit \
                                   $inCBSValue \
                                   $inCBSUnit

    IF (![expr [string length $inEIRValue] &gt; 0]) THEN
       error &quot;FAILED: EIR value is empty.&quot;
    ENDIF

    IF (![expr [string length $inEIRUnit] &gt; 0]) THEN
       error &quot;FAILED: EIR unit is empty.&quot;
    ENDIF

    IF (![expr [string length $inEBSValue] &gt; 0]) THEN
       error &quot;FAILED: EBS value is empty.&quot;
    ENDIF

    IF (![expr [string length $inEBSUnit] &gt; 0]) THEN
       error &quot;FAILED: EBS unit is empty.&quot;
    ENDIF
}

###########################################################################
# Procedure to validate Bandwidth Lower-Limit Units
###########################################################################
proc validateBWLowerLimitUnits {inCIRUnit
                                inCBSUnit
                                outSwCIRUnit
                                outSwCBSUnit} {
    global abort_on_error
    upvar  $outSwCIRUnit tmpSwCIRUnit
    upvar  $outSwCBSUnit tmpSwCBSUnit

    switch $inCIRUnit {
       "CIRU_KBPS" {set tmpSwCIRUnit "Kbps"}
       "CIRU_MBPS" {set tmpSwCIRUnit "Mbps"}
       "CIRU_GBPS" {set tmpSwCIRUnit "Gbps"}
       default {
        error &quot;FAILED: Invalid CIR Unit_Type=>$inCIRUnit&quot;
       }
    }
    switch $inCBSUnit {
       "CBSU_KB" {set tmpSwCBSUnit "Kb"}
       "CBSU_MB" {set tmpSwCBSUnit "Mb"}
       "CBSU_GB" {set tmpSwCBSUnit "Gb"}
       default {
        error &quot;FAILED: Invalid CBS Unit_Type=>$inCBSUnit&quot;
       }
    }
}

###########################################################################
# Procedure to validate Bandwidth Upper-Limit Units
###########################################################################
proc validateBWUpperLimitUnits {inEIRUnit
                                inEBSUnit
                                outSwEIRUnit
                                outSwEBSUnit} {
    global abort_on_error
    upvar  $outSwEIRUnit tmpSwEIRUnit
    upvar  $outSwEBSUnit tmpSwEBSUnit

    switch $inEIRUnit {
       "EIRU_KBPS" {set tmpSwEIRUnit "Kbps"}
       "EIRU_MBPS" {set tmpSwEIRUnit "Mbps"}
       "EIRU_GBPS" {set tmpSwEIRUnit "Gbps"}
       default {
        error &quot;FAILED: Invalid EIR Unit_Type=>$inEIRUnit&quot;
       }
    }
    switch $inEBSUnit {
       "EBSU_KB" {set tmpSwEBSUnit "Kb"}
       "EBSU_MB" {set tmpSwEBSUnit "Mb"}
       "EBSU_GB" {set tmpSwEBSUnit "Gb"}
       default {
        error &quot;FAILED: Invalid EBS Unit_Type=>$inEBSUnit&quot;
       }
    }
}

######################################################################
# Procedure to Validate Out-Of-Profile Action types for Platforms
# BD8800, SummitStack and Summit-Family
######################################################################
proc validateOneRateOOPAction {inOOPAction
                               outSwOOPAction} {
    global abort_on_error
    upvar  $outSwOOPAction tmpSwOOPAction

    switch $inOOPAction {
       "OOPACT_DROP"    {set tmpSwOOPAction "drop"}
       "OOPACT_SETPRCD" {set tmpSwOOPAction "set-drop-precedence"}
       default {
        error &quot;FAILED: Invalid Out-Of-Profile Action=>$inOOPAction&quot;
       }
    }
}

######################################################################
# Procedure to Validate Scheduling types
######################################################################
proc validateLQoSSchedType {inSchedType
                            outSwSchedType} {
    global abort_on_error
    upvar  $outSwSchedType tmpSwSchedType

    switch $inSchedType {
       "SCHEDT_SPR" {set tmpSwSchedType "strict-priority"}
       "SCHEDT_WRR" {set tmpSwSchedType "wrr"}
       default {
        error &quot;FAILED: Invalid Scheduling_Type=>$inSchedType&quot;
       }
    }
}

###########################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI_Port+BWP_Name'
###########################################################################
proc validateUniPortBWPTuple {inUniPortBWPName
                              outUniPortNum
                              outBWPName} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outBWPName    tmpBWPName

     set tmpUniBWPList [split $inUniPortBWPName '+']

     if {[llength $tmpUniBWPList] != 2} {
         error &quot;Invalid UNI-Port, BWP-Name Tuple.&quot;
     }
     set tmpUniPortNum [lindex $tmpUniBWPList 0]
     set tmpBWPName    [lindex $tmpUniBWPList 1]
}

###########################################################################
# Procedure to Validate a single 10-Tuple of the form
# Tuple => 'BWP_Name:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+OOP_ACT+SCH_T+ACLName+QPNum'
###########################################################################
proc validateOneRateBWParamsTuple {inBWPNameParamsTuple
                                   outBWPName
                                   outCOSMode
                                   outMeterName
                                   outCIRValue
                                   outCIRUnit
                                   outCBSValue
                                   outCBSUnit
                                   outOOPAction
                                   outSchedType
                                   outACLName
                                   outQPNum} {
     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outCIRValue   tmpCIRValue
     upvar $outCIRUnit    tmpCIRUnit
     upvar $outCBSValue   tmpCBSValue
     upvar $outCBSUnit    tmpCBSUnit
     upvar $outOOPAction  tmpOOPAction
     upvar $outSchedType  tmpSchedType
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 10} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpCIRValue   [lindex $tmpBWPAttrList 2]
     set tmpCIRUnit    [lindex $tmpBWPAttrList 3]
     set tmpCBSValue   [lindex $tmpBWPAttrList 4]
     set tmpCBSUnit    [lindex $tmpBWPAttrList 5]
     set tmpOOPAction  [lindex $tmpBWPAttrList 6]
     set tmpSchedType  [lindex $tmpBWPAttrList 7]
     set tmpACLName    [lindex $tmpBWPAttrList 8]
     set tmpQPNum      [lindex $tmpBWPAttrList 9]

     set cnvSwCIRUnit   ""
     set cnvSwCBSUnit   ""
     set cnvSwOOPAction ""

     validateBWProfOneRateCREParams $tmpMeterName \
                                    $tmpCIRValue \
                                    $tmpCIRUnit \
                                    $tmpCBSValue \
                                    $tmpCBSUnit

     validateBWLowerLimitUnits $tmpCIRUnit $tmpCBSUnit cnvSwCIRUnit cnvSwCBSUnit

     validateOneRateOOPAction $tmpOOPAction cnvSwOOPAction

     validateLQoSSchedType $tmpSchedType cnvSwSchedType

     set tmpCIRUnit   $cnvSwCIRUnit
     set tmpCBSUnit   $cnvSwCBSUnit
     set tmpOOPAction $cnvSwOOPAction
     set tmpSchedType $cnvSwSchedType
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum'
###########################################################################
proc validateTwoRateBWParamsTuple {inBWPNameParamsTuple
                                   outBWPName
                                   outCOSMode
                                   outMeterName
                                   outCIRValue
                                   outCIRUnit
                                   outCBSValue
                                   outCBSUnit
                                   outEIRValue
                                   outEIRUnit
                                   outEBSValue
                                   outEBSUnit
                                   outSchedType
                                   outACLName
                                   outQPNum} {
     global abort_on_error

     upvar $outBWPName    tmpBWPName
     upvar $outCOSMode    tmpCOSMode
     upvar $outMeterName  tmpMeterName
     upvar $outCIRValue   tmpCIRValue
     upvar $outCIRUnit    tmpCIRUnit
     upvar $outCBSValue   tmpCBSValue
     upvar $outCBSUnit    tmpCBSUnit
     upvar $outEIRValue   tmpEIRValue
     upvar $outEIRUnit    tmpEIRUnit
     upvar $outEBSValue   tmpEBSValue
     upvar $outEBSUnit    tmpEBSUnit
     upvar $outSchedType  tmpSchedType
     upvar $outACLName    tmpACLName
     upvar $outQPNum      tmpQPNum

     set tmpBWPNameParamsList [split $inBWPNameParamsTuple ':']

     if {[llength $tmpBWPNameParamsList] != 2} {
         error &quot;Invalid BWP-Name, BWP-Params Tuple.&quot;
     }
     set tmpBWPName    [lindex $tmpBWPNameParamsList 0]
     set tmpBWPAttrPSV [lindex $tmpBWPNameParamsList 1]

     set tmpBWPAttrList [split $tmpBWPAttrPSV '+']

     if {[llength $tmpBWPAttrList] != 13} {
         error &quot;Invalid BWP-Attrs Tuple.&quot;
     }

     set tmpCOSMode    [lindex $tmpBWPAttrList 0]
     set tmpMeterName  [lindex $tmpBWPAttrList 1]
     set tmpCIRValue   [lindex $tmpBWPAttrList 2]
     set tmpCIRUnit    [lindex $tmpBWPAttrList 3]
     set tmpCBSValue   [lindex $tmpBWPAttrList 4]
     set tmpCBSUnit    [lindex $tmpBWPAttrList 5]
     set tmpEIRValue   [lindex $tmpBWPAttrList 6]
     set tmpEIRUnit    [lindex $tmpBWPAttrList 7]
     set tmpEBSValue   [lindex $tmpBWPAttrList 8]
     set tmpEBSUnit    [lindex $tmpBWPAttrList 9]
     set tmpSchedType  [lindex $tmpBWPAttrList 10]
     set tmpACLName    [lindex $tmpBWPAttrList 11]
     set tmpQPNum      [lindex $tmpBWPAttrList 12]

     set cnvSwCIRUnit   ""
     set cnvSwCBSUnit   ""
     set cnvSwEIRUnit   ""
     set cnvSwEBSUnit   ""
     set cnvSwSchedType ""

     validateBWProfTwoRateCREParams $tmpMeterName \
                                    $tmpCIRValue \
                                    $tmpCIRUnit \
                                    $tmpCBSValue \
                                    $tmpCBSUnit \
                                    $tmpEIRValue \
                                    $tmpEIRUnit \
                                    $tmpEBSValue \
                                    $tmpEBSUnit

     validateBWLowerLimitUnits $tmpCIRUnit $tmpCBSUnit cnvSwCIRUnit cnvSwCBSUnit

     validateBWUpperLimitUnits $tmpEIRUnit $tmpEBSUnit cnvSwEIRUnit cnvSwEBSUnit

     validateLQoSSchedType $tmpSchedType cnvSwSchedType

     set tmpCIRUnit   $cnvSwCIRUnit
     set tmpCBSUnit   $cnvSwCBSUnit
     set tmpEIRUnit   $cnvSwEIRUnit
     set tmpEBSUnit   $cnvSwEBSUnit
     set tmpSchedType $cnvSwSchedType
}

#############################################################################
# Procedure to Validate Comma Listed 2-Tuples of the form 'UNI_Port+BWP_Name'
#############################################################################
proc validateUniPortToBWPNameTupleSeq {inUniPortToBWPNameSeq
                                       outUniPortList
                                       outBWPNameList} {
     global abort_on_error

     if {![string length $inUniPortToBWPNameSeq]} {
        return
     }

     set tmpUniPortBWPNameList [split $inUniPortToBWPNameSeq ,]

     if {![llength $tmpUniPortBWPNameList]} {
        error &quot;UNI-Port, BWP-Name Tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList tmpUniPortList
     upvar $outBWPNameList tmpBWPNameList

     foreach currTuple $tmpUniPortBWPNameList {

        set outUniPortNum ""
        set outBWPName    ""

        validateUniPortBWPTuple $currTuple \
                                outUniPortNum \
                                outBWPName

        lappend tmpUniPortList $outUniPortNum
        lappend tmpBWPNameList $outBWPName
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Name:CIR_V+CIR_U+CBS_V+CBS_U+SCH_T'
###########################################################################
proc validateOneRateBWParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outCIRValue   ""
        set outCIRUnit    ""
        set outCBSValue   ""
        set outCBSUnit    ""
        set outOOPAction  ""
        set outSchedType  ""
        set outACLName    ""
        set outQPNum      ""

        validateOneRateBWParamsTuple $currTuple \
                                     outBWPName \
                                     outCOSMode \
                                     outMeterName \
                                     outCIRValue \
                                     outCIRUnit \
                                     outCBSValue \
                                     outCBSUnit \
                                     outOOPAction \
                                     outSchedType \
                                     outACLName \
                                     outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.CIRValue)   $outCIRValue
        set tmpBWPNameToParamsMap($outBWPName.CIRUnit)    $outCIRUnit
        set tmpBWPNameToParamsMap($outBWPName.CBSValue)   $outCBSValue
        set tmpBWPNameToParamsMap($outBWPName.CBSUnit)    $outCBSUnit
        set tmpBWPNameToParamsMap($outBWPName.OOPAction)  $outOOPAction
        set tmpBWPNameToParamsMap($outBWPName.SchedType)  $outSchedType
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

###########################################################################
# Procedure to Validate Comma Listed N-Tuple(s) of the form
# Tuple => 'BWP_Nam:COS_Mode+Meter_Name+CIR_V+CIR_U+CBS_V+CBS_U+EIR_V+EIR_U+EBS_V+EBS_U+SCH_T+ACLName+QPNum'
###########################################################################
proc validateTwoRateBWParamsTupleSeq {inBWPNameToParamsSeq
                                      outBWPNameToParamsMap} {
     global abort_on_error

     if {![string length $inBWPNameToParamsSeq]} {
        return
     }

     set tmpBWPNameParamsList [split $inBWPNameToParamsSeq ,]

     if {![llength $tmpBWPNameParamsList]} {
        error &quot;BWP-Name, BWP-Params Tuple List cannot be empty.&quot;
     }

     upvar $outBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currTuple $tmpBWPNameParamsList {

        set outBWPName    ""
        set outCOSMode    ""
        set outMeterName  ""
        set outCIRValue   ""
        set outCIRUnit    ""
        set outCBSValue   ""
        set outCBSUnit    ""
        set outEIRValue   ""
        set outEIRUnit    ""
        set outEBSValue   ""
        set outEBSUnit    ""
        set outSchedType  ""
        set outACLName    ""
        set outQPNum      ""

        validateTwoRateBWParamsTuple $currTuple \
                                     outBWPName \
                                     outCOSMode \
                                     outMeterName \
                                     outCIRValue \
                                     outCIRUnit \
                                     outCBSValue \
                                     outCBSUnit \
                                     outEIRValue \
                                     outEIRUnit \
                                     outEBSValue \
                                     outEBSUnit \
                                     outSchedType \
                                     outACLName \
                                     outQPNum

        set tmpBWPNameToParamsMap($outBWPName.COSMode)    $outCOSMode
        set tmpBWPNameToParamsMap($outBWPName.MeterName)  $outMeterName
        set tmpBWPNameToParamsMap($outBWPName.CIRValue)   $outCIRValue
        set tmpBWPNameToParamsMap($outBWPName.CIRUnit)    $outCIRUnit
        set tmpBWPNameToParamsMap($outBWPName.CBSValue)   $outCBSValue
        set tmpBWPNameToParamsMap($outBWPName.CBSUnit)    $outCBSUnit
        set tmpBWPNameToParamsMap($outBWPName.EIRValue)   $outEIRValue
        set tmpBWPNameToParamsMap($outBWPName.EIRUnit)    $outEIRUnit
        set tmpBWPNameToParamsMap($outBWPName.EBSValue)   $outEBSValue
        set tmpBWPNameToParamsMap($outBWPName.EBSUnit)    $outEBSUnit
        set tmpBWPNameToParamsMap($outBWPName.SchedType)  $outSchedType
        set tmpBWPNameToParamsMap($outBWPName.ACLName)    $outACLName
        set tmpBWPNameToParamsMap($outBWPName.QPNum)      $outQPNum
     }
}

######################################################################
# Procedure to Create the Meter on the Switch
######################################################################
proc createMeter {inMeterName} {

    global abort_on_error

    if {[catch {
       create meter $inMeterName
    } errMsgText]} {
       error &quot;FAILED: Could not create Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD8800/SummitStack/SummitFamily
###########################################################################
proc setMeterParamsOnBD88KSSSF {inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inOOPAction} {
    global abort_on_error

    set CIR_Args    "committed-rate $inCIRValue $inCIRUnit"
    set CBS_Args    "max-burst-size $inCBSValue $inCBSUnit"
    set OUT_Actions "out-actions $inOOPAction"

    if {[catch {
       config meter $inMeterName $CIR_Args $CBS_Args $OUT_Actions
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD20K for Dual rate
###########################################################################
proc setDualRateMeterParamsOnBD20800 {inMeterName
                              inCIRValue
                              inCIRUnit
                              inCBSValue
                              inCBSUnit
                              inEIRValue
                              inEIRUnit
                              inEBSValue
                              inEBSUnit} {
    global abort_on_error

    if {[catch {
       set tmpCIRArg "committed-rate        $inCIRValue $inCIRUnit"
       set tmpCBSArg "committed-burst-size  $inCBSValue $inCBSUnit"
       set tmpEIRArg "peak-rate $inEIRValue $inEIRUnit"
       set tmpEBSArg "peak-burst-size $inEBSValue $inEBSUnit"

       config meter $inMeterName $tmpCIRArg $tmpCBSArg $tmpEIRArg $tmpEBSArg
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

###########################################################################
# Procedure to attach Bandwidth Params on BD20K for Single rate
###########################################################################
proc setSingleRateMeterParamsOnBD20800 {inMeterName
                              inCIRValue
                              inCIRUnit
                              inCBSValue
                              inCBSUnit} {
    global abort_on_error

    if {[catch {
       set tmpCIRArg "committed-rate        $inCIRValue $inCIRUnit"
       set tmpCBSArg "committed-burst-size  $inCBSValue $inCBSUnit"

       config meter $inMeterName $tmpCIRArg $tmpCBSArg
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Can't set BW rates to Meter $inMeterName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Create ACL Policy to classify and meter ingress traffic
##########################################################################
proc createMeteringTraffClsfrACL {inVLanId
                                  inCOSMode
                                  inACLName
                                  inMeterName
                                  inQPNum} {
    global abort_on_error

    if {![string compare $inCOSMode "VLAN"]} {
       set aclMatchCond  "\"vlan-id $inVLanId\""
       set aclRuleAction "\"permit;meter $inMeterName;qosprofile qp$inQPNum\""
    } else {
       set aclMatchCond  "\" \""
       set aclRuleAction "\"permit;meter $inMeterName;qosprofile qp$inQPNum\""
    }

    if {[catch {
       create access-list $inACLName $aclMatchCond $aclRuleAction
    } errMsgText]} {
       delete meter $inMeterName
       error &quot;FAILED: Could not create ACL $inACLName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to Cleanup BW-Profile Objects (Meter,ACL)
##########################################################################
proc cleanOneBWPObj {inMeterName
                     inACLName} {

    delete access-list $inACLName
    delete meter $inMeterName
}

############################################################################
# Bandwidth Profile Creation on BD8800, SummitStack and Summit-Familiy
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
proc createOneBWPObjsOnBD88KSSSF {inVLanId
                                  inCOSMode
                                  inMeterName
                                  inCIRValue
                                  inCIRUnit
                                  inCBSValue
                                  inCBSUnit
                                  inOOPAction
                                  inACLName
                                  inQPNum} {
    global abort_on_error

    createMeter $inMeterName

    setMeterParamsOnBD88KSSSF $inMeterName \
                              $inCIRValue \
                              $inCIRUnit \
                              $inCBSValue \
                              $inCBSUnit \
                              $inOOPAction

    createMeteringTraffClsfrACL $inVLanId \
                                $inCOSMode \
                                $inACLName \
                                $inMeterName \
                                $inQPNum
}

############################################################################
# Bandwidth Profile Creation on BD20800 for Dual rate
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
############################################################################
proc createOneDualRateBWPObjsOnBD20800 {inVLanId
                                inCOSMode
                                inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inEIRValue
                                inEIRUnit
                                inEBSValue
                                inEBSUnit
                                inACLName
                                inQPNum} {
    global abort_on_error

    createMeter $inMeterName

    setDualRateMeterParamsOnBD20800 $inMeterName \
                            $inCIRValue \
                            $inCIRUnit \
                            $inCBSValue \
                            $inCBSUnit \
                            $inEIRValue \
                            $inEIRUnit \
                            $inEBSValue \
                            $inEBSUnit

    createMeteringTraffClsfrACL $inVLanId \
                                $inCOSMode \
                                $inACLName \
                                $inMeterName \
                                $inQPNum
}

############################################################################
# Bandwidth Profile Creation on BD20800 for single rate
############################################################################
# 1) Create Meter
# 2) Configure Meter with B/W Parameters (CIR, CBS etc.)
############################################################################
############################################################################
proc createOneSingleRateBWPObjsOnBD20800 {inVLanId
                                inCOSMode
                                inMeterName
                                inCIRValue
                                inCIRUnit
                                inCBSValue
                                inCBSUnit
                                inACLName
                                inQPNum} {
    global abort_on_error

    createMeter $inMeterName

    setSingleRateMeterParamsOnBD20800 $inMeterName \
                            $inCIRValue \
                            $inCIRUnit \
                            $inCBSValue \
                            $inCBSUnit

    createMeteringTraffClsfrACL $inVLanId \
                                $inCOSMode \
                                $inACLName \
                                $inMeterName \
                                $inQPNum
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from one UNI Port
##########################################################################
proc cleanOneUniBWPAttachment {inUniPortNum
                               inACLName} {

    global abort_on_error
	configure access-list delete $inACLName ports $inUniPortNum ingress
}

############################################################################
# Bandwidth Profile attachment on BD8800, SummitStack and Summit-Familiy
############################################################################
# 1) Configure ACL on a UNI-Port
############################################################################
proc attachOneUniBWPOnBD88KSSSF {inVLanId
                                 inUniPortNum
                                 inACLName
                                 inQPNum} {
    global abort_on_error

    if {[catch {
       configure access-list add $inACLName first ports $inUniPortNum ingress				 
    } errMsgText]} { 	
      set regexprefix {.*Error: ACL install operation failed - qosprofile QP}
      set regexsuffix { not yet created.*}
      set refexfinal $regexprefix$inQPNum$regexsuffix
 
      regexp $refexfinal $errMsgText addWarningMsg 
       IF ([info exists addWarningMsg]) THEN								   
           create qosprofile QP$inQPNum
           configure access-list add $inACLName first ports $inUniPortNum ingress
       ELSE
         error "FAILED: Could not Add $inUniPortNum to $inACLName, $errMsgText"
       ENDIF
    }
}

############################################################################
# Bandwidth Profile attachment on BD20800
############################################################################
# 1) Configure ACL on a UNI-Port
############################################################################
proc attachOneUniBWPOnBD20800 {inVLanId
                               inUniPortNum
                               inACLName} {
    global abort_on_error

    if {[catch {
       configure access-list add $inACLName first ports $inUniPortNum ingress
    } errMsgText]} {
       error &quot;FAILED: Could not Add $inUniPortNum to $inACLName, $errMsgText&quot;
    }
}

############################################################################
# Cleanup QoS Objects (Meter, ACL etc.) for a List of BW-Profile(s)
############################################################################
proc cleanAllBWPObjs {inBWPNameList
                      inBWPNameToParamsMap} {

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     foreach currBWPName $inBWPNameList {

        cleanOneBWPObj $tmpBWPNameToParamsMap($currBWPName.MeterName) \
                       $tmpBWPNameToParamsMap($currBWPName.ACLName)
     }
}

############################################################################
# All Bandwidth Profile Creation on BD8800, SummitStack and Summit-Familiy
############################################################################
proc createAllBWPObjsOnBD88KSSSF {inVLanId
                                  inBWPNameList
                                  inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedBWPNameList [list]

     foreach currBWPName $inBWPNameList {

        if {[catch {
           createOneBWPObjsOnBD88KSSSF \
              $inVLanId \
              $tmpBWPNameToParamsMap($currBWPName.COSMode) \
              $tmpBWPNameToParamsMap($currBWPName.MeterName) \
              $tmpBWPNameToParamsMap($currBWPName.CIRValue) \
              $tmpBWPNameToParamsMap($currBWPName.CIRUnit) \
              $tmpBWPNameToParamsMap($currBWPName.CBSValue) \
              $tmpBWPNameToParamsMap($currBWPName.CBSUnit) \
              $tmpBWPNameToParamsMap($currBWPName.OOPAction) \
              $tmpBWPNameToParamsMap($currBWPName.ACLName) \
              $tmpBWPNameToParamsMap($currBWPName.QPNum)
        } errMsgText]} {

           cleanAllBWPObjs $finishedBWPNameList tmpBWPNameToParamsMap

           error &quot;FAILED: Could not create BW-Profile($currBWPName), $errMsgText&quot;
        }

        lappend finishedBWPNameList $currBWPName
     }
}

############################################################################
# All Bandwidth Profile Creation on BD20800
############################################################################
proc createAllBWPObjsOnBD20800 {inVLanId
                                inBWPNameList
                                inRateLimitType
                                inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedBWPNameList [list]

     foreach currBWPName $inBWPNameList {

        if {[catch {
        	if {![string equal $inRateLimitType "DUAL_RATE"]} {
           		createOneSingleRateBWPObjsOnBD20800 \
              		$inVLanId \
              		$tmpBWPNameToParamsMap($currBWPName.COSMode) \
              		$tmpBWPNameToParamsMap($currBWPName.MeterName) \
              		$tmpBWPNameToParamsMap($currBWPName.CIRValue) \
              		$tmpBWPNameToParamsMap($currBWPName.CIRUnit) \
              		$tmpBWPNameToParamsMap($currBWPName.CBSValue) \
              		$tmpBWPNameToParamsMap($currBWPName.CBSUnit) \
              		$tmpBWPNameToParamsMap($currBWPName.ACLName) \
              		$tmpBWPNameToParamsMap($currBWPName.QPNum)
        	} else {
        		createOneDualRateBWPObjsOnBD20800 \
              		$inVLanId \
              		$tmpBWPNameToParamsMap($currBWPName.COSMode) \
              		$tmpBWPNameToParamsMap($currBWPName.MeterName) \
              		$tmpBWPNameToParamsMap($currBWPName.CIRValue) \
              		$tmpBWPNameToParamsMap($currBWPName.CIRUnit) \
              		$tmpBWPNameToParamsMap($currBWPName.CBSValue) \
              		$tmpBWPNameToParamsMap($currBWPName.CBSUnit) \
              		$tmpBWPNameToParamsMap($currBWPName.EIRValue) \
              		$tmpBWPNameToParamsMap($currBWPName.EIRUnit) \
              		$tmpBWPNameToParamsMap($currBWPName.EBSValue) \
              		$tmpBWPNameToParamsMap($currBWPName.EBSUnit) \
              		$tmpBWPNameToParamsMap($currBWPName.ACLName) \
              		$tmpBWPNameToParamsMap($currBWPName.QPNum)
			}
        } errMsgText]} {

           cleanAllBWPObjs $finishedBWPNameList tmpBWPNameToParamsMap

           error &quot;FAILED: Could not create BW-Profile($currBWPName), $errMsgText&quot;
        }

        lappend finishedBWPNameList $currBWPName
     }
}

##########################################################################
# Procedure to Cleanup BW-Profile Attachment from all UNI Port(s)
##########################################################################
proc cleanAllUniBWPAttachment {inUniPortList
                               inACLNameList} {

     foreach currUniPort $inUniPortList \
             currACLName $inACLNameList {

        cleanOneUniBWPAttachment $currUniPort \
                                 $currACLName
     }
}

############################################################################
# All Bandwidth Profile attachment on BD8800, SummitStack and Summit-Familiy
############################################################################
proc attachAllUniBWPOnBD88KSSSF {inVLanId
                                 inUniPortList
                                 inBWPNameList
                                 inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedUniPortList [list]
     set finishedACLNameList [list]

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)
        set currQPNum $tmpBWPNameToParamsMap($currBWPName.QPNum)

        if {[catch {
           attachOneUniBWPOnBD88KSSSF $inVLanId \
                                      $currUniPort \
                                      $currACLName \
                                      $currQPNum
        } errMsgText]} {

           cleanAllUniBWPAttachment $finishedUniPortList \
                                    $finishedACLNameList

           error &quot;FAILED: Can't Attach BW-PROF($currBWPName) on UNI($currUniPort), $errMsgText&quot;
        }

        lappend finishedUniPortList $currUniPort
        lappend finishedACLNameList $currACLName
     }
}

############################################################################
# All Bandwidth Profile attachment on BD20800
############################################################################
proc attachAllUniBWPOnBD20800 {inVLanId
                               inUniPortList
                               inBWPNameList
                               inBWPNameToParamsMap} {
     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     set finishedUniPortList [list]
     set finishedACLNameList [list]

     foreach currUniPort $inUniPortList \
             currBWPName $inBWPNameList {

        set currACLName $tmpBWPNameToParamsMap($currBWPName.ACLName)

        if {[catch {
            attachOneUniBWPOnBD20800 $inVLanId \
                                     $currUniPort \
                                     $currACLName
        } errMsgText]} {

           cleanAllUniBWPAttachment $finishedUniPortList \
                                    $finishedACLNameList

           error &quot;FAILED: Can't Attach BW-PROF($currBWPName) on UNI($currUniPort), $errMsgText&quot;
        }

        lappend finishedUniPortList $currUniPort
        lappend finishedACLNameList $currACLName
     }
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD88KSSSF
############################################################################
proc assignAllUniBWPOnBD88KSSSF {inVLanId
                                 inUniPortList
                                 inBWPNameList
                                 inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }

     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     createAllBWPObjsOnBD88KSSSF $inVLanId \
                                 $inBWPNameList \
                                 tmpBWPNameToParamsMap

     if {[catch {
        attachAllUniBWPOnBD88KSSSF $inVLanId \
                                   $inUniPortList \
                                   $inBWPNameList \
                                   tmpBWPNameToParamsMap
     } errMsgText]} {

       cleanAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap

       error &quot;FAILED: Can't Assign BW-Profiles on UNIs, $errMsgText&quot;
     }
}

############################################################################
# Bandwidth Profile assignment to Service End-Points on BD20800
############################################################################
proc assignAllUniBWPOnBD20800 {inVLanId
                               inUniPortList
                               inBWPNameList
                               inRateLimitType
                               inBWPNameToParamsMap} {

     if {![llength $inBWPNameList]} {
         return
     }

     global abort_on_error

     upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

     createAllBWPObjsOnBD20800 $inVLanId \
                               $inBWPNameList \
                               $inRateLimitType \
                               tmpBWPNameToParamsMap
     if {[catch {
        attachAllUniBWPOnBD20800 $inVLanId \
                                 $inUniPortList \
                                 $inBWPNameList \
                                 tmpBWPNameToParamsMap
     } errMsgText]} {

       cleanAllBWPObjs $inBWPNameList tmpBWPNameToParamsMap

       error &quot;FAILED: Can't Assign BW-Profiles on UNIs, $errMsgText&quot;
     }
}

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# Define TCL Procedures for Service Parameter Validation
############################################################################
proc validateVLanServiceParams {inVLanName inVLanId} {

    global abort_on_error
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF

    IF (![expr [string length $inVLanName] &gt; 0]) THEN
       error &quot;VLAN Name can not be empty.&quot;
    ENDIF

    IF (![expr [string length $inVLanId] &gt; 0]) THEN
       error &quot;VLAN Tag can not be empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTuple {inUniPortTagStatus
                                    outUniPortNum
                                    outTagStatus} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagStatus  tmpTagStatus

     set tmpUniTagList [split $inUniPortTagStatus '+']

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI-Port Tagging-Status, Tuple=>$inUniPortTagStatus&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagStatus  [lindex $tmpUniTagList 1]
}

################################################################################
# Procedure to Validate List of Tuples of the form 'UNI-Port:Tag-Status'
################################################################################
proc validateUniPortTagStatusTupleSeq {inUniPortTagStatusSeq
                                       outUniPortList
                                       outTagStatusList} {
     global abort_on_error

     if {[string length $inUniPortTagStatusSeq] == 0} {
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     }

     set tmpUniPortTagStatusList [split $inUniPortTagStatusSeq ,]

     if {[llength $tmpUniPortTagStatusList] == 0} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList   tmpUniPortList
     upvar $outTagStatusList tmpTagStatusList

     foreach currTuple $tmpUniPortTagStatusList {

        set outUniPortNum ""
        set outTagStatus  ""

        validateUniPortTagStatusTuple $currTuple \
                                      outUniPortNum \
                                      outTagStatus

        lappend tmpUniPortList    $outUniPortNum
        lappend tmpTagStatusList  $outTagStatus
     }
}

###########################################################################
# Procedure to add the 802.1q VLAN to one UNI Port on the switch
##########################################################################
proc addDot1qVLanToOneUni {inVLanName
                           inUniPortNum
                           inTagStatus} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[string equal $inTagStatus "untagged"]} {
    	if {[catch {
	       configure vlan Default del port $inUniPortNum
	    } result]} {
	       error &quot;FAILED: Cannot delete Port $inUniPortNum from default VLAN, $result&quot;
	    }
    }

    if {[catch {
       configure vlan $inVLanName add port $inUniPortNum $inTagStatus

       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI    $permitRingPortsAsUni
       ENDIF
    } result]} {
       error &quot;FAILED: Cannot add UNI-Port $inUniPortNum to VLAN $inVLanName, $result&quot;
    }
}

###########################################################################
# Procedure to Add the VLAN to all the UNI Ports on the switch
###########################################################################
proc addDot1qVLanToAllUnis {inVLanName
                            inUniPortList
                            inTagStatusList} {
    global abort_on_error

	if {[catch {
	    foreach currUniPort   $inUniPortList \
	            currTagStatus $inTagStatusList {

	       addDot1qVLanToOneUni $inVLanName \
	                            $currUniPort \
	                            $currTagStatus
	    }
	} result]} {
		remDot1qVLanFromAllUnis $inVLanName \
                                $inUniPortList \
                                $inTagStatusList
		error "FAILED: Could not add port to vlan $inVLanName, $result"
	}
}

###########################################################################
# Procedure to Remove the VLAN from all the UNI Ports on the switch
###########################################################################
proc remDot1qVLanFromAllUnis {inVLanName
                              inUniPortList
                              inTagStatusList} {
    foreach currUniPort   $inUniPortList \
            currTagStatus $inTagStatusList {

       remDot1qVLanFromOneUni $inVLanName \
                              $currUniPort \
                              $currTagStatus
    }

}

##########################################################################
# Procedure to remove the 802.1q VLAN from one UNI Port on the switch
##########################################################################
proc remDot1qVLanFromOneUni {inVLanName
                             inUniPortNum
                             inTagStatus} {
    if {[catch {
       configure vlan $inVLanName delete port $inUniPortNum
    } result]} {
       error &quot;FAILED: Cannot delete Port $inUniPortNum from VLAN, $result&quot;
    }
}

############################################################################
# TCL Procedure for PB-Service Creation BD88K, SummitStack and Summit Family
############################################################################
proc runVLanServiceCreateOnBD88KSSSF {inVLanName
                                      inVLanId
                                      inUniPortList
                                      inTagStatusList
                                      inBWPNameList
                                      inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    addDot1qVLanToAllUnis $inVLanName \
                          $inUniPortList \
                          $inTagStatusList

    if {[catch {
    assignAllUniBWPOnBD88KSSSF $inVLanId \
                               $inUniPortList \
                               $inBWPNameList \
                               tmpBWPNameToParamsMap
	} result]} {
		remDot1qVLanFromAllUnis $inVLanName \
                                $inUniPortList \
                                $inTagStatusList
		error "FAILED: Could not create Bandwidth profile, $result"
	}
}

############################################################################
# TCL Procedure for PB-Service Creation on BD10K Platform
############################################################################
proc runVLanServiceCreateOnBD10K {inVLanName
                                  inUniPortList
                                  inTagStatusList} {

    addDot1qVLanToAllUnis $inVLanName \
                          $inUniPortList \
                          $inTagStatusList
}

############################################################################
# TCL Procedure for PB-Service Creation on BD12K Platform
############################################################################
proc runVLanServiceCreateOnBD12K {inVLanName
                                  inUniPortList
                                  inTagStatusList} {

    addDot1qVLanToAllUnis $inVLanName \
                          $inUniPortList \
                          $inTagStatusList
}

############################################################################
# TCL Procedure for PB-Service Creation on BD12804R Platform
############################################################################
proc runVLanServiceCreateOnBD12804R {inVLanName
                                     inUniPortList
                                     inTagStatusList} {

    addDot1qVLanToAllUnis $inVLanName \
                          $inUniPortList \
                          $inTagStatusList

######################################################
### HQoS based B/W-Profile Creation for Next Release
######################################################
##  assignAllUniBWPOnBD12804R $inVLanId \
##                            $inUniPortList \
##                            $inTagStatusList \
##                            $inBWPNameList \
##                            tmpBWPNameToParamsMap
######################################################
}

############################################################################
# TCL Procedure for PB-Service Creation on BD20800 Platform
############################################################################
proc runVLanServiceCreateOnBD20800 {inVLanName
                                    inVLanId
                                    inUniPortList
                                    inTagStatusList
                                    inBWPNameList
                                    inRateLimitType
                                    inBWPNameToParamsMap} {

    upvar $inBWPNameToParamsMap tmpBWPNameToParamsMap

    addDot1qVLanToAllUnis $inVLanName \
                          $inUniPortList \
                          $inTagStatusList

    if {[catch {
    assignAllUniBWPOnBD20800 $inVLanId \
                             $inUniPortList \
                             $inBWPNameList \
                             $inRateLimitType \
                             tmpBWPNameToParamsMap
	} result]} {
		remDot1qVLanFromAllUnis $inVLanName \
                                $inUniPortList \
                                $inTagStatusList
		error "FAILED: Could not add port to vlan $inVLanName, $result"
	}
}

############################################################################
# TCL Procedure for PB based Service Creation
############################################################################
proc handleVLanServiceCreate {inVLanName
                              inVLanId
                              inPlatformModel
                              inUniPortTagStsSeq
                              inUniPortToBWPNameSeq
                              inOneRateBWParamsTupleSeq
                              inTwoRateBWParamsTupleSeq} {
    global abort_on_error
	global isExos

	if {[string match $isExos true]} {
    	create log entry &quot;START-Create 802.1Q VLAN Service&quot;
   	}

	set outRateLimitType "SINGLE_RATE"
    set outServUniPortList [list]
    set outBWPUniPortList  [list]
    set outTagStatusList   [list]
    set outBWPNameList     [list]
    set outBWPNameToParamsMap(VLanName) $inVLanName

    validateVLanServiceParams $inVLanName $inVLanId

    validateUniPortTagStatusTupleSeq $inUniPortTagStsSeq \
                                     outServUniPortList \
                                     outTagStatusList

    validateUniPortToBWPNameTupleSeq $inUniPortToBWPNameSeq \
                                     outBWPUniPortList \
                                     outBWPNameList
    switch $inPlatformModel {
       MODEL_BD88KSSSF {
       validateOneRateBWParamsTupleSeq $inOneRateBWParamsTupleSeq \
                                       outBWPNameToParamsMap

       runVLanServiceCreateOnBD88KSSSF $inVLanName \
                                       $inVLanId \
                                       $outServUniPortList \
                                       $outTagStatusList \
                                       $outBWPNameList \
                                       outBWPNameToParamsMap
       }
       MODEL_BD10K {
       runVLanServiceCreateOnBD10K $inVLanName \
                                   $outServUniPortList \
                                   $outTagStatusList
       }
       MODEL_BD12K {
       runVLanServiceCreateOnBD12K $inVLanName \
                                   $outServUniPortList \
                                   $outTagStatusList
       }
       MODEL_BD12804R {
       runVLanServiceCreateOnBD12804R $inVLanName \
                                      $outServUniPortList \
                                      $outTagStatusList
       }
       MODEL_BD20800 {
       if (![expr [string length $inOneRateBWParamsTupleSeq] &gt; 0]) {
       		validateTwoRateBWParamsTupleSeq $inTwoRateBWParamsTupleSeq \
                           outBWPNameToParamsMap
			set outRateLimitType "DUAL_RATE"
       } else {
       		validateOneRateBWParamsTupleSeq $inOneRateBWParamsTupleSeq \
                           outBWPNameToParamsMap
	   }

       runVLanServiceCreateOnBD20800 $inVLanName \
                                     $inVLanId \
                                     $outServUniPortList \
                                     $outTagStatusList \
                                     $outBWPNameList \
                                     $outRateLimitType \
                                     outBWPNameToParamsMap
       }
       default {
        error &quot;FAILED: Invalid Switch Platform $inPlatformModel&quot;
       }
    }

	if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Create 802.1Q VLAN Service&quot;
   	}
}

############################################################################
# CLI Configuration Starting
############################################################################
setCliErrorHandling $abortOnCliError

handleVLanServiceCreate $ethServVLanName \
                        $ethServVLanCTag \
                        $ethServPlatformModel \
                        $ethServUniPortTagStsSeq \
                        $ethServUniPortBWPNameSeq \
                        $ethServOneRateBWParamsTupleSeq \
                        $ethServTwoRateBWParamsTupleSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_CRE_VLAN_Service_Port</rollbackScript>
<postprocessScript>Sync_CRE_VLAN_Service_Port</postprocessScript>
<scriptOwner>system</scriptOwner>

</script>
