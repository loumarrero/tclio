<!-- This file is generated by system. Do not edit this file. -->
<script name="Delete_MixedProtected_VLAN">
<comments>This scripts deletes a List of partially protected VLANs</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : VLAN deletion from partial EAPS domain's protection
#############################################################################
# Revision      : 1.0
# Last Updated  : 20-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1. Delete the list of VLAN from protection of a list of EAPS domains.
# 1. Delete the list of Ring Ports from each VLAN in the List.
# 2. Delete the list of VLAN(s).
#############################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;scripting.Script to delete partially protected VLANs&quot;
# @SectionStart (description = &quot;VLAN Deletion Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

################################################################################
# VLAN Definition
################################################################################

# @VariableFieldLabel (description = &quot;Choose VLAN Delete Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [DELETE_PROTECTED,DELETE_UNPROTECTED])
set var mixedProtDeleteType DELETE_PROTECTED

# @VariableFieldLabel (description = &quot;Comma separated VLAN Names&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var mixedProtVLanNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated EAPS Domain Names&quot;
#   type        = String,
#   scope       = global,
#   required    = yes)
set var mixedProtDomainNameSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma separated VLAN Ports&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var mixedProtVLanPortSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

############################################################################
# TCL Procedure for VLAN Parameter Validation
############################################################################
proc validateVLanParams {inVLanNameSeq} {
    global abort_on_error
    global vendor

    IF (![string equal $vendor &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF

    IF (![expr [string length $inVLanNameSeq] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name List is empty.&quot;
    ENDIF

}

############################################################################
# TCL Procedure for VLAN Protection Parameter Validation
############################################################################
proc validateProtectParams {inDomainNameSeq} {

    global abort_on_error

    IF (![expr [string length $inDomainNameSeq] &gt; 0]) THEN
       error &quot;FAILED: EAPS Domain Name List is empty.&quot;
    ENDIF
}

#########################################################################
# Define TCL procedures for VLAN removal from EAPS Domain Ring Ports
# and subsequent deletion of the VLAN
#########################################################################
proc remProtectOneVLanFromOneDomain {inVLanName
                                     inDomainName} {
    global abort_on_error

    if {[catch {
        config eaps $inDomainName delete protect $inVLanName
    } errMsgText]} {
        puts &quot;FAILED: Cannot delete protection of VLAN $inVLanName from EAPS-Domain $inDomainName, $errMsgText&quot;
    }
}

proc remProtectOneVLanFromAllDomain {inVLanName
                                     inDomainNameList} {
    global abort_on_error

    foreach currDomainName $inDomainNameList {
       remProtectOneVLanFromOneDomain $inVLanName \
                                      $currDomainName
    }
}

proc delPortsFromOneVLan {inVLanName
                          inVLanPortSeq} {
    global abort_on_error

    IF ([expr [string length $inVLanPortSeq] &gt; 0]) THEN
         if {[catch {
         config vlan $inVLanName delete ports $inVLanPortSeq
      } errMsgText]} {
         puts &quot;FAILED: Could not delete Ports $inVLanPortSeq from VLAN $inVLanName, $errMsgText&quot;
      }
    ENDIF

}

proc delOneVLan {inVLanName} {

    global abort_on_error

    if {[catch {
       delete vlan $inVLanName
    } errMsgText]} {
       regexp {.*Invalid input detected at '^' marker.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
           puts &quot;FAILED: Could not delete VLAN $inVLanName, $errMsgText&quot;
       ELSE
         error &quot;FAILED: Could not delete VLAN $inVLanName, $errMsgText&quot;
       ENDIF
    }
}

proc remProtectAllVLanFromAllDomain {inVLanNameList
                                     inDomainNameList} {
    global abort_on_error

    foreach currVLanName $inVLanNameList {
       remProtectOneVLanFromAllDomain $currVLanName \
                                      $inDomainNameList
    }
}

proc delPortsFromAllVLan {inVLanNameList
                          inVLanPortSeq} {
    global abort_on_error

    foreach currVLanName $inVLanNameList {
       delPortsFromOneVLan $currVLanName \
                           $inVLanPortSeq
    }
}

proc delAllVLan {inVLanNameList} {

    global abort_on_error

    foreach currVLanName $inVLanNameList {
       delOneVLan $currVLanName
    }
}

######################################################################
# TCL Procedure for EAPS Protected VLAN deletion
######################################################################
proc deleteProtectedVLan {inVLanNameSeq
                          inDomainNameSeq
                          inVLanPortSeq} {
    global abort_on_error

    validateVLanParams $inVLanNameSeq

    validateProtectParams $inDomainNameSeq

    set tmpVLanNameList   [split $inVLanNameSeq ,]
    set tmpDomainNameList [split $inDomainNameSeq ,]

    delPortsFromAllVLan $tmpVLanNameList \
                        $inVLanPortSeq

    remProtectAllVLanFromAllDomain $tmpVLanNameList \
                                   $tmpDomainNameList

    delAllVLan $tmpVLanNameList
}

######################################################################
# TCL Procedure for Un-Protected VLAN deletion
######################################################################
proc deleteUnProtectedVLan {inVLanNameSeq
                            inVLanPortSeq} {
    global abort_on_error

    validateVLanParams $inVLanNameSeq

    set tmpVLanNameList [split $inVLanNameSeq ,]

    delPortsFromAllVLan $tmpVLanNameList \
                        $inVLanPortSeq

    delAllVLan $tmpVLanNameList
}

######################################################################
# TCL Procedure for VLAN deletion after protection removal from
# EAPS Domain after validating all parameters
######################################################################
proc handledMixProtectedVLanDelete {inDeleteType
                                    inVLanNameSeq
                                    inDomainNameSeq
                                    inVLanPortSeq} {
    global abort_on_error
  global isExos

  if {[string match $isExos true]} {
      create log entry &quot;START-MIX-PROTECTED-VLAN-DELETE on Switch&quot;
  }

    switch $inDeleteType {
       DELETE_PROTECTED {
       deleteProtectedVLan $inVLanNameSeq \
                           $inDomainNameSeq \
                           $inVLanPortSeq
       }
       DELETE_UNPROTECTED {
       deleteUnProtectedVLan $inVLanNameSeq \
                             $inVLanPortSeq
       }
       default {
        error &quot;FAILED: Invalid VLAN Deletion Type&quot;
       }
    }

    if {[string match $isExos true]} {
      create log entry &quot;FINISH-MIX-PROTECTED-VLAN-DELETE on Switch&quot;
  }
}

##############################################################
# CLI Configuration Starting
##############################################################
setCliErrorHandling $abortOnCliError

handledMixProtectedVLanDelete $mixedProtDeleteType \
                              $mixedProtVLanNameSeq \
                              $mixedProtDomainNameSeq \
                              $mixedProtVLanPortSeq

#######################################################################
## Sync VLAN and Topology on this Device
########################################################################
PerformSync -device $deviceIP -scope VLAN
IF (!$match($mixedProtDeleteType,DELETE_PROTECTED) ) THEN
 PerformSync -device $deviceIP -scope EapsDomain -type protected -name $mixedProtDomainNameSeq
ENDIF
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<saveConfigOnExit>true</saveConfigOnExit>
<menuScope>TOOLS</menuScope>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
