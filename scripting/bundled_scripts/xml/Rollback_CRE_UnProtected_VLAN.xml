<!-- This file is generated by system. Do not edit this file. -->
<script name="Rollback_CRE_UnProtected_VLAN">
<comments>This script rollsback previously created unprotected VLAN from Ports</comments>
<content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Rollback of a VLAN creation from a List of UNI-Ports
#############################################################################
# Revision      : 1.0
# Last Updated  : 09-JAN-2010
#############################################################################
# Author Name   : NMS Team
#############################################################################
# Purpose:
#############################################################################
# 1.  Create VLAN
# 2.  Assign the VLAN to a QoS Profile
# 3.  Add a List of Ports to the VLAN
#####################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Rollsback creation of a VLAN from UNI Ports&quot;
# @SectionStart (description = &quot;Unprotected VLAN Create Params&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

################################################################################
# VLAN Definition
################################################################################

# @VariableFieldLabel (description = &quot;802.1Q-VLAN Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotVLanName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1Q VLAN Tag&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes)
set var unprotVLanCTag &quot;&quot;

# @VariableFieldLabel (description = &quot;VLAN QoS Profile Number&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues =[1,2,3,4,5,6,7,8])
set var unprotVLanQPNum 8

# @VariableFieldLabel (description = &quot;Comma Listed UNI_Port+Tag_Status&quot;,
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotVLanPortTagStsSeq &quot;&quot;

# @SectionEnd
# @MetaDataEnd

################################################################################
# CONFIGURATION DETAIL
################################################################################

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

proc validateVendorName {inVendorName} {

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

############################################################################
# TCL Procedure for VLAN Create Parameters Validation
############################################################################
proc validateVLanDeleteParams {inVLanName} {

    IF (![expr [string length $inVLanName] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name empty.&quot;
    ENDIF
}

################################################################################
# Procedure to Validate a single 2-Tuple of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTuple {inUniPortTagStatus
                                    outUniPortNum
                                    outTagStatus} {
     global abort_on_error

     upvar $outUniPortNum tmpUniPortNum
     upvar $outTagStatus  tmpTagStatus

     set tmpUniTagList [split $inUniPortTagStatus '+']

     if {[llength $tmpUniTagList] != 2} {
         error &quot;Invalid UNI-Port Tagging-Status, Tuple=>$inUniPortTagStatus&quot;
     }
     set tmpUniPortNum [lindex $tmpUniTagList 0]
     set tmpTagStatus  [lindex $tmpUniTagList 1]
}

################################################################################
# Procedure to Validate List of Tuples of the form 'UNI-Port+Tag-Status'
################################################################################
proc validateUniPortTagStatusTupleSeq {inUniPortTagStatusSeq
                                       outUniPortList
                                       outTagStatusList} {
     global abort_on_error

     if {[string length $inUniPortTagStatusSeq] == 0} {
        error &quot;UNI-Port Tag-Status Seq cannot be empty.&quot;
     }

     set tmpUniPortTagStatusList [split $inUniPortTagStatusSeq ,]

     if {[llength $tmpUniPortTagStatusList] == 0} {
        error &quot;UNI-Port, Tagging-Status tuple List cannot be empty.&quot;
     }

     upvar $outUniPortList   tmpUniPortList
     upvar $outTagStatusList tmpTagStatusList

     foreach currTuple $tmpUniPortTagStatusList {

        set outUniPortNum ""
        set outTagStatus  ""

        validateUniPortTagStatusTuple $currTuple \
                                      outUniPortNum \
                                      outTagStatus

        lappend tmpUniPortList    $outUniPortNum
        lappend tmpTagStatusList  $outTagStatus
     }
}

############################################################################
# TCL Procedure to Delete the VLAN and remove Ports from it
############################################################################
proc delete8021QVLan {inVLanName
                      inUniPortList
                      inTagStatusList} {

    remDot1qVLanFromAllUnis $inVLanName \
                              $inUniPortList \
                              $inTagStatusList
    if {[catch {
       delete vlan $inVLanName
    } errMsgText]} {
       error &quot;FAILED: Could not delete VLAN $inVLanName, $errMsgText&quot;
    }
}

##########################################################################
# Procedure to remove the 802.1q VLAN from one UNI Port on the switch
##########################################################################
proc remDot1qVLanFromOneUni {inVLanName
                             inUniPortNum
                             inTagStatus} {
    if {[catch {
       configure vlan $inVLanName delete port $inUniPortNum
    } result]} {
       error &quot;FAILED: Cannot delete Port $inUniPortNum from VLAN, $result&quot;
    }
}

###########################################################################
# Procedure to Remove the VLAN from all the UNI Ports on the switch
###########################################################################
proc remDot1qVLanFromAllUnis {inVLanName
                              inUniPortList
                              inTagStatusList} {

    foreach currUniPort   $inUniPortList \
            currTagStatus $inTagStatusList {

       remDot1qVLanFromOneUni $inVLanName \
                              $currUniPort \
                              $currTagStatus
    }
}

############################################################################
# TCL Procedure to validate and Create the 802.1Q VLAN and add Ports to it
############################################################################
proc rollbackUnProtectedVLanCreate {inVLanName
                                    inVLanCTag
                                    inVLanQPNum
                                    inUniPortTagStsSeq} {

	global isExos
	set outUniPortList [list]
    set outTagStatusList   [list]

	if {[string match $isExos true]} {
    	create log entry &quot;START-Create-Rollback Unprotected VLAN&quot;
	}

    validateVLanDeleteParams $inVLanName

	validateUniPortTagStatusTupleSeq $inUniPortTagStsSeq \
                                     outUniPortList \
                                     outTagStatusList

    delete8021QVLan $inVLanName \
    				$outUniPortList \
    				$outTagStatusList

	if {[string match $isExos true]} {
    	create log entry &quot;FINISH-Create-Rollback Unprotected VLAN&quot;
	}
}

################################################################################
# CLI MODE Settings
################################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

rollbackUnProtectedVLanCreate $unprotVLanName \
                              $unprotVLanCTag \
                              $unprotVLanQPNum \
                              $unprotVLanPortTagStsSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<creator>system</creator>
<scriptOwner>system</scriptOwner>

</script>
