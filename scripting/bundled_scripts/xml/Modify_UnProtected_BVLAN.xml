<!-- This file is generated by system. Do not edit this file. -->
<script name="Modify_UnProtected_BVLAN">
<comments>This scripts modifies a unprotected 802.1ah B-VLAN on NNI Ports</comments>
<content># @METADATASTART
#@DetailDescriptionStart
##################################################################################
# Extreme Networks(R) CLI Scripting Library
# scripting.Script        : Unprotected 802.1ah B-VLAN modification on NNI Ports
##################################################################################
# Revision      : 1.0
# Last Updated  : 26-DEC-2009
##################################################################################
# Author Name   : NMS Team
##################################################################################
# Purpose:
##################################################################################
# 1. Modify a unprotected 802.1ah B-VLAN via creation on a new Switch
# 2. Modify a unprotected 802.1ah B-VLAN via deletion from a Switch
# 3. Modify a unprotected 802.1ah B-VLAN via insertion to more NNI Ports on a Switch
# 4. Modify a unprotected 802.1ah B-VLAN via removal from some NNI Ports on a Switch
##################################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;This script modifies 802.1ah B-VLANs on NNI Ports&quot;
# @SectionStart (description = &quot;802.1ah B-VLAN Modification Parameters&quot;)

# @VariableFieldLabel (description = &quot;Abort on error?&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [yes,no])
set var abortOnCliError yes

# @VariableFieldLabel (description = &quot;Choose Modification Action-Type&quot;,
#   type        = String,
#   scope       = global,
#   required    = yes,
#   validValues = [Modify_Create,Modify_Delete,Modify_Insert,Modify_Remove,Modify_INSREM,Modify_RENAME])
set var unprotBVLanModifyActionType Modify_Create

################################################################################
# 802.1ah B-VLAN modification Parameters Definition
################################################################################
# @VariableFieldLabel (description = &quot;802.1ah B-VLAN Old Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotBVLanOldName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ah B-VLAN New Name&quot;,
#   type        = VLAN_NAME,
#   scope       = global,
#   required    = yes,
#   readonly    = no)
set var unprotBVLanNewName &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ah B-VLAN Tag, Create-only&quot;,
#   type        = String,
#   scope       = global,
#   required    = no)
set var unprotBVLanBTag &quot;&quot;

# @VariableFieldLabel (description = &quot;802.1ah B-VLAN QoS Profile, Create-only&quot;,
#   type        = String,
#   scope       = global,
#   required    = no,
#   validValues =[1,2,3,4,5,6,7,8])
set var unprotBVLanQPNum 8

# @VariableFieldLabel (description = &quot;Comma Listed NNI Ports-1 for B-VLAN&quot;
#   type        = String,
#   scope       = device,
#   required    = yes)
set var unprotBVLanPortSeq &quot;&quot;

# @VariableFieldLabel (description = &quot;Comma Listed NNI Ports-2 for B-VLAN&quot;
#   type        = String,
#   scope       = device,
#   required    = no)
set var unprotBVLanIRPortSeq &quot;&quot;

set var permitRingPortsAsUni Yes

# @SectionEnd
# @MetaDataEnd

############################################################################
# TCL Procedure for CLI scripting.Script Execution Mode setting
############################################################################
proc setCliErrorHandling {inAbortStatus} {

     global abort_on_error

     if {![string compare $inAbortStatus "yes"]} {
        configure cli mode scripting abort-on-error
     } else {
        configure cli mode scripting ignore-error
     }
}

#############################################################
# Validation of Switch Vendor Name
#############################################################
proc validateVendorName {inVendorName} {

    global abort_on_error

    IF (![string equal $inVendorName &quot;Extreme&quot;]) THEN
       error &quot;This script is only supported for Extreme switches.&quot;
    ENDIF
}

#############################################################
# Validation of Unprotected B-VLAN Creation Parameters
#############################################################
proc validateBVLanCreateParams {inBVLanOldName
                                inBVLanBTag
                                inBVLanQPNum
                                inBVLanPortSeq} {
    global abort_on_error

    IF (![expr [string length $inBVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanBTag] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Tag is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanQPNum] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN QoS-Profile Number is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanPortSeq] &gt; 0]) THEN
       error &quot;FAILED: NNI Port List is empty.&quot;
    ENDIF
}

#############################################################
# Validation of Unprotected B-VLAN Update(Insert/Remove/Delete)
#############################################################
proc validateBVLanUpdateParams {inBVLanOldName
                                inBVLanPortSeq} {
    global abort_on_error

    IF (![expr [string length $inBVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanPortSeq] &gt; 0]) THEN
       error &quot;FAILED: NNI Port List is empty.&quot;
    ENDIF
}

############################################################################
# Validation of Unprotected B-VLAN Insert and Remove
############################################################################
proc validateBVLanInsRemParams {inBVLanOldName
                                inBVLanInsPortSeq
                                inBVLanRemPortSeq} {
    global abort_on_error

    IF (![expr [string length $inBVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: VLAN Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanInsPortSeq] &gt; 0]) THEN
       error &quot;FAILED: Insert Port List is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanRemPortSeq] &gt; 0]) THEN
       error &quot;FAILED: Remove Port List is empty.&quot;
    ENDIF
}

############################################################################
# Validation of Unprotected B-VLAN renaming Parameters
############################################################################
proc validateBVLanRenameParams {inBVLanOldName
                                inBVLanNewName} {
    global abort_on_error

    IF (![expr [string length $inBVLanOldName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN Old Name is empty.&quot;
    ENDIF

    IF (![expr [string length $inBVLanNewName] &gt; 0]) THEN
       error &quot;FAILED: B-VLAN New Name is empty.&quot;
    ENDIF
}

############################################################################
# Creation of a Unprotected B-VLAN and add Ports to it
############################################################################
proc createUnProtBVLan {inBVLanOldName
                        inBVLanBTag
                        inBVLanQPNum
                        inBVLanPortSeq} {
    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       create bvlan $inBVLanOldName
    } result]} {
       error &quot;FAILED: Could not create BVLan $inBVLanOldName, $result&quot;
    }

    if {[catch {
       config bvlan $inBVLanOldName tag $inBVLanBTag
    } result]} {
       delete bvlan $inBVLanOldName
       error &quot;FAILED: Invalid Tag $inBVLanBTag for BVLan $inBVLanOldName, $result&quot;
    }

##  if {[catch {
##     config bvlan $inBVLanOldName qosprofile qp$inBVLanQPNum
##  } result]} {
##     delete bvlan $inBVLanOldName
##     error &quot;FAILED: Invalid QoS-Profile for BVLan $inBVLanOldName, $result&quot;
##  }

    if {[catch {
       config bvlan $inBVLanOldName add ports $inBVLanPortSeq tagged
       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI $permitRingPortsAsUni
       ENDIF
    } result]} {
       delete bvlan $inBVLanOldName
       error &quot;FAILED: Could not add Ports $inBVLanPortSeq to BVLan $inBVLanOldName, $result&quot;
    }
}

############################################################################
# Deletion of a Unprotected B-VLAN after removing Ports from it
############################################################################
proc deleteUnProtBVLan {inBVLanOldName inBVLanPortSeq} {

    global abort_on_error

    if {[catch {
       config bvlan $inBVLanOldName delete ports $inBVLanPortSeq
    } result]} {
       error &quot;FAILED: Could not delete Ports $inBVLanPortSeq from BVLan $inBVLanOldName, $result&quot;
    }

    if {[catch {
       delete bvlan $inBVLanOldName
    } result]} {
       error &quot;FAILED: Could not delete BVLan $inBVLanOldName, $result&quot;
    }
}

############################################################################
# Insertion of a List of Ports to a Unprotected B-VLAN
############################################################################
proc insertUnProtBVLan {inBVLanOldName inBVLanPortSeq} {

    global abort_on_error
    global permitRingPortsAsUni

    if {[catch {
       config bvlan $inBVLanOldName add ports $inBVLanPortSeq tagged
       regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} addWarningMsg
       IF ([info exists addWarningMsg]) THEN
       CLI $permitRingPortsAsUni
       ENDIF
    } result]} {
       error &quot;FAILED: Could not Insert Ports $inBVLanPortSeq to BVLan $inBVLanOldName, $result&quot;
    }
}

############################################################################
# Removal of a List of Ports from a Unprotected B-VLAN
############################################################################
proc removeUnProtBVLan {inBVLanOldName inBVLanPortSeq} {

    global abort_on_error

    if {[catch {
       config bvlan $inBVLanOldName delete ports $inBVLanPortSeq
    } result]} {
       error &quot;FAILED: Could not Remove Ports $inBVLanPortSeq from BVLan $inBVLanOldName, $result&quot;
    }
}

############################################################################
# Modifying Unprotected B-VLAN via Creation on a new Switch
############################################################################
proc modifyUnProtBVLanCreate {inBVLanOldName inBVLanBTag inBVLanQPNum inBVLanPortSeq} {

    global abort_on_error

    validateBVLanCreateParams $inBVLanOldName $inBVLanBTag $inBVLanQPNum $inBVLanPortSeq

    createUnProtBVLan $inBVLanOldName $inBVLanBTag $inBVLanQPNum $inBVLanPortSeq
}

############################################################################
# Modifying Unprotected B-VLAN via Deletion from a Switch
############################################################################
proc modifyUnProtBVLanDelete {inBVLanOldName inBVLanPortSeq} {

    global abort_on_error

    validateBVLanUpdateParams $inBVLanOldName $inBVLanPortSeq

    deleteUnProtBVLan $inBVLanOldName $inBVLanPortSeq
}

############################################################################
# Modifying Unprotected B-VLAN via Insertion on a Switch
############################################################################
proc modifyUnProtBVLanInsert {inBVLanOldName inBVLanPortSeq} {

    global abort_on_error

    validateBVLanUpdateParams $inBVLanOldName $inBVLanPortSeq

    insertUnProtBVLan $inBVLanOldName $inBVLanPortSeq
}

############################################################################
# Modifying Unprotected B-VLAN via Removal from a Switch
############################################################################
proc modifyUnProtBVLanRemove {inBVLanOldName
                              inBVLanPortSeq} {
    global abort_on_error

    validateBVLanUpdateParams $inBVLanOldName $inBVLanPortSeq

    removeUnProtBVLan $inBVLanOldName $inBVLanPortSeq
}

############################################################################
# Modifying Unprotected B-VLAN via Insert-Removal from a Switch
############################################################################
proc modifyUnProtBVLanInsRem {inBVLanOldName
                              inBVLanInsPortSeq
                              inBVLanRemPortSeq} {
    global abort_on_error

    validateBVLanInsRemParams $inBVLanOldName \
                              $inBVLanInsPortSeq \
                              $inBVLanRemPortSeq

    insertUnProtBVLan $inBVLanOldName \
                      $inBVLanInsPortSeq

    removeUnProtBVLan $inBVLanOldName \
                      $inBVLanRemPortSeq
}

############################################################################
# Modifying Unprotected B-VLAN by renaming the VLAN Name on the Switch
############################################################################
proc modifyUnProtBVLanRename {inBVLanOldName
                              inBVLanNewName} {

    validateBVLanRenameParams $inBVLanOldName \
                              $inBVLanNewName

    renameUnProtBVLan $inBVLanOldName \
                      $inBVLanNewName
}

############################################################################
# Renaming of a Unprotected VLAN
############################################################################
proc renameUnProtBVLan {inVLanOldName
                       inVLanNewName} {

    global abort_on_error

    if {[catch {
       config vlan $inVLanOldName name $inVLanNewName
    } result]} {
       error &quot;FAILED: Could not rename VLan $inVLanOldName, $result&quot;
    }
}

############################################################################
# TCL Procedure to modify a unprotected 802.1ah B-VLAN on NNI ports of a Switch
############################################################################
proc modifyUnProt8021ahBVLan {inModifyActionType
                              inBVLanOldName
                              inBVLanNewName
                              inBVLanBTag
                              inBVLanQPNum
                              inBVLanPortSeq
                              inBVLanIRPortSeq} {
    global abort_on_error
    global isExos

    if {[string match $isExos true]} {
        create log entry &quot;Starting protected/unprotected B-VLAN modification on Switch&quot;
       }

    switch $inModifyActionType {
       Modify_Create {
       modifyUnProtBVLanCreate $inBVLanOldName \
                               $inBVLanBTag \
                               $inBVLanQPNum \
                               $inBVLanPortSeq
       }
       Modify_Delete {
       modifyUnProtBVLanDelete $inBVLanOldName \
                               $inBVLanPortSeq
       }
       Modify_Insert {
       modifyUnProtBVLanInsert $inBVLanOldName \
                               $inBVLanPortSeq
       }
       Modify_Remove {
       modifyUnProtBVLanRemove $inBVLanOldName \
                               $inBVLanPortSeq
       }
       Modify_INSREM {
       modifyUnProtBVLanInsRem $inBVLanOldName \
                               $inBVLanPortSeq \
                               $inBVLanIRPortSeq
       }
       Modify_RENAME {
       modifyUnProtBVLanRename $inBVLanOldName \
                               $inBVLanNewName
       }
       default {
        error &quot;FAILED: Invalid B-VLAN Modify Action Type&quot;
       }
    }

    if {[string match $isExos true]} {
        create log entry &quot;Finished protected/unprotected B-VLAN modification on Switch&quot;
       }
}

################################################################################
# CLI MODE Settings
################################################################################
setCliErrorHandling $abortOnCliError

validateVendorName $vendor

modifyUnProt8021ahBVLan $unprotBVLanModifyActionType \
                        $unprotBVLanOldName \
                        $unprotBVLanNewName \
                        $unprotBVLanBTag \
                        $unprotBVLanQPNum \
                        $unprotBVLanPortSeq \
                        $unprotBVLanIRPortSeq
</content>
<contexts></contexts>
<supprotedGroups></supprotedGroups>
<roles>,Administrator,</roles>
<auditLogEnabled>false</auditLogEnabled>
<scriptTimeout>120</scriptTimeout>
<defaultCategory>Provisioning</defaultCategory>
<rollbackScript>Rollback_MOD_UnProtected_BVLAN</rollbackScript>
<postprocessScript>Sync_MOD_UnProtected_BVLAN</postprocessScript>
<scriptOwner>system</scriptOwner>

</script>
